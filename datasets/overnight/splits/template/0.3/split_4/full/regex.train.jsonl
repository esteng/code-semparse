{"paraphrased": "lines that begin with a letter and include a lowercase letter", "source": "line that starts with letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_9", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with a character and contains a lowercase letter", "source": "line that ends with character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_15", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and also have a lowercase letter in them", "source": "line that starts with lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_20", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains 123 at the end", "source": "line that ends with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_27", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that contains  123 ", "source": "line that starts with letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_40", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a vowel and also contain one", "source": "line that starts with vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_79", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that contains  abc ", "source": "line that starts with lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_81", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a capital letter and uses 123", "source": "line that starts with capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_93", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins with a vowel and utilizes a character", "source": "line that starts with vowel and that contains character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_99", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a vowel and ends with a letter", "source": "line that ends with letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_100", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that contains capital letter", "source": "line that starts with `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_112", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with a letter in it", "source": "line that ends with letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_118", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a letter and contains abc", "source": "line that starts with letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_121", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins and contains capital letters", "source": "line that starts with capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_138", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a vowel and ending with a capital letter", "source": "line that ends with capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_186", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with a character and uses abc", "source": "line that ends with character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_188", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that contains character", "source": "line that starts with capital letter and that contains character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_189", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with and uses capital letters", "source": "line that starts with capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_198", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a character and using a vowel", "source": "line that starts with character and that contains vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_199", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses characters and ends with a vowel", "source": "line that ends with vowel and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_203", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with abc and contains that character", "source": "line that starts with `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_213", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with characters but also has vowels within", "source": "line that ends with character and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_214", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that contains  abc ", "source": "line that ends with character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_235", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a lowercase letter and has characters", "source": "line that starts with lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_249", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include 123 and abc at the begining", "source": "line that starts with `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_264", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel at the end and includes abc", "source": "line that ends with vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_277", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that contains  abc ", "source": "line that starts with letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_283", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a vowel and using a lowercase letter", "source": "line that starts with vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_304", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with a vowel but contains 123 in the text string", "source": "line that ends with vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_307", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a letter and have a vowel", "source": "line that ends with letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_312", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that contains  123 ", "source": "line that starts with vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_319", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that contains vowel", "source": "line that starts with `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_325", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line where a capital letter appears and ends with a capital letter", "source": "line that ends with capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_339", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a letter and including a capital letter", "source": "line that starts with letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_355", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with", "source": "line that starts with `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_373", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that contains lowercase letter", "source": "line that ends with lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_386", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes in a character and has a capital", "source": "line that ends with character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_408", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that contains character", "source": "line that starts with capital letter and that contains character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_446", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that contains capital letter", "source": "line that ends with character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_487", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that contains character", "source": "line that starts with character and that contains character", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_497", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a capital letter", "source": "line that ends with capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_515", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a character which also contains a capital letter", "source": "line that starts with character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_529", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that contains vowel", "source": "line that ends with `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_533", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that contains letter", "source": "line that ends with lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_553", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a lowercase letter and have 123", "source": "line that ends with lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_567", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that contains vowel", "source": "line that starts with capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_575", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with letters that ends with 123", "source": "line that ends with `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_606", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with abc and uses 123", "source": "line that starts with `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_618", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins and contains letters", "source": "line that starts with letter and that contains letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_643", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that commences with a character and includes a capital letter", "source": "line that starts with character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_649", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that  includes a character and has a capital letter at the end", "source": "line that ends with capital letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_658", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with 123 and that includes a letter", "source": "line that starts with `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_688", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with a capital letter that ends with a vowel", "source": "line that ends with vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_690", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a letter and is started with a vowel", "source": "line that starts with vowel and that contains letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_698", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that contains vowel", "source": "line that starts with lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_706", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with abc that has abc within it", "source": "line that starts with `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_712", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains and ends in a vowel", "source": "line that ends with vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_733", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with a lowercase letter", "source": "line that ends with lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_734", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that contains capital letter", "source": "line that starts with `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_737", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with 123 and contain abc", "source": "line that starts with `` 123 '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_744", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a character and has a capital letter in it", "source": "line that starts with character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_843", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a character and uses abc", "source": "line that starts with character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_864", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that contains character", "source": "line that ends with character and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_886", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a letter and contains   123 ", "source": "line that starts with letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_904", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has the number 123 and ends with a character", "source": "line that ends with character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_988", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a character", "source": "line that ends with character and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_994", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including a letter and terminating with a vowel", "source": "line that ends with vowel and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1004", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a lowercase letter and uses abc", "source": "line that ends with lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1020", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line which contains at least one vowel and ending with abc", "source": "line that ends with `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1029", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a lower case letter and contains the character", "source": "line that starts with lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1031", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and uses abc", "source": "line that starts with capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1040", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that contains  abc ", "source": "line that starts with capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1042", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with 123 and contains abc", "source": "line that starts with `` 123 '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1066", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with vowels and uses abc", "source": "line that starts with vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1070", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line contains abc and ends with a character", "source": "line that ends with character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1071", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with the short series abc and have a capital somewhere", "source": "line that ends with `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1091", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line must have a lowercase letter in it somewhere and end with a vowel", "source": "line that ends with vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1094", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins with any letter and utilizes a character", "source": "line that starts with letter and that contains character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1119", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with abc and includes a lowercase letter", "source": "line that ends with `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1124", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a letter and has abc", "source": "line that starts with letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1126", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a character and ends with a lowercase letter", "source": "line that ends with lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1133", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a letter and ending with a capital letter", "source": "line that ends with capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1138", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with 123 and that includes big letter", "source": "line that starts with `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1173", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what  line that ends with  abc  and that contains  123 ", "source": "line that ends with `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1205", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with the numbers 123 and utilizes a letter", "source": "line that starts with `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1218", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a capital letter and uses vowel", "source": "line that starts with capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1223", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with a vowel and uses letters", "source": "line that ends with vowel and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1248", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that contains vowel", "source": "line that ends with `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1257", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that contains letter", "source": "line that starts with vowel and that contains letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1267", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that contains  123 ", "source": "line that starts with `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1268", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "word that finishes with 123 and has a capital", "source": "line that ends with `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1273", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a vowel and also contains a capital letter", "source": "line that ends with vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1278", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that contains  abc ", "source": "line that ends with lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1307", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with abc that contains a capital letter", "source": "line that starts with `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1331", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel and a lowercase letter at the start", "source": "line that starts with lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1345", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a lowercase letter and has a capital letter", "source": "line that starts with lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1350", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that contains letter", "source": "line that starts with lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1358", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a letter and have a vowel", "source": "line that starts with letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1364", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a vowel and that includes a lowercase letter", "source": "line that ends with vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1369", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with a letter and uses abc", "source": "line that ends with letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1373", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with 123 also has a capital letter", "source": "line that starts with `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1386", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with abc and that includes a vowel", "source": "line that ends with `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1406", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a letter and contains a vowel within", "source": "line that starts with letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1413", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a vowel and uses capital letters", "source": "line that ends with vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1443", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a capital letter and uses lowercase letters", "source": "line that ends with capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1445", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with abc and contains a vowel", "source": "line that ends with `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1458", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start 123 and have it somewhere else too", "source": "line that starts with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1467", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains any letter but begins with a vowel", "source": "line that starts with vowel and that contains letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1473", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a lowercase letter and utilizes characters", "source": "line that ends with lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1526", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with and containing a vowel", "source": "line that ends with vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1528", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with 123 and also contains 123", "source": "line that starts with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1536", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a character and that includes abc", "source": "line that ends with character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1546", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a lowercase letter and ends with any owel", "source": "line that ends with vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1562", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that contains vowel", "source": "line that starts with `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1574", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a vowel and ending with 123", "source": "line that ends with `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1579", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing at least one vowel and ends with lowercase letter", "source": "line that ends with lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1596", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins w123 and includes character", "source": "line that starts with `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1609", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lineas that end with a vowel and also contain a vowel", "source": "line that ends with vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1610", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with 123 and uses abc", "source": "line that ends with `` 123 '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1614", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that contains lowercase letter", "source": "line that ends with lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1616", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses a lowercase letter and ends with a vowel", "source": "line that ends with vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1619", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with abc and including a lowercase letter", "source": "line that starts with `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1641", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that complete with a vowel and also contains a vowel", "source": "line that ends with vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1642", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that contains character", "source": "line that ends with lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1655", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with abc and has 123", "source": "line that starts with `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1656", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that contains vowel", "source": "line that ends with vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1658", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a letter and utilizes a character", "source": "line that ends with letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1661", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that contains  123 ", "source": "line that ends with capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1667", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a lowercase letter and containing the segment abc", "source": "line that ends with lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1677", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines starting with characters contain the word abc ", "source": "line that starts with character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1696", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with 123 and uses vowels", "source": "line that ends with `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1708", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a character and has capital letter", "source": "line that starts with character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1715", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that contains character", "source": "line that starts with vowel and that contains character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1754", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line ends with abc and also contains the character", "source": "line that ends with `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1766", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and a letter", "source": "line that starts with capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1781", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lina the begins with abc and has a letter", "source": "line that starts with `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1782", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line which includes small 123 and finishes with vowel", "source": "line that ends with vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1783", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that contains capital letter", "source": "line that ends with capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1810", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with abc", "source": "line that starts with `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1852", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing abc and ending with a letter", "source": "line that ends with letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1855", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with character and it contains the letter", "source": "line that ends with character and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1873", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes  a vowel and has a small letter at the end", "source": "line that ends with lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1880", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter at the end and includes an uppercase letter", "source": "line that ends with lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1889", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that contains capital letter", "source": "line that starts with lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1907", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with abc but uses 123", "source": "line that ends with `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1908", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that contains lowercase letter", "source": "line that ends with capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1918", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that contains  123 ", "source": "line that starts with vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1923", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that contains vowel", "source": "line that ends with letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1937", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that initiate with the number sequence 123 and also have abc in them", "source": "line that starts with `` 123 '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1956", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a capital letter and contains a letter", "source": "line that starts with capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1963", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line utilizing any character and ending with a vowel", "source": "line that ends with vowel and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1965", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with a character within it that terminates with a vowel", "source": "line that ends with vowel and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1982", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a letter and ending with 123", "source": "line that ends with `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1992", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a capital letter and containing the word abc", "source": "line that ends with capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2000", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line includes letter and concludes wsmall letter", "source": "line that ends with lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2005", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that contains  123 ", "source": "line that ends with vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2019", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that contains letter", "source": "line that starts with letter and that contains letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2024", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with abc and contains a vowel", "source": "line that starts with `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2053", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing a vowel and ending with the characters 123", "source": "line that ends with `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2087", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with a character and uses vowels", "source": "line that starts with character and that contains vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2094", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line where 123 appears and ends with abc", "source": "line that ends with `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2096", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and contains a lowercase letter", "source": "line that ends with `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2127", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing abc and ending with a vowel", "source": "line that ends with vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2131", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses letters and has abc at the end", "source": "line that ends with `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2134", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel and ending with any lowercase letter", "source": "line that ends with lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2137", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains a letter and ends with a lowercase letter", "source": "line that ends with lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2144", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with 123 and using a character", "source": "line that starts with `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2147", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a lowercase letter and uses letters", "source": "line that starts with lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2183", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines ending with a letter containing 123", "source": "line that ends with letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2202", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line where a character appears and ends with abc", "source": "line that ends with `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2217", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with abc and has abc", "source": "line that ends with `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2228", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with a capital letter and includes a lowercase letter", "source": "line that ends with capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2283", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a lowercase letter and end with 123", "source": "line that ends with `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2292", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with vowels but uses 123", "source": "line that starts with vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2299", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a letter and contains characters", "source": "line that starts with letter and that contains character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2301", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after 123 and uses capital letters", "source": "line that ends with `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2324", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that finish with a lowercase letter and include a capital letter", "source": "line that ends with lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2334", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "list lines that begins with   abc ", "source": "line that starts with `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2352", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that utilizes a lowercase letter and begins with a character", "source": "line that starts with character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2390", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a vowel and which also contains the word 123", "source": "line that starts with vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2394", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with ends with any lowercase letter and uses a lowercase letter", "source": "line that ends with lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2410", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with and contains 123", "source": "line that ends with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2411", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a capital and has lowercase", "source": "line that starts with capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2439", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that contains lowercase letter", "source": "line that starts with `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2445", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing a lowercase letter and ending with 123", "source": "line that ends with `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2455", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a letter and ending with abc", "source": "line that ends with `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2510", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with a lowercase letter and also has a letter in it", "source": "line that starts with lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2534", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with  123  and also contains a capital letter", "source": "line that ends with `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2543", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that contains capital letter", "source": "line that starts with character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2551", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with a letter and includes a capital letter", "source": "line that ends with letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2578", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with 123 and contains a letter", "source": "line that starts with `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2596", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with a capital letter", "source": "line that ends with character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2622", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that contains vowel", "source": "line that ends with character and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2635", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including at least one capital letter and ending with any letter", "source": "line that ends with letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2655", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a lowercase letter and also uses a capital letter", "source": "line that starts with lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2672", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a lowercase letter and has a character", "source": "line that ends with lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2688", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter at the end of it", "source": "line that ends with lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2690", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with vowels and uses characters", "source": "line that starts with vowel and that contains character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2743", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that contains lowercase letter", "source": "line that starts with `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2748", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that contains vowel", "source": "line that ends with lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2749", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that contains capital letter", "source": "line that ends with letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2754", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that contains capital letter", "source": "line that ends with `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2762", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a letter and contains a vowel", "source": "line that starts with letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2766", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that contains  123 ", "source": "line that starts with capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2779", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that contains  123 ", "source": "line that starts with letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2788", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with a letter containing 123", "source": "line that ends with letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2810", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with 123 and also has a letter in it", "source": "line that starts with `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2812", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a vowel that has abc", "source": "line that starts with vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2816", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins with any character and has abc in it", "source": "line that starts with character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2825", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with 123 and has a letter", "source": "line that ends with `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2838", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a character and have the smaller word abc in them", "source": "line that starts with character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2839", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines ending with vowels and have 123", "source": "line that ends with vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2842", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that contains lowercase letter", "source": "line that starts with letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2870", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates in a letter and includes a letter", "source": "line that ends with letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2897", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with a vowel and that also utilize a lowercase letter", "source": "line that starts with vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2908", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a letter and includes a letter", "source": "line that starts with letter and that contains letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2933", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with a character and uses lowercase letters", "source": "line that ends with character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2968", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that concludes with a capital letter and includes a vowel", "source": "line that ends with capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2989", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that concludes with a letter and includes 123", "source": "line that ends with letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3019", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with 123 and have a vowel", "source": "line that starts with `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3038", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a vowel and contains abc", "source": "line that starts with vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3046", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with abc also utilizes a character", "source": "line that starts with `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3055", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a capital letter that has 123", "source": "line that ends with capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3058", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and have abc", "source": "line that starts with lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3060", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel at the end and includes an alphabet in the uppercase", "source": "line that ends with vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3078", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a vowel containing 123", "source": "line that starts with vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3112", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning 123 and using abc", "source": "line that starts with `` 123 '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3137", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that contains letter", "source": "line that starts with lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3145", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that contains  abc ", "source": "line that ends with lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3152", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has 123 in it and is begun with any character", "source": "line that starts with character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3183", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a lowercase letter and uses 123", "source": "line that ends with lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3208", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc in the beginning and includes a character", "source": "line that starts with `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3261", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a lowercase letter that has abc", "source": "line that ends with lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3295", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that contains  abc ", "source": "line that ends with `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3308", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a capital letter and containing a lowercase letter", "source": "line that ends with capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3314", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that contains  abc ", "source": "line that ends with vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3353", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a vowel and has a small letter in the beginning", "source": "line that starts with lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3367", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that contains  abc ", "source": "line that ends with `` 123 '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3368", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains 123 and ends with a vowel", "source": "line that ends with vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3374", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that contains lowercase letter", "source": "line that starts with character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3398", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that finish with the smaller word abc and include letters", "source": "line that ends with `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3402", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a letter and uses a character", "source": "line that starts with letter and that contains character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3406", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line will contain abc and end with a letter", "source": "line that ends with letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3427", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that contains  abc ", "source": "line that starts with capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3446", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with and contain 123", "source": "line that starts with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3454", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with abc and containing a lowercase letter", "source": "line that ends with `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3467", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line begins with a letter and also has a vowel in it", "source": "line that starts with letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3471", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a lowercase letter but uses capital letters", "source": "line that starts with lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3488", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains vowels and ends with a lowercase letter", "source": "line that ends with lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3499", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with 123 and that has abc in it", "source": "line that ends with `` 123 '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3511", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a letter and uses 123", "source": "line that ends with letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3515", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that contains  abc ", "source": "line that starts with letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3519", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains and ends with a lowercase letter", "source": "line that ends with lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3530", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the characters abc and terminate with a character", "source": "line that ends with character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3540", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with a lowercase letter", "source": "line that ends with lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3542", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses the sequence abc and ends with any character", "source": "line that ends with character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3547", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with a capital letter and uses abc", "source": "line that ends with capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3565", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a letter and has a letter", "source": "line that ends with letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3629", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that contains  abc ", "source": "line that ends with character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3638", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with any characters", "source": "line that ends with character and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3640", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a word that starts and contains the word abc", "source": "line that starts with `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3646", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a character that has 123", "source": "line that ends with character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3654", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing and ending with a lowercase letter", "source": "line that ends with lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3672", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a letter in the beginning", "source": "line that starts with letter and that contains letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3679", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that contains capital letter", "source": "line that ends with lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3681", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that contains lowercase letter", "source": "line that ends with `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3684", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has abc within it and also at the end of it", "source": "line that ends with `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3685", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has a vowel and ends with the number 123", "source": "line that ends with `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3695", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with 123 and using a lowercase letter", "source": "line that starts with `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3706", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that contains character", "source": "line that starts with `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3745", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that contains  abc ", "source": "line that starts with character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3778", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains letters and ends with lowercase letters", "source": "line that ends with lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3784", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a chracter and include a character", "source": "line that starts with character and that contains character", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3786", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with multiple instances of the same vowel that finishes the line", "source": "line that ends with vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3812", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a lowercase letter and uses letters", "source": "line that ends with lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3819", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that finsih with a vowel and include abc", "source": "line that ends with vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3828", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has 123 at the end and includes abc", "source": "line that ends with `` 123 '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3836", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that contains lowercase letter", "source": "line that starts with capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3862", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that contains character", "source": "line that ends with vowel and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3869", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a vowel and containing lowercase letters", "source": "line that starts with vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3874", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with a letter and also contains 123", "source": "line that starts with letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3885", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes ac", "source": "line that ends with `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3891", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a character and that ends with 123", "source": "line that ends with `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3893", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has abc in it and also has a lowercase letter at the end", "source": "line that ends with lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3902", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that contains lowercase letter", "source": "line that starts with lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3917", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with capitals letter and uses any characters", "source": "line that starts with capital letter and that contains character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3933", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with any vowel and uses 123", "source": "line that starts with vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3934", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and have a character", "source": "line that starts with lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3974", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that contains capital letter", "source": "line that starts with vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3992", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that contains letter", "source": "line that starts with character and that contains letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4010", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a character at the end and includes 123", "source": "line that ends with character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4017", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a character and uses character", "source": "line that starts with character and that contains character", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4050", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that contains  123 ", "source": "line that ends with character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4051", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a capital letter has a lowercase letter", "source": "line that starts with capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4070", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a vowel and containing a capital letter", "source": "line that starts with vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4084", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that both start with and contain a character", "source": "line that starts with character and that contains character", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4105", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a capital letter and has a vowel", "source": "line that starts with capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4125", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with and contains abc", "source": "line that ends with `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4127", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending 123 and having some other character in it", "source": "line that ends with `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4158", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that finish with a capital letter and include letters", "source": "line that ends with capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4159", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that contains capital letter", "source": "line that ends with vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4189", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "find a line that begins with a capitalized letter and incorporates the sequence abc", "source": "line that starts with capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4190", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line creates wsmall letter which includes small letter", "source": "line that starts with lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4193", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a character and includes 123", "source": "line that starts with character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4196", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a capital letter and has a letter", "source": "line that ends with capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4207", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with 1 2 or 3 that also has a capital letter", "source": "line that starts with `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4235", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a vowel and utilizing at least one letter", "source": "line that starts with vowel and that contains letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4238", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has lowercase letters throughout but ends with a capital instead", "source": "line that ends with capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4251", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that contains vowel", "source": "line that starts with lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4271", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line will contain 123 and end with a capital letter", "source": "line that ends with capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4273", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins and contains a character", "source": "line that starts with character and that contains character", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4278", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains letters and ends with characters", "source": "line that ends with character and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4280", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes in a character and has a lowercase letter", "source": "line that ends with character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4283", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with 123 and uses letters", "source": "line that ends with `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4303", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that contains  abc ", "source": "line that ends with letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4306", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that contains character", "source": "line that starts with lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4307", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that contains lowercase letter", "source": "line that starts with vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4310", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with abc and containing 123", "source": "line that starts with `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4317", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a lowercase letter and containing a capital letter", "source": "line that ends with lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4355", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line manifests wabc and has character", "source": "line that starts with `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4384", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with any capital letter and using a lowercase letter within it", "source": "line that starts with capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4394", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with abc which contains a vowel", "source": "line that starts with `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4408", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that contains character", "source": "line that ends with capital letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4431", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with and containing the number 123", "source": "line that starts with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4434", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with any vowel and has a lowercase letter somewhere", "source": "line that starts with vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4501", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with 123 and that includes lowercase letter", "source": "line that ends with `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4520", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that contains character", "source": "line that ends with character and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4533", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "mention a line starting with a capital letter and also containing abc", "source": "line that starts with capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4539", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with a letter and uses vowels", "source": "line that ends with letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4545", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with a capital letter and having another capital otherwise", "source": "line that ends with capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4559", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "is there a line that begins with the sequence abc and also has a vowel in it", "source": "line that starts with `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4562", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with any letter and has abc in it", "source": "line that ends with letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4598", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with any character and that contain a capital letter", "source": "line that ends with character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4605", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with a capital letter and has that letter in it", "source": "line that ends with capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4620", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with and contains lowercase letters", "source": "line that starts with lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4626", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and had a vowel in the beginning", "source": "line that starts with vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4633", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that contains letter", "source": "line that starts with `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4634", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with 123 and uses letter", "source": "line that starts with `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4655", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that contains  abc ", "source": "line that starts with lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4667", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that commences with 123 and includes a character", "source": "line that starts with `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4672", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with abc and has a capital letter", "source": "line that ends with `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4710", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with any letter so long as that letter is lowercase and contains the sequence of characters  123 ", "source": "line that starts with lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4720", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with 123 in it that is ended by an uppercase letter", "source": "line that ends with capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4724", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that contains letter", "source": "line that starts with `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4727", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a lowercase letter and has abc in it", "source": "line that starts with lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4753", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that contains lowercase letter", "source": "line that starts with vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4763", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that utilizes and ends with characters", "source": "line that ends with character and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4795", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a vowel and uses capital letters", "source": "line that starts with vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4804", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a lowercase letter and uses abc", "source": "line that starts with lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4818", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a lowercase letter at the end and also contains a character", "source": "line that ends with lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4819", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that utilize a letter and end with 123", "source": "line that ends with `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4826", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain as well as ends with a letter", "source": "line that ends with letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4828", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that contains character", "source": "line that starts with `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4842", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that contains capital letter", "source": "line that starts with lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4857", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line needs to begin with a lowercase letter and use a vowel somewhere within the line", "source": "line that starts with lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4859", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that contains  123 ", "source": "line that starts with `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4874", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that contains vowel", "source": "line that starts with capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4879", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a character containing a vowel", "source": "line that starts with character and that contains vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4896", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that contains  123 ", "source": "line that ends with lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4924", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a letter and that includes a lowercase letter", "source": "line that starts with letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4986", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses stops after a capital letter", "source": "line that ends with capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4990", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that contains vowel", "source": "line that ends with character and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5022", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that stops with abc but uses 123 within the sequence", "source": "line that ends with `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5023", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines containing at least one vowel with a capital letter at the beginning", "source": "line that starts with capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5043", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with lowercase letter and using a letter", "source": "line that starts with lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5105", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with a character and having a vowel somewhere in it", "source": "line that ends with character and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5113", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end in a letter that also utilize lowercase letters", "source": "line that ends with letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5152", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that contains vowel", "source": "line that starts with `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5155", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that contains  123 ", "source": "line that starts with character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5188", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that contains  123 ", "source": "line that starts with capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5194", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that contains capital letter", "source": "line that ends with letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5232", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with 123 and that includes a vowel", "source": "line that ends with `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5259", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a letter", "source": "line that ends with letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5265", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a lowercase letter and ending with a letter", "source": "line that ends with letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5269", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a character and has an uppercase letter in the beginning", "source": "line that starts with capital letter and that contains character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5272", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a vowel and ends with a character", "source": "line that ends with character and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5282", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a letter but also contains a lowercase one", "source": "line that starts with letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5286", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that contains lowercase letter", "source": "line that ends with `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5287", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that contains vowel", "source": "line that starts with character and that contains vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5340", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that contains character", "source": "line that ends with vowel and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5380", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "whats a line ending with a capital letter and containing a letter", "source": "line that ends with capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5442", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a letter at the end and includes a character", "source": "line that ends with letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5463", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that terminate with letters and have characters in them", "source": "line that ends with letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5489", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that contains  123 ", "source": "line that ends with `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5492", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a capital letter and ending with 123", "source": "line that ends with `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5496", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that contains  abc ", "source": "line that ends with capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5506", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that contains capital letter", "source": "line that ends with capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5531", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line starts starts with a vowel a e i o u and contains the word abc", "source": "line that starts with vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5536", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a vowel and that includes a capital letter", "source": "line that starts with vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5555", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with any lowercase letter and including a character", "source": "line that starts with lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5557", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends in a letter and that also has 123 in it", "source": "line that ends with letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5567", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that contains letter", "source": "line that ends with `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5573", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a letter and contains a lowercase letter", "source": "line that starts with letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5578", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a vowel and a letter at the ending", "source": "line that ends with letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5582", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and has a character in the beginning", "source": "line that starts with character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5607", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with 123 but uses vowels", "source": "line that starts with `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5610", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with 123 and has an uppercase letter", "source": "line that starts with `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5630", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a vowel and containing a letter", "source": "line that starts with vowel and that contains letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5642", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that contains  123 ", "source": "line that starts with character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5684", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines where a capital letter appears and ends with abc", "source": "line that ends with `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5707", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using 123 and ending with a capital letter", "source": "line that ends with capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5716", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with any character and uses letters", "source": "line that starts with character and that contains letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5733", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that contains capital letter", "source": "line that starts with capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5737", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with  abc  and contains character", "source": "line that ends with `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5743", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a capital letter and containing a vowel", "source": "line that starts with capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5753", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains a lowercase letter beginning in  abc ", "source": "line that starts with `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5759", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a vowel that has a capital letter", "source": "line that ends with vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5772", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that contains capital letter", "source": "line that starts with letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5774", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that contains letter", "source": "line that starts with character and that contains letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5799", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a character and uses letter", "source": "line that ends with character and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5804", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a character and contains the numbers 123", "source": "line that ends with character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5860", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a vowel and utilizes a capital letter", "source": "line that starts with vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5872", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines ending on 123 or having 123 earlier in the line", "source": "line that ends with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5873", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines which begin with abc and also includes at least one lowercase letter", "source": "line that starts with `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5885", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with 123 and includes abc", "source": "line that ends with `` 123 '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5906", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a letter and have a capital letter", "source": "line that ends with letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5915", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with abc and that includes a character", "source": "line that ends with `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5933", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a capital letter and that includes a lowercase letter", "source": "line that ends with capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5936", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "word that ends with characters and lowercase letters", "source": "line that ends with character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5947", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with 123 and uses characters", "source": "line that starts with `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5987", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with   123  and contains a charcter", "source": "line that starts with `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5990", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending on a capital that has a vowel contained in it", "source": "line that ends with capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6012", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that contains  abc ", "source": "line that ends with capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_6029", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a lowercase letter and that includes 123", "source": "line that starts with lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_6053", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that contains letter", "source": "line that ends with lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6055", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a lowercase letter and includes a character", "source": "line that starts with lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6056", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that contains character", "source": "line that starts with letter and that contains character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6075", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a capital and having abc somewhere in it", "source": "line that ends with capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_6103", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with 123 and contains a vowel", "source": "line that starts with `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6106", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with abc and uses vowels", "source": "line that starts with `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6151", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that contains letter", "source": "line that starts with `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6169", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with any characters and has letters in it", "source": "line that starts with character and that contains letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6170", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a vowel and have a lowercase letter", "source": "line that ends with vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6172", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that contains lowercase letter", "source": "line that ends with letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6175", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a vowel and have a vowel", "source": "line that starts with vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6183", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line begins with abc and has 123 in it", "source": "line that starts with `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_6199", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line commences wuppercase letter and has 123", "source": "line that starts with capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_6208", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and include abc", "source": "line that starts with lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_6245", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line uses capital letter with vowel in it", "source": "line that ends with capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6256", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that contains lowercase letter", "source": "line that ends with character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6265", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has 123 at the end and includes a small letter", "source": "line that ends with `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6269", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with a letter and contains a character", "source": "line that ends with letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6277", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a letter and contains capital letters", "source": "line that starts with letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_6279", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with and including a character", "source": "line that starts with character and that contains character", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6282", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line must begin with characters abc", "source": "line that starts with `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_6284", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains and ends in   123 ", "source": "line that ends with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_6303", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that contains character", "source": "line that ends with `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6306", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a vowel and has 123 in the beginning", "source": "line that starts with `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6310", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with abc and contains at least one letter", "source": "line that starts with `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6330", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a vowel and utilizes a character", "source": "line that starts with vowel and that contains character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6335", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a lowercase letter ended by any letter", "source": "line that ends with letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6347", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a character and containing a lowercase letter", "source": "line that ends with character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6354", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines including a capital letter that begin with abc", "source": "line that starts with `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_6355", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with a letter as their first character which also contain 123", "source": "line that starts with letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_6359", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain a capital letter and end on the word abc", "source": "line that ends with `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_6377", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter and have 123 in them", "source": "line that starts with capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_6382", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "when does a vowel start a line that has another vowel in it", "source": "line that starts with vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with and contain a letter", "source": "line that starts with letter and that contains letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_25", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with letters and contain capital letters", "source": "line that ends with letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_28", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines begins with a charcter containing   123 ", "source": "line that starts with character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_42", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with abc and includes abc", "source": "line that starts with `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_44", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a vowel and using a vowel", "source": "line that starts with vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_60", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that contains lowercase letter", "source": "line that ends with character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_93", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a character and that contain a lowercase letter", "source": "line that starts with character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_122", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter and also has 123 within", "source": "line that starts with capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_123", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a character and uses 123", "source": "line that ends with character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_127", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that contains capital letter", "source": "line that starts with vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_137", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines containing a characters and ending with letter not a number", "source": "line that ends with letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_138", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with lowercase vowels", "source": "line that starts with vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_153", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a character and includes a letter", "source": "line that starts with character and that contains letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_154", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with a vowel and contain another character", "source": "line that starts with vowel and that contains character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_175", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with a letter and uses abc", "source": "line that starts with letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_198", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what  line that ends with letter and that contains  123 ", "source": "line that ends with letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_224", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that contains  123 ", "source": "line that starts with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_227", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that contains letter", "source": "line that ends with capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_239", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line contains 123 and ends with a lowercase letter", "source": "line that ends with lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_263", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a lowercase letter appear within it and ends with abc", "source": "line that ends with `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_266", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line where 123 appears and begins with a letter", "source": "line that starts with letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_282", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line 123 at beginning and it is capital", "source": "line that starts with `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_292", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing any character with a lowercase letter at its end", "source": "line that ends with lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_303", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that contains  abc ", "source": "line that starts with character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_319", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter in the beginning and also includes a small letter", "source": "line that starts with lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_332", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that contains vowel", "source": "line that ends with lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_336", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a character and comes to an end with a character", "source": "line that ends with character and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_349", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a lowercase letter and uses capital letters", "source": "line that ends with lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_367", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that contains  123 ", "source": "line that ends with letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_369", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a vowel and contains  123 ", "source": "line that starts with vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_380", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that contains  abc ", "source": "line that starts with `` 123 '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_413", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that contains  123 ", "source": "line that ends with character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_418", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins in a character and also has a letter in it", "source": "line that starts with character and that contains letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_426", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that contains character", "source": "line that starts with vowel and that contains character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_427", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with a lowercase letter and uses vowels", "source": "line that ends with lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_439", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that contains letter", "source": "line that ends with character and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_465", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a small letter and comes to an end with a letter", "source": "line that ends with letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_474", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that  begins with a letter and includes a character", "source": "line that starts with letter and that contains character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_481", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with vowels and contain characters", "source": "line that ends with vowel and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_495", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines starts with a letter and ends with lowercase letters", "source": "line that starts with letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_497", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that contains letter", "source": "line that ends with letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_562", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that contains character", "source": "line that ends with capital letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_574", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a capital letter and has a letter", "source": "line that starts with capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_580", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with a lowercase letter and contains  123 ", "source": "line that ends with lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_584", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a vowel in it and the short word abc at the beginning", "source": "line that starts with `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_589", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with abc that also contains 123", "source": "line that ends with `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_601", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line utilizing a capital letter and ending with any lowercase letter", "source": "line that ends with lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_621", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a lowercase letter and contains at least one capital letter", "source": "line that starts with lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_636", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter and include one", "source": "line that starts with capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_640", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter at the end and also includes abc", "source": "line that ends with lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_649", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with and using a capital letter", "source": "line that starts with capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_651", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that contains capital letter", "source": "line that starts with `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_658", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a letter and that contains a vowel", "source": "line that ends with letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_682", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with a capital letter and also has abc in it", "source": "line that starts with capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_689", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using 123 and ending with a lowercase letter", "source": "line that ends with lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_731", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and use 123", "source": "line that starts with lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_734", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line starts with abc and has atleast one capital letter", "source": "line that starts with `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_772", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with 123 and uses lowercase letters", "source": "line that starts with `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_783", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that contains  abc ", "source": "line that ends with letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_792", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a letter in the beginning and includes an uppercase letter", "source": "line that starts with letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_805", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a letter and ends with a vowel", "source": "line that ends with vowel and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_817", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with a capital letter and contains  abc ", "source": "line that ends with capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_821", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends with a capital letter and also has a character in it", "source": "line that ends with capital letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_829", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a letter but also has abc within", "source": "line that starts with letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_833", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that contains  abc ", "source": "line that starts with vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_842", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a capital letter and uses lowercase letters", "source": "line that starts with capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_847", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with both 123 and abc for an ending", "source": "line that ends with `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_862", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that contains vowel", "source": "line that starts with letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_863", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a lowercase letter and ends with 123", "source": "line that starts with `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_870", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with a capital letter and also has a vowel in it", "source": "line that starts with capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_885", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines use lowercase letters but also start with a character", "source": "line that starts with character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_921", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a vowel and including at least one character", "source": "line that starts with vowel and that contains character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_934", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a letter and contains a capital letter", "source": "line that starts with letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_947", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain characters with the last being a capital letter", "source": "line that ends with capital letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_978", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that contains capital letter", "source": "line that ends with vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_987", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that both ends in a character and also has a capital letter in it", "source": "line that ends with character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_991", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with 123 which also includes a vowel", "source": "line that starts with `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1001", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that contains  abc ", "source": "line that ends with `` 123 '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1012", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines where a letter appears and end with a vowel", "source": "line that ends with vowel and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1024", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with abc and contain a lowercase letter", "source": "line that starts with `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1038", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a letter and has a capital letter", "source": "line that ends with letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1056", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has 123 in the beginning and includes a small letter", "source": "line that starts with `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1067", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing any letter than starts with a capital letter", "source": "line that starts with capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1095", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that contains letter", "source": "line that ends with `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1101", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line formed in capital letter with capital head", "source": "line that starts with capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1114", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a letter and uses 123", "source": "line that starts with letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1125", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with a character and uses vowels", "source": "line that ends with character and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1132", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that contains letter", "source": "line that ends with letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1137", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a capital letter and hast 123", "source": "line that starts with capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1158", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a small letter and has abc at its end", "source": "line that ends with `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1167", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that contains capital letter", "source": "line that starts with `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1171", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starts with characters 123", "source": "line that starts with character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1174", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with abc and also has a character in it", "source": "line that starts with `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1176", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a vowel and that contains a character", "source": "line that ends with vowel and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1195", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc and contains at least one additional letter", "source": "line that starts with `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1202", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the starting have to be small abc along with letter", "source": "line that starts with `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1203", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with a capital letter and includes 123", "source": "line that ends with capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1227", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that contains capital letter", "source": "line that ends with `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1235", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a lowercase letter and containing a vowel", "source": "line that starts with lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1251", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that contains vowel", "source": "line that ends with capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1257", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins in a vowel and also has a vowel in it", "source": "line that starts with vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1279", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that contains lowercase letter", "source": "line that ends with vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1289", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with 123 and that includes 123", "source": "line that ends with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1304", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with any character at the end and a capital letter somewhere in the sequence", "source": "line that ends with character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1316", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with an uppercase letter that has characters in it", "source": "line that starts with capital letter and that contains character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1325", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with a capital letter and utilizes any character", "source": "line that ends with capital letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1375", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a lowercase letter and utilizing the sequence 123", "source": "line that starts with lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1377", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a capital letter and uses a lowercase letter", "source": "line that starts with capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1411", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a lowercase letter and begin with a letter", "source": "line that starts with character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1414", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a capital letter that also contains a vowel", "source": "line that ends with capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1422", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has characters and the number 123 at the end", "source": "line that ends with `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1433", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a character at the end and includes a vowel", "source": "line that ends with character and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1441", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and had a vowel in the beginning", "source": "line that starts with vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1445", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines stopping abc and having a character in them", "source": "line that ends with `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1449", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a capital and containing a character", "source": "line that ends with capital letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1457", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with the number 123 and containing the word abc", "source": "line that ends with `` 123 '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1469", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that contains capital letter", "source": "line that ends with character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1477", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with 123 and that includes a lowercase letter", "source": "line that starts with `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1481", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a small letter and has a character in the beginning", "source": "line that starts with character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1495", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a capital letter and using abc", "source": "line that starts with capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1497", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a lowercase letter and has a vowel in it", "source": "line that starts with lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1527", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with abc and containing a letter", "source": "line that ends with `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1532", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including a letter and ending with any character", "source": "line that ends with character and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1533", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter in the beginning and includes an uppercase letter", "source": "line that starts with lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1540", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a capital letter and contains any letter", "source": "line that starts with capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1551", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and have 123", "source": "line that starts with lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1561", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that contains vowel", "source": "line that ends with `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1569", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a letter and containing a letter", "source": "line that ends with letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1574", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with  abc  or a digit", "source": "line that starts with the word `` abc '' or digit", "target": "(call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1196", "anonymized_target": "(call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that begins with the word abc or a digit", "source": "line that starts with the word `` abc '' or digit", "target": "(call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_4348", "anonymized_target": "(call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that start with either the word abc or a digit", "source": "line that starts with the word `` abc '' or digit", "target": "(call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_409", "anonymized_target": "(call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "any line with either the word abc or a digit in it", "source": "line that contains the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3361", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  or digit", "source": "line that contains the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3813", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that uses abc or digits", "source": "line that contains the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5423", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines with abc or other digits", "source": "line that contains the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5786", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line includes digit or abc word", "source": "line that contains the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_944", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that starts with a vowel before a digit", "source": "line that starts with vowel before digit", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_17", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with a number followed by abc", "source": "line that starts with `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_293", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with vowel after digit", "source": "line that starts with vowel after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_322", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line beginning with a digit followed by any character", "source": "line that starts with character after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_368", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a character is is after a digit", "source": "line that starts with character after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_394", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line beginning with any character followed by a digit", "source": "line that starts with character before digit", "target": "(call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_420", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with a vowel then contains a digit", "source": "line that starts with vowel before digit", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_429", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a digit followed by 123", "source": "line that starts with `` 123 '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_504", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with character after digit", "source": "line that starts with character after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_510", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that initiate with a character directly after a digit", "source": "line that starts with character after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_528", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that begins with a digit then a lowercase letter", "source": "line that starts with lowercase letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_646", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that begins with a character followed by a number", "source": "line that starts with character before digit", "target": "(call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_651", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that begins with a digit followed by a character", "source": "line that starts with character after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_659", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begin with a digit followed by a capital letter", "source": "line that starts with capital letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_756", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with 123 after a number", "source": "line that starts with `` 123 '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_804", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "which line starts with a capital letter before digit", "source": "line that starts with capital letter before digit", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_851", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with a vowel following a digit", "source": "line that starts with vowel after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_1000", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with 123 after a digit", "source": "line that starts with `` 123 '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_1166", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with a digit and then a letter", "source": "line that starts with letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_1377", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with a lowercase letter after a digit", "source": "line that starts with lowercase letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_1553", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line beginning with a lowercase letter followed by a digit", "source": "line that starts with lowercase letter before digit", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_1666", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with the number 123 prior to another digit", "source": "line that starts with `` 123 '' before digit", "target": "(call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_1674", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a digit followed by a letter", "source": "line that starts with letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_1683", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line thet begins with 123 after a digit", "source": "line that starts with `` 123 '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_1712", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line beginning with a digit followed by a capital letter", "source": "line that starts with capital letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_1850", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a letter that is before a digit", "source": "line that starts with letter before digit", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2036", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with  123  before digit", "source": "line that starts with `` 123 '' before digit", "target": "(call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2080", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with vowel before digit", "source": "line that starts with vowel before digit", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2209", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line beginning with a digit preceded by abc", "source": "line that starts with `` abc '' before digit", "target": "(call + (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2221", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with 123 before the digit", "source": "line that starts with `` 123 '' before digit", "target": "(call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2239", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line beginning with a digit followed by 123", "source": "line that starts with `` 123 '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_2412", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has a number after an uppercase letter", "source": "line that starts with capital letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_2425", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that begins with a digit that is followed by a vowel", "source": "line that starts with vowel after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_2467", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with  123  after digit", "source": "line that starts with `` 123 '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_2563", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with vowel before digit", "source": "line that starts with vowel before digit", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2783", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with letter before digit", "source": "line that starts with letter before digit", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2847", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with 123 before any digits", "source": "line that starts with `` 123 '' before digit", "target": "(call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2945", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with  abc  before digit", "source": "line that starts with `` abc '' before digit", "target": "(call + (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2963", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begin with a character followed by a digit", "source": "line that starts with character before digit", "target": "(call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3048", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with letter after digit", "source": "line that starts with letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_3068", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that starts with a lowercase letter after a digit", "source": "line that starts with lowercase letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_3090", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that start with capital letters after certain digits", "source": "line that starts with capital letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_3150", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with letter before digit", "source": "line that starts with letter before digit", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3209", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with abc followed by a digit", "source": "line that starts with `` abc '' before digit", "target": "(call + (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3300", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with lowercase letter before digit", "source": "line that starts with lowercase letter before digit", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3313", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begin with abc followed by a digit", "source": "line that starts with `` abc '' before digit", "target": "(call + (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3408", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with a vowel before any digit", "source": "line that starts with vowel before digit", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3465", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with lowercase letter after digit", "source": "line that starts with lowercase letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_3483", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with character before digit", "source": "line that starts with character before digit", "target": "(call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3539", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a lowercase letter and a digit", "source": "line that starts with lowercase letter before digit", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3598", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that start with letters after digits", "source": "line that starts with letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_3795", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what is a line that begins with a letter that comes before a digit", "source": "line that starts with letter before digit", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4023", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a vowel and then a digit", "source": "line that starts with vowel before digit", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4124", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a lowercase letter after digits", "source": "line that starts with lowercase letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_4311", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a character followed by a digit", "source": "line that starts with character before digit", "target": "(call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4453", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with capital letter after digit", "source": "line that starts with capital letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_4486", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that starts with a capital letter before a digit", "source": "line that starts with capital letter before digit", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4550", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line beginning with a vowel that follows a digit", "source": "line that starts with vowel after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_4556", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begin with a lowercase letter in front of a digit", "source": "line that starts with lowercase letter before digit", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4728", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with  123  after digit", "source": "line that starts with `` 123 '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_4752", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line with a digit following after a lowercase letter of some sort", "source": "line that starts with lowercase letter before digit", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4904", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that had a vowel in the beginning before a number", "source": "line that starts with vowel before digit", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4941", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with capital letter before digit", "source": "line that starts with capital letter before digit", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4973", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "before digit line starts with 123", "source": "line that starts with `` 123 '' before digit", "target": "(call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5153", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a letter and then a digit", "source": "line that starts with letter before digit", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5172", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "which line starts with a letter that follows a number", "source": "line that starts with letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_5198", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a letter followed by a digit", "source": "line that starts with letter before digit", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5262", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with a capital letter after a digit", "source": "line that starts with capital letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_5387", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what line that starts with lowercase letter after digit", "source": "line that starts with lowercase letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_5649", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has abc in the beginning after a number", "source": "line that starts with `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_5948", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with lowercase letter before digit", "source": "line that starts with lowercase letter before digit", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5957", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what is a line that begins with a letter that comes after a digit", "source": "line that starts with letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_6066", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begin with a capital letter before a digit", "source": "line that starts with capital letter before digit", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_6220", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a lowercase letter before digits", "source": "line that starts with lowercase letter before digit", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_6348", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a digit and then a vowel", "source": "line that starts with vowel after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_test_14", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that starts with  123  before a digit", "source": "line that starts with `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_test_35", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that start with characters before digits", "source": "line that starts with character before digit", "target": "(call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_361", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines with a digit followed by a lowercase letter at the beginning", "source": "line that starts with lowercase letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_test_403", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that start with abc before other digits", "source": "line that starts with `` abc '' before digit", "target": "(call + (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_602", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with as alphabet before a number", "source": "line that starts with letter before digit", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_721", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what line begins with a charcter appearing after a digit", "source": "line that starts with character after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_test_762", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a capital letter followed by a digit", "source": "line that starts with capital letter before digit", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_1047", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with letter after digit", "source": "line that starts with letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_test_1062", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "which line starts with 123 followed by some other digit", "source": "line that starts with `` 123 '' before digit", "target": "(call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_1185", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "which line starts with a vowel that comes after a digit", "source": "line that starts with vowel after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_test_1337", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a capital letter before any digits", "source": "line that starts with capital letter before digit", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_1589", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that includes the word abc preceded by the number 123", "source": "line that contains the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_640", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line where there number 123 came after the word abc", "source": "line that contains the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1352", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  before the number  123 ", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1817", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that uses abc before 123", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3470", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line containing the word abc followed by the number 123", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3606", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has the word abc before 123", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3633", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has a word abc after 123", "source": "line that contains the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_199", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that include the number 123 and ends with abc", "source": "line that contains the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_256", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "what lines contain abc before the number 123", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_509", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  after the number  123 ", "source": "line that contains the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_739", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line that includes the word abc followed by the number 123", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_1063", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "words with abc or 123", "source": "word that contains `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_254", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what  number that contains character or the number  123 ", "source": "number that contains character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_424", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel or the number  123 ", "source": "word that contains vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_513", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc or the number 123", "source": "word that contains `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_759", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that have 123", "source": "number that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1125", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter or the number  123 ", "source": "word that contains lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1396", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "list all word that contains vowels or   123 ", "source": "word that contains vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1529", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses 123", "source": "number that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1613", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that utilizes the letters abc or the number", "source": "word that contains `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1647", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a capital letter or 123", "source": "word that contains capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1802", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel or the number  123 ", "source": "word that contains vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1816", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter or the number  123 ", "source": "word that contains letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2211", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses capital letters or 123", "source": "word that contains capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2254", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a character or the number 123", "source": "word that contains character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2335", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with letters or the number 123", "source": "word that contains letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2376", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "mention a number containing either 123 or the number 123", "source": "number that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2380", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  123  or the number  123 ", "source": "number that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2773", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word containing either a lowercase letter or the number 123", "source": "word that contains lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2928", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number using 123", "source": "number that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3057", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains a character or the number 123", "source": "word that contains character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3076", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word has 123 or abc in it", "source": "word that contains `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3089", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that contains a character or  123 ", "source": "number that contains character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3105", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with 123 or a vowel in it", "source": "word that contains vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3236", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that contains any vowels or the numbers 123", "source": "word that contains vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3414", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that contains 123", "source": "number that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3711", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains any character or the number 123", "source": "word that contains character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4440", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character or the number  123 ", "source": "number that contains character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4601", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word containing lowercase letter or 123", "source": "word that contains lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4602", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word has letter or 123 numerals", "source": "word that contains letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4743", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include either a letter or the number sequence 123", "source": "word that contains letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4903", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words utilizing a capital letter or including 123", "source": "word that contains capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5187", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words having lowercase and containing 123", "source": "word that contains lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5233", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a capital letter or the number 123", "source": "word that contains capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5604", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains either a character or the number 123", "source": "word that contains character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5625", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes lowercase letter or the number 123", "source": "word that contains lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5868", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter or 123 in it", "source": "word that contains letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5932", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  or the number  123 ", "source": "word that contains `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5943", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that uses vowels or the sequence 123", "source": "word that contains vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6145", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number includes within it the numbers 1 2 or 3 or the symbols  or ", "source": "number that contains character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6315", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that includes a character or the number 123", "source": "number that contains character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_316", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  or the number  123 ", "source": "word that contains `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_318", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has the digit 123 or  a letter in it", "source": "word that contains letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_475", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter or the number  123 ", "source": "word that contains capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1025", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses characters or the number 123", "source": "number that contains character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1178", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains either a character or the number 123", "source": "word that contains character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1199", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that contain either abc or the number 123", "source": "word that contains `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1256", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that contain a lowercase letter or 123", "source": "word that contains lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1367", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that includes 123 or a character", "source": "number that contains character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1470", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that contain either a capital letter or the number 123", "source": "word that contains capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1570", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter or the number  123 ", "source": "word that contains capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1576", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with any character followed by any digit", "source": "number that ends with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_585", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character after digit", "source": "number that ends with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .)))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_896", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number ends with 123 before a digit", "source": "number that ends with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2471", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character before digit", "source": "number that ends with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2803", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  after digit", "source": "number that ends with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123)))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2916", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that ends with a character after a number", "source": "number that ends with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .)))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2926", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that ends with a character after a digit", "source": "number that ends with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .)))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2998", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  before digit", "source": "number that ends with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3531", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with  123  before a digit", "source": "number that ends with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3736", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with a digit followed by 123", "source": "number that ends with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123)))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3901", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that terminates with a digit followed by a character", "source": "number that ends with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .)))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4022", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that end with 123 before a digit", "source": "number that ends with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4478", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character after digit", "source": "number that ends with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .)))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4500", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with 123 followed by a digit", "source": "number that ends with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4639", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that finishes with a character after digit", "source": "number that ends with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .)))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5121", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that ends with 123 coming after a digit", "source": "number that ends with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123)))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6078", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with a digit preceded by a character", "source": "number that ends with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6179", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after a 123 before any digits", "source": "number that ends with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6239", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that finishes with 123", "source": "number that ends with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123)))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_50", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with a digit followed by a character", "source": "number that ends with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .)))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_217", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after a character that is before a digit", "source": "number that ends with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_654", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after 123 is behind any digits", "source": "number that ends with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123)))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_700", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that terminate with characters before a digit", "source": "number that ends with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_711", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has a character at  the end before a digit", "source": "number that ends with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_787", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line ending with abc", "source": "line that ends with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_41", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains vowel", "source": "line that ends with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_147", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ends with abc", "source": "line that ends with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_175", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "state a line containing a vowel and ending with the word abc", "source": "line that ends with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_807", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes123 and has the word abc  at the end", "source": "line that ends with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_811", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with abc and also uses characters", "source": "line that ends with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_936", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains capital letter", "source": "line that ends with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1221", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with the word abc and includes a character", "source": "line that ends with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1688", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a vowel and stops with abc", "source": "line that ends with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2062", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains  abc ", "source": "line that ends with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3095", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with abc and containing a capital letter", "source": "line that ends with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3170", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line that ends with the word  abc  and that contains character", "source": "line that ends with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3192", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains  123 ", "source": "line that ends with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3599", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with the word abc and has a capital letter", "source": "line that ends with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3824", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains lowercase letter", "source": "line that ends with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3857", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that conclude with the word abc and include lowercase letters", "source": "line that ends with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4044", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing and ending with the word abc", "source": "line that ends with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4143", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a capital letter and ending with abc", "source": "line that ends with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4148", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with the smaller word abc and incorporating the number 123", "source": "line that ends with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4239", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with the word abc and that contains a letter", "source": "line that ends with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4878", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains  abc ", "source": "line that ends with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4996", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with abc and utilizes a character", "source": "line that ends with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5220", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains capital letter", "source": "line that ends with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5425", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that finish with a smaller word abc and also have a character in them", "source": "line that ends with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5606", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends in abc", "source": "line that ends with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5795", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains vowel", "source": "line that ends with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5876", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a character and ends with the word abc", "source": "line that ends with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6109", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a letter within it and terminates with the word abc", "source": "line that ends with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_67", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain a capital letter and end with abc", "source": "line that ends with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_136", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line both ends in the word abc and also contains a vowel", "source": "line that ends with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_563", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains lowercase letter", "source": "line that ends with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_811", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with abc and containing a lowercase letter", "source": "line that ends with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1059", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line which stops with the word abc and has a lowercase letter in it", "source": "line that ends with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1428", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has 123 and puts abc at the end", "source": "line that ends with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1453", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "all lines containing letters ending with   abc ", "source": "line that ends with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1514", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains character", "source": "line that ends with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1558", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with 123 and stops with a lowercase letter", "source": "line that starts with `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_13", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a letter and is completed by a vowel", "source": "line that ends with vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_21", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a vowel and finishes with a vowel", "source": "line that starts with vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_32", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "mention the line ending with a letter", "source": "line that ends with letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_45", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a vowel and ends with a character", "source": "line that starts with vowel and that ends with character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_61", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that starts with capital letter", "source": "line that starts with capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_62", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a letter and ending with 123", "source": "line that ends with `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_72", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begun with a capital letter but ends with any character", "source": "line that starts with capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_73", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with the number 123 but ends with any character", "source": "line that starts with `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_74", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with abc and begins with a letter", "source": "line that ends with `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_77", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line that ends with letter and that ends with character", "source": "line that ends with letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_86", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that starts with letter", "source": "line that ends with `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_89", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a vowel and finish with a vowel", "source": "line that starts with vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_95", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starting with a character that is a capital letter", "source": "line that starts with capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_111", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with  abc  and ends with a character", "source": "line that starts with `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_130", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that ends with capital letter", "source": "line that starts with vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_146", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with a capital letter", "source": "line that ends with capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_151", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line starts with a letter and ends with a capital letter", "source": "line that ends with capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_161", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that ends with capital letter", "source": "line that starts with letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_170", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with a lowercase vowel", "source": "line that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_176", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning and ending with 123", "source": "line that ends with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_192", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a character and a letter", "source": "line that ends with character and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_194", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a vowel and lowercase letter", "source": "line that starts with vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_206", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with 123 at the end and abc at the beginning", "source": "line that ends with `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_208", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a letter and stops after a capital letter", "source": "line that starts with letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_209", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that starts with  123 ", "source": "line that ends with character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_210", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter in the beginning and end", "source": "line that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_216", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that ends with lowercase letter", "source": "line that starts with letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_231", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a capital letter and a vowel", "source": "line that ends with capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_241", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends in a capital letter and also ends in a character", "source": "line that ends with capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_242", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that ends with vowel", "source": "line that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_243", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that starts with capital letter", "source": "line that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_248", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that ends with lowercase letter", "source": "line that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_251", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with any character and ending with any lowercase letter", "source": "line that starts with character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_257", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends in a character and also begins with a lowercase letter", "source": "line that ends with character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_263", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that starts with vowel", "source": "line that ends with `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_267", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that ends with letter", "source": "line that ends with `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_268", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter at the beginning and comes to an end with a", "source": "line that starts with lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_269", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins and comes to an end with a vowel", "source": "line that starts with vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_271", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that terminate with a smaller word abc and start with a character", "source": "line that ends with `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_288", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with the number 123 but starts with a capital letter", "source": "line that ends with `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_289", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that ends with capital letter", "source": "line that starts with character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_298", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that finishes with a vowel", "source": "line that ends with letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_301", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line starts with abc and ends with lowercase letter", "source": "line that starts with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_303", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end in abc but starts with a letter", "source": "line that ends with `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_309", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that sharts with a lowercase letter", "source": "line that starts with letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_314", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a vowel and a lowercase letter", "source": "line that starts with vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_331", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a character and that begins with lowercase letter", "source": "line that starts with character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_336", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a letter and that begins with 123", "source": "line that ends with letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_342", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a character and begins with a lowercase letter", "source": "line that ends with character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_344", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a letter on the beginning and comes to an end with a vowel", "source": "line that starts with letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_365", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that starts with  123 ", "source": "line that starts with character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_381", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that use a capital letter at the beginning and ends with a letter", "source": "line that starts with capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_400", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line completed by a lowercase letter", "source": "line that ends with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_402", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with  abc  and ends with a letter", "source": "line that starts with `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_412", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that ends with letter", "source": "line that starts with letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_422", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that starts with character", "source": "line that starts with letter and that starts with character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_439", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines start and end with 123", "source": "line that starts with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_440", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that finish with a character", "source": "line that ends with character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_445", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a lowercase letter and ending with abc", "source": "line that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_448", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a letter at the beginning and an uppercase letter at the end l", "source": "line that starts with letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_454", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with lowercase letter and ending with lowercase letter", "source": "line that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_468", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with a lowercase letter and also ends with a character", "source": "line that ends with lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_472", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with 123", "source": "line that ends with `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_477", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with any lowercase letter and ending with any capital letter", "source": "line that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_498", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that starts with vowel", "source": "line that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_502", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the characters abc", "source": "line that ends with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_508", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a vowel and ending with a character", "source": "line that ends with character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_512", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with abc and ends with any character", "source": "line that starts with `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_531", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a letter and start with a character", "source": "line that starts with character and that ends with letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_538", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending in abc", "source": "line that starts with character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_547", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with abc at the beginning and a capital letter at the end", "source": "line that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_550", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has an uppercase letter in the beginning", "source": "line that starts with capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_562", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a vowel and that concludes with abc", "source": "line that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_568", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins abc and finishes 123", "source": "line that ends with `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_586", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a vowel and beginning with abc", "source": "line that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_600", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a letter and ending with a character", "source": "line that starts with letter and that ends with character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_603", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that starts with  123 ", "source": "line that ends with letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_604", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that starts with capital letter", "source": "line that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_614", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with 123 and also ends in a vowel", "source": "line that starts with `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_616", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that ends with letter", "source": "line that ends with lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_625", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a capital letter and ends with   123 ", "source": "line that starts with capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_639", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with the same vowel it begins with", "source": "line that starts with vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_648", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a lowercase vowel", "source": "line that starts with lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_652", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends and starts with any vowel", "source": "line that ends with vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_657", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a letter and that begins with abc", "source": "line that starts with letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_662", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that starts with  123 ", "source": "line that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_683", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a character and ending with a lowercase letter", "source": "line that ends with lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_689", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what  line that starts with character and that ends with letter", "source": "line that starts with character and that ends with letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_700", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a vowel and ending with 123", "source": "line that starts with vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_708", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with abc and lowercase letters", "source": "line that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_721", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that starts with lowercase letter", "source": "line that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_724", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that ends with  123 ", "source": "line that starts with lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_729", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins in a character and also ends with a capital letter", "source": "line that starts with character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_730", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that starts with letter", "source": "line that starts with character and that starts with letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_735", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a character and capital letter", "source": "line that ends with character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_760", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "any line that starts with a vowel", "source": "line that starts with vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_784", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with a vowel", "source": "line that ends with character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_788", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with any letter and ending with any character", "source": "line that starts with letter and that ends with character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_797", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with character and that begins with abc", "source": "line that starts with character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_803", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that ends with character", "source": "line that starts with `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_809", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a character and stops after 123", "source": "line that starts with character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_816", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with a capital letter and begins with a letter", "source": "line that ends with capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_818", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins and ends with a capital letter", "source": "line that ends with capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_821", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that initiate with a chracter and also finish with one", "source": "line that starts with character and that ends with character", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_825", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel at the end and has abc in the beginning", "source": "line that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_828", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with abc and also that begins with a character", "source": "line that starts with `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_831", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a letter but begins with a vowel", "source": "line that starts with vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_832", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that ends with lowercase letter", "source": "line that ends with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_839", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with a capital letter and also ends in a character", "source": "line that starts with capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_849", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that starts with lowercase letter", "source": "line that ends with vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_863", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with capital letter", "source": "line that starts with capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_877", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that starts with character", "source": "line that ends with `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_881", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a character and 123", "source": "line that ends with character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_885", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after 123 and a character", "source": "line that ends with `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_898", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that starts with vowel", "source": "line that ends with capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_917", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with 123 and ending with a letter", "source": "line that starts with `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_921", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a vowel and letter", "source": "line that starts with vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_933", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a letter but ends with a vowel", "source": "line that ends with vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_945", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that starts with lowercase letter", "source": "line that ends with `` 123 '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_954", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a character and a vowel", "source": "line that starts with character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_962", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a letter", "source": "line that starts with letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_991", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with lowercase letters", "source": "line that ends with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_992", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with 123 and end with a lowercase letter", "source": "line that ends with lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_997", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc and ending with a character", "source": "line that ends with character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_998", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that ends with lowercase letter", "source": "line that ends with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1011", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with capital letters and characters", "source": "line that starts with capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1015", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with any character and that begins with a capital letter", "source": "line that ends with character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1017", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with capital letter and that starts with any vowell", "source": "line that ends with capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1022", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a letter and that begins with a vowel", "source": "line that ends with letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1023", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with a capital letter and end with a lowercase letter", "source": "line that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1041", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a capital letter but ends with a special character", "source": "line that ends with character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1045", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and also begin with abc", "source": "line that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1054", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that ends with  abc ", "source": "line that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1086", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with capital letters and vowels", "source": "line that ends with capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_1090", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter but ends with the chain 123", "source": "line that starts with capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_1093", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins wabc", "source": "line that starts with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1099", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with abc and a lowercase letter", "source": "line that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1107", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that stars with only small letters", "source": "line that starts with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1109", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that starts with  123 ", "source": "line that ends with vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1120", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that starts with  abc ", "source": "line that ends with letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1121", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a letter and ending with 123", "source": "line that starts with letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_1127", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after abc", "source": "line that ends with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1142", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with 123 and ending with a capital letter", "source": "line that starts with `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_1143", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with 123", "source": "line that ends with character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_1144", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "sentence that stops with abc then begins with a lowercase letter", "source": "line that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1155", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with   abc  and a character", "source": "line that ends with `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_1168", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ended with any vowel", "source": "line that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1191", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that starts with capital letter", "source": "line that ends with vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1200", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with any letter but ends in a vowel", "source": "line that ends with vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1203", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that initiate with a number sequence 123", "source": "line that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1207", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with abc and a letter", "source": "line that starts with `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1219", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter in the beginning and a character at the end of it", "source": "line that starts with lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_1239", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that starts with capital letter", "source": "line that starts with vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1242", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has to begin with a character that is also a letter", "source": "line that starts with letter and that starts with character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1244", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a vowel and also starts with a letter", "source": "line that starts with vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1249", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with 123 and stops with a capital letter", "source": "line that starts with `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_1252", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a character but ends with a letter", "source": "line that starts with character and that ends with letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1259", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begin with  abc  and ends with letter", "source": "line that ends with letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1260", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a lowercase letter and ends in abc", "source": "line that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1262", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that finish in a capital letter and begin with a character", "source": "line that ends with capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1270", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that ends with capital letter", "source": "line that starts with vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_1281", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines beginning with a lowercase letter", "source": "line that starts with lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1288", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what begins with a capital letter", "source": "line that starts with letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1293", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a capital letter vowel", "source": "line that starts with capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1294", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with 123 and begins with 123", "source": "line that ends with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1299", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with a lowercase letter and starts with a vowel", "source": "line that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1306", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts 123 then ends abc", "source": "line that starts with `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1312", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that ends with  123 ", "source": "line that starts with letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_1314", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a vowel and end with a letter", "source": "line that starts with vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1319", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with vowels and end with letters", "source": "line that starts with vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1324", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "any line that starts with 123 and ends with lowercase letter", "source": "line that starts with `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1338", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with both a character and letter", "source": "line that starts with character and that starts with letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1375", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with a litter and it starts with a capital letter", "source": "line that starts with letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1376", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with abc and ends with any letter", "source": "line that ends with `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1390", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with both a vowel and a letter", "source": "line that ends with vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1392", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with any character but ended by abc", "source": "line that ends with `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1414", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a letter and ending with a lowercase letter", "source": "line that starts with letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1425", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that starts with character", "source": "line that starts with vowel and that starts with character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1432", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with 123 and starts with a character", "source": "line that starts with `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1447", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with the chain abc and a lowercase letter", "source": "line that ends with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1453", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that starts with  abc ", "source": "line that starts with letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1455", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins and stops with a letter", "source": "line that starts with letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1459", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with a capitalized vowel", "source": "line that ends with capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_1462", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line commences wletter and concludes wabc", "source": "line that ends with `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1466", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "aline ending with a vowel and with a capital letter", "source": "line that ends with vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_1471", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with a vowel and starts with abc", "source": "line that starts with vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1478", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has123 as the beginning", "source": "line that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1491", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that ends with  abc ", "source": "line that ends with letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1515", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a capital letter and that starts with a capital letter", "source": "line that starts with capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1521", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with 123 and ending with a lowercase letter", "source": "line that ends with lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1522", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that ends with capital letter", "source": "line that starts with capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_1524", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with any letter and ends with a capital letter", "source": "line that ends with capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1527", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter", "source": "line that starts with capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1572", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what  line that starts with letter and that starts with vowel", "source": "line that starts with letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1603", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a capital letter and a character", "source": "line that ends with capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_1606", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that finish with the letter sequence abc", "source": "line that ends with letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1608", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with 123 and ending with a letter", "source": "line that ends with letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1617", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with a vowel and that end with a lowercase letter", "source": "line that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1620", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line commences w123 also concludes wvowel", "source": "line that starts with `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_1633", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a vowel and begins with a character", "source": "line that ends with vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1651", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with 123 as well as a character", "source": "line that starts with `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1668", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines ending with a vowel that begin 123 in sequence", "source": "line that starts with `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_1669", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a vowel and ends with   abc ", "source": "line that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1686", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a character and also end with a lowercase letter", "source": "line that ends with character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1692", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a capitalized letter", "source": "line that starts with capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1711", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with a lowercase letter and the word abc", "source": "line that ends with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1714", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins and ends with any letter", "source": "line that ends with letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1716", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with the characters abc", "source": "line that starts with `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1721", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that stops abc and starts lowercase", "source": "line that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1725", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a character", "source": "line that starts with character and that starts with character", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1738", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a vowel", "source": "line that starts with vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1744", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and ends wirh 123", "source": "line that ends with `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1755", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "begin the line with a capital letter and end it with any letter", "source": "line that starts with capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1770", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a vowel and ends with 123", "source": "line that ends with `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1789", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins witha  capital letter and ends with   123 ", "source": "line that ends with `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1809", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that is ended with 123 and begins with any character", "source": "line that ends with `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1822", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a character and that begins with a character", "source": "line that starts with character and that starts with character", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1826", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with lowercase letter and a letter", "source": "line that ends with lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1843", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a letter which is in capitals", "source": "line that ends with letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_1857", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter and end with a letter", "source": "line that ends with letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1859", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that stops with a capitalized letter and a character together", "source": "line that ends with character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_1862", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with vowels and start with the letters abc", "source": "line that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1885", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with a lowercase letter but ends with the number 123", "source": "line that starts with lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_1890", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that ends with capital letter", "source": "line that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_1893", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a lowercase letter and begin with abc", "source": "line that ends with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1903", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with any vowel and stops with a capital letter", "source": "line that starts with vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_1905", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that starts with capital letter", "source": "line that ends with capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1930", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a character in the beginning and 123 at the end", "source": "line that starts with character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_1960", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that ends with  123 ", "source": "line that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_1964", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a character as well as a letter", "source": "line that ends with letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_1968", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with the number 123 but starts with a lowercase letter", "source": "line that ends with `` 123 '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1977", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that ends with  abc ", "source": "line that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1993", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a capital letter and also a vowel", "source": "line that starts with capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1997", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a vowel and ends with lowercase letters", "source": "line that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2003", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with any letter and then abc", "source": "line that starts with letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2008", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a vowel and a capital letter", "source": "line that starts with vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2010", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a capital letter and ending with a lowercase letter", "source": "line that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2013", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter  and a vowelat the beginning", "source": "line that starts with lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2015", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins with lowercase letter and ends with capital letter", "source": "line that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2020", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a capital letter and ends with a vowel", "source": "line that starts with capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2032", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with the number sequence 123 and finishes with the letter sequence abc", "source": "line that starts with `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2042", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that starts with  123 ", "source": "line that ends with letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2067", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with 123 and utilizes a capital letter", "source": "line that ends with capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2074", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc and ending with any vowel", "source": "line that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2083", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that finish with a lowercase letter and initiate with a letter", "source": "line that ends with lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2099", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts and ends with the word abc", "source": "line that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2107", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with a lowercase vowel", "source": "line that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2110", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts a vowel and finishes with a letter", "source": "line that starts with vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2120", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a capital letter that is also a vowel", "source": "line that starts with capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2123", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a capitalized vowel", "source": "line that starts with capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2136", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that starts with letter", "source": "line that starts with vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2138", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a vowel and ending with a capital letter", "source": "line that starts with vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2142", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter and have abc for an ending", "source": "line that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2143", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that is finished with a letter and that is completed with a letter", "source": "line that ends with letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2152", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with a letter and begins with a vowel", "source": "line that ends with letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2154", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with any vowel and is ended by 123", "source": "line that ends with `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2155", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a captial letter and ends with a letter", "source": "line that starts with capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2158", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a character and also starts with abc", "source": "line that starts with character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2171", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stop with a vowel or lines that end with a character", "source": "line that ends with vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2179", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends in a lowercase letter and also ends in the word abc", "source": "line that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2180", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starting off vowel and ending 123", "source": "line that starts with vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2185", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a character and terminates with 123", "source": "line that starts with character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2189", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a character that is a vowel", "source": "line that starts with vowel and that starts with character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2190", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins and ends with a capital letter", "source": "line that starts with capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2200", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends in a letter and also that ends in a vowel", "source": "line that ends with letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2213", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that ends with letter", "source": "line that ends with `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2223", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with a character and starting with a vowel", "source": "line that ends with character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2245", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a character and begin with a vowel", "source": "line that ends with character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2260", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc and ending with a letter", "source": "line that ends with letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2269", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter in the beginning and 123 at the end", "source": "line that starts with lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2273", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a character and that begins with a vowel", "source": "line that starts with character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2281", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with lowercase letter ending with vowel", "source": "line that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2286", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with abc and begins with a vowel", "source": "line that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2287", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line starts with any character but needs to end with a vowel", "source": "line that starts with character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2288", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a letter and stops after abc", "source": "line that starts with letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2304", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that starts with  abc ", "source": "line that starts with vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2318", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that starts with letter", "source": "line that ends with capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2336", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a letter and that begins with a capital letter", "source": "line that ends with letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2343", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that ends with letter", "source": "line that starts with letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2354", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starting with 123 and ending with a vowel", "source": "line that ends with vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2359", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line begins with a lowercase letter and also ends with a character", "source": "line that starts with lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2361", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a letter and conclude with a lowercase letter", "source": "line that starts with letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2366", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a lowercase letter and a character", "source": "line that starts with lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2387", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a lowercase letter", "source": "line that ends with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2398", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has 123 in the beginning and comes to an end with a letter", "source": "line that ends with letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2402", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with a lowercase letter of any kind", "source": "line that starts with letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2416", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends in a vowel and begins with a capital letter", "source": "line that ends with vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2421", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that ends with character", "source": "line that ends with `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2440", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter in its beginning and end", "source": "line that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2447", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with a letter and character", "source": "line that ends with letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2448", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a lowercase letter and finishes with abc", "source": "line that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2453", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a vowel and that concludes with a character", "source": "line that ends with vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2454", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that ends with letter", "source": "line that ends with letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2461", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that ends with letter", "source": "line that starts with vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2468", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line both beginning and ending with any letter", "source": "line that starts with letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2476", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with 123 and also ends in abc", "source": "line that starts with `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2491", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a letter and a vowel", "source": "line that starts with letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2494", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with abc and end with 123", "source": "line that starts with `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2502", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with both a lowercase vowel letter", "source": "line that starts with lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2503", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that starts with letter", "source": "line that starts with `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2509", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with a capital letter and stops with a letter", "source": "line that ends with capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2512", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with both a capital letter and a character", "source": "line that ends with capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2513", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter and abc in the beginning of it", "source": "line that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2518", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starts with a character and ends with a letter", "source": "line that ends with letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2523", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that starts with letter", "source": "line that starts with capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2532", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with abc and that finsihes with a character", "source": "line that starts with `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2550", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with any vowel and has 123 at the end", "source": "line that starts with vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2557", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a vowel and end with 123", "source": "line that starts with vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2561", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin and end with abc", "source": "line that ends with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2591", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with 123 and begins with a letter", "source": "line that ends with `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2599", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after abc and begins with a character", "source": "line that ends with `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2613", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that concludes with a character and with abc", "source": "line that ends with character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2623", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a letter in the beginning and has a small letter at the end", "source": "line that starts with letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2628", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a letter and ending with a capital", "source": "line that starts with letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2641", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that starts with letter", "source": "line that starts with vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2646", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that starts with  123 ", "source": "line that ends with lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2652", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that comes to an end with a vowel written in uppercase", "source": "line that ends with vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2653", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a character and end with a letter", "source": "line that ends with letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2656", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that ends with vowel", "source": "line that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2666", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins in a lowercase letter and that also ends in a vowel", "source": "line that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2671", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that ends with vowel", "source": "line that ends with letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2673", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with 123", "source": "line that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2674", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a character and also begin with abc", "source": "line that starts with character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2684", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a character and has another character at the end", "source": "line that ends with character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2709", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a character and a lowercase letter", "source": "line that starts with character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2710", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with  123  and starts with  abc ", "source": "line that ends with `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2711", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that ends with capital letter", "source": "line that ends with vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2714", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that starts with character", "source": "line that ends with vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2717", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that ends with vowel", "source": "line that ends with vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2725", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after lowercase letters and letters", "source": "line that ends with lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2727", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and end with a lowercase letter", "source": "line that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2738", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines ending with abc and beginning with a capital letter", "source": "line that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2746", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins wvowel and concludes wsmall letter", "source": "line that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2750", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line begins with a letter and also ends in 123", "source": "line that starts with letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2763", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a  character in the beginning and end", "source": "line that starts with character and that ends with character", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2764", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a lowercase letter and abc", "source": "line that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2793", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts and end with a lowercase letter", "source": "line that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2796", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a letter", "source": "line that ends with letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2804", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line ends in a character and also ends in a capital letter", "source": "line that ends with character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2807", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that ends with capital letter", "source": "line that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2814", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that ends with character", "source": "line that ends with vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2833", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with 123 and terminating with 123", "source": "line that starts with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2837", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what  line that ends with capital letter and that starts with  abc ", "source": "line that ends with capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2846", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter and a character in the beginning", "source": "line that starts with lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2857", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending either a capital letter", "source": "line that ends with letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2861", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that starts with letter", "source": "line that starts with lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2864", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line concludes wvowel and uppercase letter", "source": "line that ends with vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2868", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line where finishes with char and that begins with letter", "source": "line that ends with character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2874", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with any character but ends with the word abc", "source": "line that starts with character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2876", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that ends with character", "source": "line that starts with vowel and that ends with character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2882", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and end with a character", "source": "line that starts with lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2883", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends and starts with a character", "source": "line that ends with character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2890", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starts with a character and ends with a vowel", "source": "line that starts with character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2893", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a character and ending with the letters abc", "source": "line that starts with character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2917", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a vowel and begin with 123", "source": "line that ends with vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2930", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line both begins and ends with a lowercase letter", "source": "line that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2950", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a capital letter and ends in a vowel", "source": "line that ends with vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2961", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start and end with different characters", "source": "line that ends with capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2972", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line terminating with a character", "source": "line that ends with character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2977", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a small letter and had a letter at the end", "source": "line that ends with letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2979", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that ends with vowel", "source": "line that starts with `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2987", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with the lowercase letter sequence abc", "source": "line that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3016", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that ends with capital letter", "source": "line that ends with character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3029", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with the letter sequence abc and also a vowel", "source": "line that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3041", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that ends with  123 ", "source": "line that starts with `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_3045", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with a capital letter", "source": "line that ends with capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3051", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with abc and ends with a capital", "source": "line that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3052", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "locate the line beginning with the numeral 123 and ending with a letter written in lowercase", "source": "line that starts with `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3065", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with a capital letter and also ends with a character", "source": "line that ends with capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_3067", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that starts with  abc ", "source": "line that starts with letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3084", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that starts with letter", "source": "line that ends with lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3087", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that ends with vowel", "source": "line that starts with vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3088", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start and end with vowels", "source": "line that ends with vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3097", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a letter and that begins with a char", "source": "line that ends with letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3098", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending in lowercase and beginning with a vowel", "source": "line that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3107", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel in the beginning and an uppercase letter at the end", "source": "line that ends with capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3109", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that initiate with a chracter and letter", "source": "line that starts with character and that starts with letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3110", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a capital letter and that begins with a letter", "source": "line that ends with capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3123", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a character that starts with 123", "source": "line that starts with character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3124", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a lowercase letter and begins with a letter", "source": "line that starts with lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3129", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that starts with letter", "source": "line that ends with letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3134", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that ends with character", "source": "line that starts with letter and that ends with character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_3166", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that ends with character", "source": "line that starts with capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_3172", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a lowercase letter and begins with a capital letter", "source": "line that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3175", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines start with abc before other letters", "source": "line that starts with `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3179", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that ends with letter", "source": "line that starts with character and that ends with letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3186", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with both a character and a letter", "source": "line that starts with character and that starts with letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3201", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with any letter and ending with 123", "source": "line that starts with letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_3203", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with a character but starts with the number 123", "source": "line that ends with character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3205", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that ends with  abc ", "source": "line that ends with character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_3220", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a vowel and that begins with a capital letter", "source": "line that ends with vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3221", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends in some letter and starts with another letter in lowercase", "source": "line that ends with letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3222", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a capital letter and ending with a vowel", "source": "line that starts with capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3224", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that ends with vowel", "source": "line that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3226", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc to start possibly before another vowel", "source": "line that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3239", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "locate the line starting with a vowel", "source": "line that starts with vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3241", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "nonproper words endings with a certain character", "source": "line that ends with character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3258", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that have a word ends with capital and letter in begining", "source": "line that ends with capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3276", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with an uppercase letter and ends with any letter", "source": "line that ends with letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3278", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a vowel", "source": "line that ends with letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3285", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins and ends with the sequence 123", "source": "line that starts with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_3286", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that not only starts with a vowel but also a capital letter", "source": "line that starts with vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3303", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with a character and starts with a capital letter", "source": "line that ends with character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3310", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a capital letter that begins with a capital letter", "source": "line that ends with capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3320", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with 123 and end with a letter", "source": "line that starts with `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3321", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that starts with  abc ", "source": "line that starts with character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3322", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with a letter and begins with abc", "source": "line that ends with letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3334", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends and starts with a capital letter", "source": "line that ends with capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3376", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins and stops with a vowel", "source": "line that starts with vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3390", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with abc therefore beginning with a vowel", "source": "line that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3391", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line should begin and end with 123", "source": "line that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_3394", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends in a vowel and also begins with 123", "source": "line that ends with vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3422", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that finish with a character and end in the number sequence 123", "source": "line that ends with character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3424", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with a letter and begins with 123", "source": "line that ends with letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3430", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a letter or abc", "source": "line that starts with letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3437", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc ended by any character", "source": "line that starts with `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_3438", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with 123 and ends with letter", "source": "line that ends with letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3445", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a character and that ends with a vowel", "source": "line that ends with character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3462", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a letter and finish with the number sequence 123", "source": "line that starts with letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_3473", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that ends with  abc ", "source": "line that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_3475", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with any character", "source": "line that ends with character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_3480", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with 123 and ending with a capital letter", "source": "line that starts with `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3481", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with abc and starts with a lowercase letter", "source": "line that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3489", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that starts with lowercase letter", "source": "line that starts with character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3491", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with a vowel and starts with a lowercase letter", "source": "line that ends with vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3500", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line both ends in a vowel and also starts with a letter", "source": "line that ends with vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3513", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a capital letter and ends with any letter", "source": "line that ends with letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3516", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with any lowercase letter that also ends with any vowel", "source": "line that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3518", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a letter and ending with a vowel", "source": "line that starts with letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3523", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that ends with capital letter", "source": "line that ends with character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3564", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with 123 followed be a character at the end", "source": "line that ends with character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3578", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with 123 at the beginning and a capital letter at the end", "source": "line that starts with `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3586", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line stars with a letter and that letter should be a vowel", "source": "line that starts with letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3594", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that starts with  abc ", "source": "line that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3596", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a capital letter and that begins with 123", "source": "line that ends with capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3600", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with a character and begins with abc", "source": "line that ends with character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3611", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that ends with  123 ", "source": "line that starts with vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_3612", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning and ending with a capital letter", "source": "line that ends with capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3625", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a letter thats lowercase", "source": "line that ends with lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3628", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with 123 and ending with a vowel", "source": "line that starts with `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3643", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a vowel and starts with a character", "source": "line that ends with vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3650", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that ends with  abc ", "source": "line that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_3656", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a lowercase vowel", "source": "line that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3658", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line starting with any character and also ending in 123", "source": "line that ends with `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3690", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with 123 and end with lowercase letters", "source": "line that ends with lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3699", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a letter and end with a capital letter", "source": "line that starts with letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3701", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with 123 and that begins with a vowel", "source": "line that ends with `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3703", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc and ending with an uppercase letter", "source": "line that ends with capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3712", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that terminate with a lowercase letter that is also a vowel", "source": "line that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3717", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and the smaller word abc", "source": "line that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3723", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends in a capital letter and also ends in a letter", "source": "line that ends with capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3729", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with both a character and 123", "source": "line that ends with character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_3732", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a character and ends with a letter", "source": "line that starts with character and that ends with letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3734", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with a vowel", "source": "line that ends with vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3739", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have abc as the final word", "source": "line that ends with `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3741", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that ends with capital letter", "source": "line that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3750", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that ends with vowel", "source": "line that starts with `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3752", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that finish with a letter that it also a vowel", "source": "line that ends with letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3779", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a letter and ending with abc", "source": "line that starts with letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_3798", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that starts with  abc ", "source": "line that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3830", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with both a character and a vowel", "source": "line that starts with character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3833", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines thatstart with 123", "source": "line that starts with character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3840", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that ends with lowercase letter", "source": "line that starts with `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3844", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a capital letter and finishes with a vowel", "source": "line that ends with capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3845", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begun with a lowercase letter and ended by abc", "source": "line that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3853", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line which starts with a lowercase letter but ends up with a capital letter", "source": "line that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3859", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a vowel and capital letter", "source": "line that ends with vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3863", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with 123 and has a character at the end", "source": "line that starts with `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_3879", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that ends with lowercase letter", "source": "line that ends with character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3888", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a vowel", "source": "line that starts with letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3889", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a character that is a letter", "source": "line that ends with letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_3898", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that ends with  123 ", "source": "line that starts with lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_3903", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with 123 and a character", "source": "line that ends with `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_3905", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a lowercase letter", "source": "line that starts with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3906", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that ends with character", "source": "line that starts with capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_3909", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin and end with a vowel", "source": "line that ends with vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3916", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that starts with character", "source": "line that starts with `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3920", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and end with a vowel", "source": "line that ends with vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3937", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "locate the line that begins with a vowel and finishes by using a capitalized letter", "source": "line that ends with capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3944", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that starts with capital letter", "source": "line that starts with vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3945", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a vowel and abc", "source": "line that starts with vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3949", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that ends with lowercase letter", "source": "line that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3951", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with vowel and that finishes with abc", "source": "line that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_3963", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a vowel but also ends with a lowercase letter", "source": "line that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3973", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "find the line that starts with any kind of letter and finishes with a character", "source": "line that ends with character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3977", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a letter and character", "source": "line that ends with letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_3982", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with 123 and a character", "source": "line that starts with character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4013", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with 123 at the beginning and a character at the end", "source": "line that ends with character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4033", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that starts with vowel", "source": "line that ends with vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4034", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a lowercase letter that ends with 123", "source": "line that starts with lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4036", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter but ends in 123", "source": "line that ends with `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4074", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that starts with character", "source": "line that starts with letter and that starts with character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4076", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a b or c and ends with a letter", "source": "line that ends with letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4097", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines start with characters but end with lowercase letters", "source": "line that ends with lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4100", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a character and a lowercase letter", "source": "line that ends with character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4119", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that ends with capital letter", "source": "line that starts with `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4135", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins in a character and also ends in a lowercase letter", "source": "line that starts with character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4147", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with 123 and finishes with abc", "source": "line that starts with `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4149", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that ends with  abc ", "source": "line that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4152", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a lowercase letter and a vowel", "source": "line that starts with lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4160", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a letter", "source": "line that ends with letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4167", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with abc and also begin with abc", "source": "line that ends with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4168", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a letter and a vowel", "source": "line that starts with letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4197", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a character and ends with a lowercase letter", "source": "line that starts with character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4198", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that starts with character", "source": "line that starts with capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4200", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with abc as well as a character", "source": "line that starts with `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4210", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a lowercase letter and that begins with abc", "source": "line that ends with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4215", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a letter and that begins with abc", "source": "line that starts with letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4250", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning and ending with any lowercase letter", "source": "line that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4252", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with a vowel and also a capital letter", "source": "line that ends with vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4266", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a capital letter and that begins with a character", "source": "line that starts with capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4268", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins w123 and concludes wabc", "source": "line that ends with `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4277", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line ends with a capital letter", "source": "line that ends with capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4281", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line creates wcharacter concludes w123", "source": "line that starts with character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4293", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with 123 and ended by any character", "source": "line that ends with character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4297", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that starts with lowercase letter", "source": "line that starts with letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4302", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with abc and begins with a lowercase letter", "source": "line that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4304", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that starts with letter", "source": "line that ends with vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4318", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that starts with vowel", "source": "line that starts with capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4322", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that ends with letter", "source": "line that starts with vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4335", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a character and that begins with a letter", "source": "line that ends with character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4356", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a lowercase letter", "source": "line that starts with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4357", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a lowercase letter and end with a character", "source": "line that ends with lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4363", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with abc and terminating with a letter", "source": "line that starts with `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4368", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a letter", "source": "line that ends with letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4376", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that ends with character", "source": "line that starts with letter and that ends with character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4382", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line starts with capital letter and have lowercase at end", "source": "line that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4385", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that starts with capital letter", "source": "line that starts with character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4389", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a letter and end with abc", "source": "line that starts with letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4392", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a letter and a character in the beginning", "source": "line that starts with letter and that starts with character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4395", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning and ending with abc", "source": "line that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4411", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that starts with  abc ", "source": "line that ends with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4428", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and end with abc", "source": "line that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4429", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with abc and then a character", "source": "line that ends with `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4430", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that starts with capital letter", "source": "line that starts with capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4433", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops and begins with a vowel", "source": "line that ends with vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4441", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line terminating with a vowel and commencing with 123", "source": "line that ends with vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4445", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter and conclude in a capital letter", "source": "line that starts with capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4447", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends in abc and also begins in a character", "source": "line that ends with `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4460", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that ends with vowel", "source": "line that starts with letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4464", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a character and a lowercase letter", "source": "line that starts with character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4475", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that starts with character", "source": "line that starts with vowel and that starts with character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4487", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that ends with character", "source": "line that starts with `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4493", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that starts with capital letter", "source": "line that ends with capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4514", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a capital letter but also ends with one", "source": "line that ends with capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4518", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with a lowercase letter and also begins in abc", "source": "line that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4519", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with abc and start with a letter", "source": "line that starts with `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4521", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with any letter but ends with a vowel", "source": "line that starts with letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4535", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with capital letters and end with lowercase letters", "source": "line that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4537", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with abc in lowercase", "source": "line that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4564", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a vowel but ends with a capital letter", "source": "line that starts with vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4568", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins in a lowercase letter and also begins with a character", "source": "line that starts with lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4571", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that starts with letter", "source": "line that ends with lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4579", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a character and also begin with a letter", "source": "line that starts with character and that starts with letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4587", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a letter", "source": "line that starts with letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4595", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with a lowercase vowel", "source": "line that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4596", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with both a letter and abc", "source": "line that ends with letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4637", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with 123 and finishes with a lowercase letter", "source": "line that starts with `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4652", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with any letter", "source": "line that starts with letter and that starts with character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4664", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that starts with capital letter", "source": "line that ends with letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4665", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that ends with  abc ", "source": "line that starts with `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4669", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a capital and finishes with a lowercase letter", "source": "line that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4677", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with abc and begins with 123", "source": "line that ends with `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4699", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a capital and ending with 123", "source": "line that ends with `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4700", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with 123 and ends with any letter", "source": "line that starts with `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4704", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with the word abc and any other characters", "source": "line that starts with `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4705", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a character and a lowercase letter", "source": "line that ends with character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4709", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line commences wuppercase letter and ceases wletter", "source": "line that starts with capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4714", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line commences w123", "source": "line that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4715", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with abc and a letter", "source": "line that ends with `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4716", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that ends with letter", "source": "line that ends with capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4722", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with abc and ends with a vowel", "source": "line that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4723", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that starts with vowel", "source": "line that ends with letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4747", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc and ending with a character", "source": "line that ends with character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4751", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts and ends with 123", "source": "line that ends with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4758", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that starts with character", "source": "line that starts with `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4783", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that ends with vowel", "source": "line that starts with letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4799", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line ends in a capital letter but also starts with 123", "source": "line that ends with capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4814", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with any lowercase letter", "source": "line that ends with letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4824", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with abc and ending with a lowercase letter", "source": "line that starts with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4831", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a lowercase vowel", "source": "line that starts with lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4838", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a lowercase letter and that begins with a character", "source": "line that starts with lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4845", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a character and ending with a letter", "source": "line that starts with character and that ends with letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4853", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that starts with letter", "source": "line that starts with capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4858", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter", "source": "line that starts with lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4863", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that starts with  123 ", "source": "line that ends with `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4868", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a capital letter", "source": "line that starts with capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4873", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts and ends with any characters", "source": "line that ends with character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4881", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends with a character and also ends with a character", "source": "line that ends with character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4900", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that ends with  abc ", "source": "line that starts with character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4905", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that starts with vowel", "source": "line that starts with vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4910", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a capital letter and finishes with a character", "source": "line that starts with capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4912", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with a lowercase letter and starts with a letter", "source": "line that ends with lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4914", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a  letter and ends with abc", "source": "line that starts with letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4918", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a capital letter but begins with a vowel", "source": "line that ends with capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4923", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that ends with capital letter", "source": "line that ends with capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4926", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a lowercase letter and ends with a capital letter", "source": "line that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4931", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with any characters but starts with a letter", "source": "line that ends with character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4932", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with a character and also begins with a vowel", "source": "line that starts with character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4935", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that closures with lowercase letter and that finishes with character", "source": "line that ends with lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4936", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with a capital letter and starts with 123 ", "source": "line that ends with capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4938", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that ends with  abc ", "source": "line that ends with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4950", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a vowel", "source": "line that starts with vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4952", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a character and has a vowel at the end", "source": "line that starts with character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4953", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a vowel that is also a capital letter", "source": "line that starts with vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4954", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that starts with character", "source": "line that ends with character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4957", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that starts with lowercase letter", "source": "line that ends with letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4962", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with abc and that concludes with 123", "source": "line that starts with `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4969", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with letters and abc", "source": "line that ends with letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4982", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with a vowel", "source": "line that ends with vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4987", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a character and terminates with a character", "source": "line that starts with character and that ends with character", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5000", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line creates wuppercase letter and concludes wletter", "source": "line that ends with letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5002", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that starts with vowel", "source": "line that starts with vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5007", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins qwith 123 and finishes with a capital", "source": "line that starts with `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5016", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with a capital letter and starts with a character", "source": "line that ends with capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5032", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines ending with a capital letter", "source": "line that ends with letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5035", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ceases with vowel and small letter", "source": "line that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_5049", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a vowel that is also a capital letter", "source": "line that starts with vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5067", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line must end with a character that is also a vowel", "source": "line that ends with character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_5074", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that ends with vowel", "source": "line that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_5080", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a character and letter", "source": "line that ends with character and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5088", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with a character and begins with a lowercase letter", "source": "line that ends with character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5097", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc and a letter in the beginning", "source": "line that starts with `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5100", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a lowercase letter and begin with a letter", "source": "line that ends with lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5104", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a character and that concludes with a letter", "source": "line that ends with character and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5108", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that start and end with a character", "source": "line that ends with character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5123", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops and begins with a lowercase letter", "source": "line that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5157", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a character in the beginning and abc at the end", "source": "line that starts with character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5168", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that starts with character", "source": "line that starts with `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5170", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with an uppercase letter and has 123 at the end", "source": "line that ends with `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5180", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with abc but begins with a capital letter", "source": "line that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5190", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a vowel", "source": "line that starts with letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5191", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has 123 in the end and has a small letter in the beginning", "source": "line that ends with `` 123 '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5199", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line commences wvowel and concludes wcharacter", "source": "line that starts with vowel and that ends with character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5208", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that ends with character", "source": "line that starts with vowel and that ends with character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5216", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a capital letter at the end", "source": "line that ends with character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5222", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starts and ends with any letter", "source": "line that ends with character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5228", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with 123 and ends with a lowercase character", "source": "line that starts with `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_5249", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins and ends with a capital letter", "source": "line that starts with capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5250", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with 123 and that concludes with 123", "source": "line that starts with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5273", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a capital letter and abc", "source": "line that ends with capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5279", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel in the beginning and has 123 at the end", "source": "line that starts with vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5280", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that ends with  123 ", "source": "line that starts with capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5289", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a lowercase letter and ending with that letter", "source": "line that starts with lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5292", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line which starts and ends with letter", "source": "line that starts with letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5298", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with the word abc", "source": "line that starts with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5300", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a vowel and starts with a letter", "source": "line that starts with vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5301", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a letter and that concludes with abc", "source": "line that starts with letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5303", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that starts with lowercase letter", "source": "line that starts with vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5311", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that starts with letter", "source": "line that ends with character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5346", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with abc and terminating with a character", "source": "line that starts with `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5349", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line whose first character is a vowel", "source": "line that starts with vowel and that starts with character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5355", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that ends with lowercase letter", "source": "line that starts with `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_5369", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that starts with vowel", "source": "line that ends with capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5378", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with a letter and  abc ", "source": "line that ends with letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5384", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has  abc  at its end", "source": "line that ends with `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5395", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a letter and that begins with a lowercase letter", "source": "line that starts with letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5396", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and end with a capital letter", "source": "line that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5400", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that ends with capital letter", "source": "line that ends with letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5408", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with 123 and begin with a vowel", "source": "line that ends with `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5411", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the number 123 and ends with a letter", "source": "line that starts with `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5424", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with a vowel and a lowercase letter", "source": "line that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_5441", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that ends with lowercase letter", "source": "line that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_5446", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines starting but not finishing with a vowel", "source": "line that starts with vowel and that ends with character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5452", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a vowel and abc", "source": "line that starts with vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5460", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with both a character and abc", "source": "line that ends with character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5464", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that starts with letter", "source": "line that ends with `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5465", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and ends with lowercase", "source": "line that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5479", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with and ending with a vowel", "source": "line that ends with vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5480", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with abc and a vowel", "source": "line that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5484", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that commences with abc and has 123 at the end", "source": "line that ends with `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5495", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops and begins after a letter", "source": "line that ends with letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5529", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a vowel as well as a lowercase letter", "source": "line that starts with vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5543", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with 123 and also begins with a character", "source": "line that starts with `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5546", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a character that finishes with 123", "source": "line that ends with character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5549", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and starts with a character", "source": "line that ends with `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5550", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with any characters and starts with a capital letter", "source": "line that ends with character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5551", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a vowel and begins with a letter", "source": "line that starts with vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5553", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with both a character and a lowercase letter", "source": "line that starts with character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5562", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a vowel and a character", "source": "line that starts with vowel and that starts with character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5571", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with abc", "source": "line that ends with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_5583", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a lowercase letter and begins with a character", "source": "line that ends with lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5588", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a lowercase letter and finishes with a vowel at the end", "source": "line that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_5599", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with abc and a letter", "source": "line that ends with `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5603", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a lowercase letter and ending with a vowel", "source": "line that ends with vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5629", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "any line that starts with 123 and ends with abc", "source": "line that ends with `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5631", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with abc and ends with a vowel", "source": "line that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_5632", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a character and vowel", "source": "line that starts with character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5634", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with abc and also ends in a vowel", "source": "line that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_5640", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a vowel and begins with abc", "source": "line that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5646", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that ends with  abc ", "source": "line that ends with character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5658", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line begins with a character and ends with a vowel", "source": "line that starts with character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_5660", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that ends with character", "source": "line that starts with lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5671", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a capital letter for an ending and a vowel beginning", "source": "line that starts with vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5674", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a capital letter and begins with a character", "source": "line that ends with capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5677", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with 123 and ending with a vowel", "source": "line that starts with `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_5688", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that starts with  abc ", "source": "line that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5710", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that ends with character", "source": "line that starts with character and that ends with character", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5725", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins wcharacter stops wvowel", "source": "line that ends with vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5728", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a special character but ends with the numbers 123", "source": "line that ends with `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5754", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines ending in a double letter", "source": "line that ends with letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5762", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that ends with character", "source": "line that ends with `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5770", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with a capital letter and starts with a lowercase letter", "source": "line that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5778", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a vowel", "source": "line that starts with vowel and that starts with character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5781", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that ends with  abc ", "source": "line that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5788", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a character and a capiral letter", "source": "line that ends with character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5793", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that ends with  123 ", "source": "line that starts with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5798", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins and ends with a letter", "source": "line that starts with letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5803", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with 123 and end with abc", "source": "line that ends with `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5815", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with abc and begins with a letter", "source": "line that ends with `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5819", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that ends with  abc ", "source": "line that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5828", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a vowel and ends with a letter", "source": "line that starts with vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5833", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a letter and a lowercase letter", "source": "line that ends with letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_5837", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that starts with  abc ", "source": "line that starts with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5864", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that starts with vowel", "source": "line that ends with vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5869", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a character and conclude with a vowel", "source": "line that ends with vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5875", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that starts with character", "source": "line that ends with lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5886", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that ends with  123 ", "source": "line that ends with character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5893", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that both end and start with character", "source": "line that ends with character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5908", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a vowel and ending with a capital letter", "source": "line that starts with vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5911", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with a vowel at its start and a lowercase letter at its ened", "source": "line that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_5916", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line starts and ends with a letter", "source": "line that ends with letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5944", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a letter and begins with a character", "source": "line that ends with letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5958", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with 123 and ended by any lowercase letter", "source": "line that ends with lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5959", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with letters and end with other capital letters", "source": "line that starts with letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5965", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a lowercase letter", "source": "line that starts with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5969", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with 123 and ending with lowercase letter", "source": "line that ends with lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5977", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin and stops with a capital letter", "source": "line that starts with capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_6003", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that starts with letter", "source": "line that starts with letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6009", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that ends with lowercase letter", "source": "line that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_6019", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a lowercase letter and ending with a letter", "source": "line that ends with letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6020", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with a capital letter and begins with a lowercase letter", "source": "line that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6026", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a capital letter and also end with a letter", "source": "line that ends with capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_6036", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that terminate with the number sequence 123 and finish with a character", "source": "line that ends with `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6038", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line that terminates with a character and begins with a letter", "source": "line that ends with character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6043", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with both a vowel and a character", "source": "line that starts with vowel and that starts with character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6047", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with a vowel and begins with 123", "source": "line that ends with vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_6054", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that end with a vowel which is a letter", "source": "line that ends with vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_6062", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with both a letter and a character", "source": "line that starts with letter and that starts with character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6063", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a character and end with a capital letter", "source": "line that starts with character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_6082", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with a vowal and a character", "source": "line that ends with vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_6131", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins wabc and concludes w123", "source": "line that starts with `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_6138", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning and ending with a lowercase letter", "source": "line that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6140", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a capital letter", "source": "line that starts with capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6144", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines start with any letter but end with a lowercase letter", "source": "line that starts with letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_6154", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with 123 and ending with a character", "source": "line that starts with `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_6160", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with abc in lowercase", "source": "line that ends with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_6184", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin and end with 123", "source": "line that ends with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_6185", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that ends with vowel", "source": "line that starts with character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_6188", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a character and begins with a capital letter", "source": "line that ends with character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_6193", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with 123 and stops with abc", "source": "line that starts with `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_6196", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line starting with a character and ending with a letter", "source": "line that ends with letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6202", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel at the end of it", "source": "line that ends with letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_6215", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with abc and stops after a lowercase letter", "source": "line that starts with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_6218", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with a lowercase vowel", "source": "line that starts with vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6219", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line mush start with a vowel and finish off with the letters abc", "source": "line that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6226", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a letter and stops with a vowel", "source": "line that starts with letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_6231", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a character and begins with a vowel", "source": "line that ends with character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6243", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that starts with letter", "source": "line that starts with letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6285", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "find the line that starts with any sort of a letter but ends with a lowercase one", "source": "line that ends with lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6286", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that ends with character", "source": "line that ends with capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_6288", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a lowercase letter", "source": "line that starts with lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6293", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with any lowercase letter", "source": "line that starts with lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6300", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a vowel and stops with a lowercase letter", "source": "line that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_6305", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a letter in the beginning and 123 at the end", "source": "line that ends with `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6309", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a character and letter", "source": "line that starts with character and that starts with letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6314", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a capital letter at the end", "source": "line that ends with capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_6318", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and end with a letter", "source": "line that starts with lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_6324", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with a vowel", "source": "line that ends with character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_6331", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that starts with lowercase letter", "source": "line that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6352", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that ends with capital letter", "source": "line that ends with letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_6362", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter at its end and an upper case letter at the beginning", "source": "line that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_6365", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what  line that ends with character and that starts with lowercase letter", "source": "line that ends with character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6375", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a vowel and ending with a character", "source": "line that ends with character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6378", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a letter in the beginning and has 123 at the end of it", "source": "line that starts with letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_10", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a vowel and begins with a capital letter", "source": "line that ends with vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_13", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with any vowel and ends with any lowercase letter", "source": "line that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_33", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a lowercase letter and stops after abc", "source": "line that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_39", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a lowercase vowel", "source": "line that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_47", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a lowercase letter at the start and a vowel at the end", "source": "line that ends with vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_58", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a letter and a capital letter", "source": "line that ends with letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_68", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that ends with capital letter", "source": "line that starts with letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_73", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with letter and ends with vowel", "source": "line that ends with vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_95", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins and finishes with a lowercase letter", "source": "line that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_96", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that starts with letter", "source": "line that ends with character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_101", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins in abc and also ends in 123", "source": "line that starts with `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_105", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a vowel and end with abc", "source": "line that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_111", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what  line that ends with vowel and that starts with character", "source": "line that ends with vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_114", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a character and that begins with abc", "source": "line that ends with character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_125", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that starts with vowel", "source": "line that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_128", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end 123 and start with a capital letter", "source": "line that starts with capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_143", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with a capital letter and also a letter", "source": "line that ends with capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_157", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the first letter of the line needs to be a vowel and the last characters need to be 123", "source": "line that ends with `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_161", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with abc and ends with vowels", "source": "line that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_174", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that starts with  123 ", "source": "line that ends with character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_185", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that starts with lowercase letter", "source": "line that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_209", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins wcharacter and concludes wuppercase letter", "source": "line that starts with character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_216", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that starts with lowercase letter", "source": "line that starts with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_219", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a capital letter and stops after abc", "source": "line that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_231", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts and ends lowercase", "source": "line that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_240", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that starts with capital letter", "source": "line that ends with `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_242", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with some letter", "source": "line that starts with letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_268", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that starts with capital letter", "source": "line that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_270", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a lowercase letter and ending with a character", "source": "line that starts with lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_281", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a vowel and also with abc", "source": "line that starts with vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_284", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a lowercase letter and ending with a capital letter", "source": "line that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_291", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning and ending with abc", "source": "line that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_293", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with the smaller word abc and terminate with the number sequence 123", "source": "line that starts with `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_301", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with and ending with a character", "source": "line that starts with character and that ends with character", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_305", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins and comes to an end with a letter", "source": "line that starts with letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_309", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that ends with  abc ", "source": "line that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_312", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with the number 123 and also starts with a character", "source": "line that starts with `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_325", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a capital letter and ends with a lowercase letter", "source": "line that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_347", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that starts with  abc ", "source": "line that ends with letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_348", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a lowercase letter but ends with the number 123", "source": "line that ends with `` 123 '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_351", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with 123 and a character", "source": "line that ends with `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_357", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a lowercase letter and ends with at least one other letter", "source": "line that starts with lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_371", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that ends with vowel", "source": "line that starts with character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_384", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that ends with letter", "source": "line that ends with lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_401", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that starts with vowel", "source": "line that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_405", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that terminate in a character and letter sequence abc", "source": "line that ends with character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_420", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that starts with lowercase letter", "source": "line that starts with character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_421", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that must end in a vowel", "source": "line that ends with vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_422", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with any uppercase letter", "source": "line that starts with capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_432", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a character and ends with a letter", "source": "line that starts with character and that ends with letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_444", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that starts with lowercase letter", "source": "line that ends with character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_448", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with 123 and 123", "source": "line that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_451", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a letter and that concludes with a character", "source": "line that starts with letter and that ends with character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_457", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a vowel", "source": "line that ends with vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_460", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a capital letter but ends with a e i o or u", "source": "line that starts with capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_484", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "locate the line beginning with a capitalized letter and ending with the sequence abc", "source": "line that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_494", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with both a character and a lowercase letter", "source": "line that ends with character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_500", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a letter and stops after a character", "source": "line that starts with letter and that ends with character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_502", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a lowercase vowel", "source": "line that starts with vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_506", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with 123 and ending with a character", "source": "line that starts with `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_534", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a lower letter and vowel at the beginning and end respectively", "source": "line that ends with vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_540", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that starts with capital letter", "source": "line that ends with character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_543", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with abc at the beginning", "source": "line that starts with character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_549", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a character and has an uppercase letter at the end", "source": "line that ends with capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_565", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starting off capitalized with abc as an ending word", "source": "line that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_572", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that starts with letter", "source": "line that starts with lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_581", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter at the end", "source": "line that ends with lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_585", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin and end with a letter", "source": "line that ends with letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_608", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a lowercase letter and ending with 123", "source": "line that starts with lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_623", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with abc and end with a vowel", "source": "line that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_642", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using the character abc at the very end of it", "source": "line that ends with `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_643", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins in a capital letter and also ends in a capital letter", "source": "line that starts with capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_657", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that starts with capital letter", "source": "line that starts with letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_664", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a vowel and a capital letter", "source": "line that starts with vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_673", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins with abc", "source": "line that starts with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_674", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts and ends with the word abc", "source": "line that ends with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_681", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with capital letters", "source": "line that starts with capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_690", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with both 123 and a character", "source": "line that starts with `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_691", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that ends with character", "source": "line that starts with `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_696", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that ends with lowercase letter", "source": "line that starts with letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_702", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning and ending with abc", "source": "line that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_704", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with a capital letter", "source": "line that ends with letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_712", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with abc and stops with a capital letter", "source": "line that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_713", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with any character but ends with a lowercase letter", "source": "line that starts with character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_735", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line begins with a vowel and also ends with abc", "source": "line that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_742", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that ends with  abc ", "source": "line that starts with letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_757", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that starts with capital letter", "source": "line that starts with character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_767", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that has lowercase letter and with vowel at the end", "source": "line that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_770", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a lowercase letter and ends with a letter", "source": "line that ends with letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_779", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that starts with  123 ", "source": "line that ends with vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_784", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a character and capital letters", "source": "line that starts with character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_788", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that conclude with the number sequence 123 and begin with abc", "source": "line that ends with `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_799", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a lowercase letter and that concludes with a character", "source": "line that ends with lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_804", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that starts with letter", "source": "line that ends with letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_837", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with any lowercase letter and starts with a character", "source": "line that ends with lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_841", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a letter", "source": "line that starts with letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_843", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with abc in lowercase", "source": "line that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_849", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with an uppercase letter and ends with a lowercase letter", "source": "line that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_856", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with abc", "source": "line that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_861", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that ends with letter", "source": "line that ends with capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_873", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that starts with  123 ", "source": "line that ends with lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_890", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that ends with letter", "source": "line that ends with character and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_900", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that ends with capital letter", "source": "line that starts with `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_901", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that starts with vowel", "source": "line that starts with capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_913", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a letter and also begin with a lowercase letter", "source": "line that starts with letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_917", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with 123 and starting in lowercase", "source": "line that ends with `` 123 '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_918", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with 123 and begins with a letter", "source": "line that ends with `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_923", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that sart with abc and end with a capital letter", "source": "line that ends with capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_928", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a vowel", "source": "line that starts with vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_954", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that starts with letter", "source": "line that starts with `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_960", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a letter and end with a character", "source": "line that starts with letter and that ends with character", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_963", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a capital letter that finishes with a letter", "source": "line that starts with capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_964", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that starts with lowercase letter", "source": "line that starts with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_984", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that ends with lowercase letter", "source": "line that starts with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_992", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins in a vowel and also ends in a character", "source": "line that starts with vowel and that ends with character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_994", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a vowel but ends with abc", "source": "line that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_998", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with both a character and 123", "source": "line that ends with character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_1008", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that starts with  123 ", "source": "line that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1018", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a capital letter", "source": "line that starts with capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1026", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that ends with character", "source": "line that ends with lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_1029", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begin and end with abc", "source": "line that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_1036", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that ends with character", "source": "line that starts with `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_1041", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a letter and stops after a lowercase letter", "source": "line that starts with letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1057", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a letter and a lowercase letter", "source": "line that starts with letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1060", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "letter beginning with vowel and ending with lowercase letter", "source": "line that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1077", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that starts with character", "source": "line that starts with lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1083", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with 123 and ends with any letter", "source": "line that starts with `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_1115", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a letter and abc", "source": "line that starts with letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1127", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that both begins and ends with 123", "source": "line that ends with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1155", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that ends with lowercase letter", "source": "line that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1206", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that starts with letter", "source": "line that ends with `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1211", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that starts with character", "source": "line that ends with `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1216", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines beginning 123 and ending on a capital letter of some sort", "source": "line that ends with capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1222", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines ending with a lowercase letter", "source": "line that ends with character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1223", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that starts with capital letter", "source": "line that ends with vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1253", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a capital letter and stops after a character", "source": "line that starts with capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_1268", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that ends with vowel", "source": "line that ends with capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1274", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with any lowercase letter but must end with a vowel", "source": "line that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1281", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line terminating with abc and also with a character", "source": "line that ends with `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_1282", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with 123", "source": "line that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1293", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends in a vowel that is a capital letter", "source": "line that ends with capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1295", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that starts with  abc ", "source": "line that ends with character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1299", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begin with a capital", "source": "line that starts with character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1301", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with 123", "source": "line that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_1307", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a vowel and ending with a letter", "source": "line that ends with letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1311", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line ends with abc and also begins with abc", "source": "line that ends with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1315", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that ends with lowercase letter", "source": "line that ends with character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1318", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with a letter at the beginning and a vowel at the end", "source": "line that starts with letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1328", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins wvowel and concludes wletter", "source": "line that ends with letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1338", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a capital letter and ending with a character", "source": "line that starts with capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_1339", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a character and that concludes with a capital letter", "source": "line that starts with character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_1343", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line both beginning and ending with the sequence 123", "source": "line that starts with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_1344", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a capital letter and ending with 123", "source": "line that starts with capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_1347", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a character and terminate in a capital letter", "source": "line that starts with character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_1368", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a character and that ends with a vowel", "source": "line that starts with character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1370", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that ends with character", "source": "line that ends with character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_1393", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a character", "source": "line that starts with character and that starts with character", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1397", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter and end with a vowel", "source": "line that starts with capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1400", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has any lowercase letter at the end and begins with the word  abc ", "source": "line that ends with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1423", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter at the end and begins with an alphabet", "source": "line that ends with lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1431", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a vowel and ended by abc", "source": "line that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_1434", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines ending with a vowel only if they also start with a vowel", "source": "line that ends with vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1435", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a vowel but ending with a character", "source": "line that starts with vowel and that ends with character", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_1451", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that ends with  abc ", "source": "line that starts with character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_1454", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a lowercase letter", "source": "line that starts with lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1464", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that ends with lowercase letter", "source": "line that ends with letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1488", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a letter and that begins with a letter", "source": "line that ends with letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1491", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a lowercase letter and stops with a character", "source": "line that starts with lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_1492", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that ends with  123 ", "source": "line that starts with character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_1496", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that starts with lowercase letter", "source": "line that ends with `` 123 '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1499", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that starts with letter", "source": "line that ends with `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1501", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a vowel and a character", "source": "line that ends with vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_1505", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins with a letter", "source": "line that starts with letter and that starts with letter", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1507", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a character and ending with the number 123", "source": "line that starts with character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_1508", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends with a capital letter and also begins with a vowel", "source": "line that ends with capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1517", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a lowercase letter that ends with abc", "source": "line that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_1535", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with both abc and a letter", "source": "line that starts with `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1538", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lind ending with a capital letter", "source": "line that ends with capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_1554", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with an uppercase letter and ends with a vowel", "source": "line that ends with vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1562", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that ends with  abc ", "source": "line that starts with letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_1573", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that ends with  123 ", "source": "line that starts with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_1575", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with capital vowel", "source": "line that starts with capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1581", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that starts with  abc ", "source": "line that starts with character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1587", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what word ends with a double capital letter", "source": "line that ends with capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_1590", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that ends with letter", "source": "line that starts with capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_1594", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "number ending with a digit or capital letter", "source": "number that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_178", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character or digit", "source": "word that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_223", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter or digit", "source": "word that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_256", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with lowercase letter or number", "source": "word that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_278", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "lines that start either abc or some number", "source": "number that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_313", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with either a capital letter or a digit", "source": "number that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_447", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with a capital letter or digit", "source": "word that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_464", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a vowel or digit", "source": "word that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_465", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that ends with either a character or in a digit", "source": "number that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_527", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with a letter or digit", "source": "number that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_647", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number concludes wdigit or small letter", "source": "number that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_667", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with lowercase letter or digit", "source": "number that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_950", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any word that ends with a letter or number", "source": "word that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1056", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with vowel or digit", "source": "number that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1187", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a digit or chracter", "source": "word that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1484", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers with a digit or lowercase letter at their end", "source": "number that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1549", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with any character or digit", "source": "word that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1654", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number with either a character or a digit at its end", "source": "number that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1719", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that concludes with 123 or a digit", "source": "number that ends with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1952", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with 123", "source": "number that ends with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1998", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with either a vowel or digit", "source": "number that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2007", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter or digit last", "source": "word that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2016", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter or digit", "source": "word that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2113", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter or digit", "source": "word that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2435", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with letter or number", "source": "word that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2834", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with vowel or digit", "source": "number that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2875", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has a digit or character at the end", "source": "number that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2900", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends with any characters or digits", "source": "number that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2940", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with either abc or digit", "source": "word that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2957", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number ends with a capital letter or a digit", "source": "number that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3171", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with either a capital letter or digit", "source": "word that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3182", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words stopping with vowels or digits", "source": "word that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3212", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate in lower cases letters or a digit", "source": "word that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3296", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a capital letter or a digit", "source": "word that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3416", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  or digit", "source": "word that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3450", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter or digit", "source": "word that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3459", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends with either a character or with a digit", "source": "word that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3803", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that conclude with either a capital letter or a digit", "source": "word that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3847", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has an uppercase letter or number at its end", "source": "word that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3964", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with either 123 or a digit", "source": "number that ends with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3998", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word the ends with either a letter or a digit", "source": "word that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4020", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a lowercase letter or digit", "source": "word that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4116", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops with a vowel or digit", "source": "number that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4569", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with either abc or a digit", "source": "number that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4609", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after abc or digit", "source": "number that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4806", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a number or abcat the end", "source": "word that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4809", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with a character or a digit", "source": "number that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5025", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with either a vowel or a digit", "source": "word that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5037", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with abc or digits", "source": "word that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5045", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a character or a digit", "source": "word that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5371", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with either a lowercase letter or a digit", "source": "number that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5374", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that end with either a letter or a digit", "source": "number that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5434", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending either with abc or a number", "source": "word that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5458", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in either a letter or in a digit", "source": "word that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5556", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  abc  or digit", "source": "number that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5574", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that stops with a lowercase letter or digit", "source": "number that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5816", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number ends with a number or a capital letter", "source": "number that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6058", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number than ends with either the word abc or a digit", "source": "number that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6093", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a vowel or a number", "source": "word that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6116", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with abc or a digit", "source": "word that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6206", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with a letter or a digit", "source": "number that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6257", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending either with abc or a digit", "source": "number that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6283", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with capital letter or digit", "source": "number that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6357", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ends with either an uppercase letter or a digit", "source": "number that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6381", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that end with 123", "source": "number that ends with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_11", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  or digit", "source": "word that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_206", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that stops either lowercase or with a digit", "source": "word that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_229", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character or digit", "source": "word that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_341", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words end with a lowercase letter or with a digit", "source": "word that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_391", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with a letter or a digit", "source": "number that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_915", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with letter or digit", "source": "number that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_975", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word stopping on a digit or a character", "source": "word that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1098", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a vowel or a digit", "source": "word that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1147", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that ends in either a vowel or a digit", "source": "number that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1424", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  or digit", "source": "number that ends with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1475", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with either a vowel or a digit", "source": "number that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1567", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "something with letters or digits in it", "source": "letter or digit", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_427", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "a letter or perhaps a digit", "source": "letter or digit", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_1060", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "selection of digit or vowel", "source": "vowel or digit", "target": "(call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_1584", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "letter or number", "source": "letter or digit", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_2060", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "small letter or number", "source": "lowercase letter or digit", "target": "(call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_2068", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "a letter thats capital or a number", "source": "capital letter or digit", "target": "(call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_2070", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "what word contains either 123 or digit", "source": "`` 123 '' or digit", "target": "(call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_2567", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "vowel or number", "source": "vowel or digit", "target": "(call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_3216", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "any vowel or digit", "source": "vowel or digit", "target": "(call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_3448", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "either a vowel or a digit", "source": "vowel or digit", "target": "(call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_3747", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "either a character or a digit", "source": "character or digit", "target": "(call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_3921", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "find a line that has in it either the abc sequence or a numeral", "source": "`` abc '' or digit", "target": "(call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_4341", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "uppercase letter or number", "source": "capital letter or digit", "target": "(call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_4578", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "either 123 or a digit", "source": "`` 123 '' or digit", "target": "(call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_5151", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "list all characters or digits", "source": "character or digit", "target": "(call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_5177", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "line using a character or a digit", "source": "character or digit", "target": "(call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_5960", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "123 or any other number", "source": "`` 123 '' or digit", "target": "(call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_6142", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "lowercase letter or digit", "source": "lowercase letter or digit", "target": "(call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_test_241", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "either a capital letter or a digit", "source": "capital letter or digit", "target": "(call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_test_410", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "contains either the word abc or a digit", "source": "`` abc '' or digit", "target": "(call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))", "qid": "regex_test_605", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "character or digit", "source": "character or digit", "target": "(call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))", "qid": "regex_test_1079", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "choice between digit or character", "source": "character or digit", "target": "(call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))", "qid": "regex_test_1559", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "line that finishes with 123 or 123", "source": "line that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_65", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "a line that has at least one letter or the number 123 in it", "source": "line that ends with letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_1024", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "what  line that ends with character or the number  123 ", "source": "line that ends with character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_1329", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "lines that have the number 123 but also ends with a character", "source": "line that ends with character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_1436", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "lind ending with lowercase letter or number 123", "source": "line that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_1593", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line has abc or the digit 123 at its end", "source": "line that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_1795", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with lowercase letter or the number  123 ", "source": "line that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_1870", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "lines that finish with a lowercase letter or the number sequence 123", "source": "line that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_1962", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "a line that ends with either a capital letter or the number 123", "source": "line that ends with capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_1988", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with either a vowel or 123", "source": "line that ends with vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_2093", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "a line with the sequence 123 or a character at its end", "source": "line that ends with character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_2521", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "a line that ends either with abc or 123", "source": "line that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_2569", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "lines that end with capital letters or 123", "source": "line that ends with capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_2719", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "lines ending with a character or the number 123", "source": "line that ends with character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_3263", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "a line terminating with either a vowel or the number 123", "source": "line that ends with vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_3375", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that is ended with any letter or the sequence 123", "source": "line that ends with letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_3524", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with the number 123 or a character", "source": "line that ends with character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_3639", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "lines that end with either a capital letter or 123", "source": "line that ends with capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_3696", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that concludes with a capital letter or the number 123", "source": "line that ends with capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_3838", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "lines that stops with 123", "source": "line that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_4068", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "a line ending with 123", "source": "line that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_4404", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with capital letter or the number  123 ", "source": "line that ends with capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_4523", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with a number sequence 123 or on any lowercase letter", "source": "line that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_4594", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "which lines end with either a lowercase letter or end with the number 123", "source": "line that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_4682", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "what is a line that ends with a vowel or number 123", "source": "line that ends with vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_4689", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with  abc  or the number  123 ", "source": "line that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_4711", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line ending with either a vowel or 123", "source": "line that ends with vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_4792", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "lines that end with 123", "source": "line that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_4820", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "what line ends 123 or with the short word abc", "source": "line that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_5127", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with  123  or the number  123 ", "source": "line that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_5565", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with abc or 123", "source": "line that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_5686", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "what line ends with either 123 or a letter", "source": "line that ends with letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_6252", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that finishes with a vowel or the number 123", "source": "line that ends with vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_104", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with vowel or the number  123 ", "source": "line that ends with vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_483", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with a letter or 123", "source": "line that ends with letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_647", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "lines that stops after a capital letter or 123", "source": "line that ends with capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_720", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with lowercase letter or the number  123 ", "source": "line that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_790", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with letter or the number  123 ", "source": "line that ends with letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_845", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "what is a line that ends with the number 123", "source": "line that ends with character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_881", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with capital letter or the number  123 ", "source": "line that ends with capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_1124", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that comes to an end with a letter or the digit 123", "source": "line that ends with letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_1134", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that is ended with abc or 123", "source": "line that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_1239", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with  123  or the number  123 ", "source": "line that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_1246", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "lines that stops after a lowercase letter or 123", "source": "line that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_1415", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that contains the word  abc  and a vowel", "source": "line that contains the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_442", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that contains lowercase letter", "source": "line that contains the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_597", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc and 123 in it", "source": "line that contains the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_624", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a lowercase letter and the word abc both need to be used in the line", "source": "line that contains the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_713", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "linte that has the word abc and a capital letter", "source": "line that contains the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_859", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing abc", "source": "line that contains the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_952", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that contains letter", "source": "line that contains the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1177", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the smaller word abc and have a vowel in them", "source": "line that contains the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1639", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word abc and also contains a capital letter within it", "source": "line that contains the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2615", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that contains  abc ", "source": "line that contains the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2877", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has the word abc that also has a capital letter", "source": "line that contains the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3257", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have abc and 123", "source": "line that contains the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3336", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has the word abc and also contains a vowel", "source": "line that contains the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3962", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing the word abc and contains any other letter", "source": "line that contains the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3967", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have abc and also have a letter", "source": "line that contains the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4065", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses the word abc", "source": "line that contains the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4401", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains both the word abc and a capital letter", "source": "line that contains the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4548", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses abc in it", "source": "line that contains the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4788", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains characters and   abc ", "source": "line that contains the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4803", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes the word abc and also includes 123", "source": "line that contains the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5095", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes the word abc", "source": "line that contains the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5587", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with both a vowel and the characters abc in it", "source": "line that contains the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5797", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a lowercase letter and the word abc", "source": "line that contains the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6192", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a small letter and the word abc", "source": "line that contains the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6194", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes the word abc and also lowercase letters", "source": "line that contains the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6232", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using abc and a capital letter", "source": "line that contains the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_6267", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has both abc and 123", "source": "line that contains the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_6329", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and a letter", "source": "line that contains the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_381", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that contains  123 ", "source": "line that contains the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_615", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes the word abc and includes abc", "source": "line that contains the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_688", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses the word abc and uses other characters", "source": "line that contains the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_724", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines containing a double of abc in it", "source": "line that contains the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_973", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines having both a letter and the word abc", "source": "line that contains the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1049", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "aline containing the word abc as well as a character", "source": "line that contains the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1075", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a word abc and that have characters", "source": "line that contains the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1136", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has both lowercase letters and the short word abc", "source": "line that contains the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1270", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and any letters", "source": "line that contains the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1432", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have the characters abc amongst other characters", "source": "line that contains the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1502", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that contains character", "source": "line that contains the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1509", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that contains character", "source": "line that contains the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1580", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a word that begins with two vowels", "source": "word that starts with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_0", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with two or more characters", "source": "word that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_14", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with no more than two characters", "source": "number that starts with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_18", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with no more than two characters", "source": "word that starts with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_156", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with no more than two characters", "source": "word that starts with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_180", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with a maximum of two vowels", "source": "number that starts with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_240", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with an individual shorter word or two", "source": "word that starts with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_317", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with two or less words at the get go", "source": "number that starts with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_363", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with at most two numbers", "source": "word that starts with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_395", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with at most two vowels", "source": "word that starts with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_418", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "no more than two capital letters begin this number", "source": "number that starts with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_432", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that have two digits at the beginning", "source": "number that starts with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_438", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with two or more lowercase letters", "source": "word that starts with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_453", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number starting with two letters or less", "source": "number that starts with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_482", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with no more than two lowercase letters", "source": "word that starts with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_522", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at least two character", "source": "word that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_610", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with two or more vowels", "source": "word that starts with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_692", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins in two lowercase letters", "source": "word that starts with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_705", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with two letter", "source": "word that starts with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_732", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with at most two numbers", "source": "number that starts with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_746", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number starting with no more than two words", "source": "number that starts with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_758", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with at least two letters at the start", "source": "word that starts with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_837", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number starts with at least two letters", "source": "number that starts with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_868", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "wors that begin with two lowercase letters", "source": "word that starts with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1012", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that had a maximum of two vowels at the beginning", "source": "word that starts with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1021", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with at most 2 vowels", "source": "number that starts with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1128", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number beginning with one or two lowercase letters", "source": "number that starts with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1180", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a minimum of two characters in the beginning", "source": "word that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1182", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number begins with two numbers", "source": "number that starts with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1359", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with no more than two capital letters", "source": "word that starts with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1368", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with at most 2 words", "source": "word that starts with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1380", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins wtwo letters maximum", "source": "word that starts with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1430", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with at least 2 vowels", "source": "word that starts with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1497", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with two characters", "source": "word that starts with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1588", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at most two character", "source": "word that starts with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1601", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word creates wtwo uppercase letters", "source": "word that starts with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1703", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that start with famous two digit", "source": "word that starts with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1740", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with at most two character", "source": "number that starts with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1774", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has two small letters in the beginning", "source": "word that starts with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1882", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with two characters", "source": "word that starts with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1898", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with two characters at most", "source": "word that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1904", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with any two letters", "source": "word that starts with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1914", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starting with two or less numbers", "source": "word that starts with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1916", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with at least two vowels at the beginning", "source": "word that starts with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1986", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begin swith two capital letters", "source": "word that starts with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2045", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with at least two character", "source": "word that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2116", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with two or more characters", "source": "number that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2212", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with two letter", "source": "word that starts with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2246", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with two vowel", "source": "word that starts with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2257", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the digit that begins with a minimum of two characters", "source": "number that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2296", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have no more than two characters at the beginning", "source": "word that starts with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2300", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a minimum of two small letters", "source": "word that starts with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2327", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with no more than two digits", "source": "word that starts with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2444", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with two or more letters", "source": "word that starts with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2527", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with 2 characters", "source": "number that starts with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2531", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at least two lowercase letter", "source": "word that starts with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2552", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with no more than two digits", "source": "number that starts with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2564", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with at most two vowels", "source": "number that starts with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2592", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at least two lowercase letter", "source": "word that starts with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2650", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with no more than two letters", "source": "number that starts with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2651", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with two o less characters at the beginning", "source": "number that starts with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2729", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words start with two characters", "source": "word that starts with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2730", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with two letters or less", "source": "word that starts with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2731", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a maximum of two small letters", "source": "word that starts with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2798", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with two character", "source": "word that starts with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2819", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at least two vowel", "source": "word that starts with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2923", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that have at least two digits at the beginning", "source": "number that starts with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2955", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that begins with two words tops", "source": "number that starts with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2978", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with two numbers", "source": "number that starts with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3120", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number beginning with two lowercase letters at the most", "source": "number that starts with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3169", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with at most 2 vowels", "source": "word that starts with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3177", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with no fewer than two lowercase letters", "source": "word that starts with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3178", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with two lowercase letter", "source": "word that starts with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3254", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with at most two lowercase letter", "source": "number that starts with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3270", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with 2 lowercase letters", "source": "word that starts with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3373", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with at most two letters", "source": "word that starts with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3572", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with no more than two vowels", "source": "word that starts with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3579", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a maximum of two letters", "source": "word that starts with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3608", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with at least two character", "source": "number that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3661", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with no more than two words", "source": "number that starts with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3692", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that beings with two lowercase letters at most", "source": "number that starts with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3726", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with no more than two vowels", "source": "number that starts with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3737", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with at most two lowercase letters", "source": "number that starts with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3772", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with the number two", "source": "word that starts with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3787", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that begins with 2 digits", "source": "number that starts with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3856", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with no more than two letters", "source": "word that starts with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3858", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with at most two digit", "source": "number that starts with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3887", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with at least two characters", "source": "word that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3915", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with at most two number", "source": "number that starts with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3922", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins wtwo letters", "source": "word that starts with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3931", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that starts with a maximum of two characters", "source": "number that starts with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4040", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at most two letter", "source": "word that starts with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4122", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with at least 2 letters", "source": "word that starts with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4164", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with at most two capital letters", "source": "word that starts with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4174", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with any two vowels", "source": "word that starts with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4227", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with at most two letter", "source": "number that starts with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4305", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with two lowercase letter", "source": "word that starts with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4351", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number begins with no more than two letters", "source": "number that starts with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4412", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with at most two vowel", "source": "number that starts with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4436", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with two vowels", "source": "word that starts with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4461", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with two character", "source": "number that starts with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4484", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number begins with no more than two capital letters", "source": "number that starts with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4544", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with at most 2 letters", "source": "word that starts with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4588", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at most two vowel", "source": "word that starts with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4616", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with two numbers", "source": "word that starts with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4636", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is the alphanumeric that begins with two or more characters", "source": "number that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4651", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at most two lowercase letter", "source": "word that starts with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4690", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with two or less lowercase letters", "source": "word that starts with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4696", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with no more than two lowercase letters", "source": "word that starts with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4802", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at least two letter", "source": "word that starts with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4920", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that starts with at most two numbers", "source": "number that starts with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5052", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with two capital letters", "source": "word that starts with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5057", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "begin a number with no more than two numbers", "source": "number that starts with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5094", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with 2 digits", "source": "number that starts with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5135", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number beginning with any two characters", "source": "number that starts with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5182", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at most two digit", "source": "word that starts with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5310", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number begun with two words or less", "source": "number that starts with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5366", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with two digits or less", "source": "word that starts with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5443", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with at most two digit", "source": "number that starts with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5470", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number beginning with no more than two characters", "source": "number that starts with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5475", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with two capital letters", "source": "word that starts with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5527", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with at most two numbers", "source": "number that starts with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5548", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at least two vowel", "source": "word that starts with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5613", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "is there a numeral that commences with two digits at the most", "source": "number that starts with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5692", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at most two lowercase letter", "source": "word that starts with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5722", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a minimum of two vowels in the beginning", "source": "word that starts with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5736", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with at most 2 digits", "source": "number that starts with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5790", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starting with less than three digits", "source": "word that starts with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5791", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with no more than two digits", "source": "number that starts with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5830", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with two capital letters", "source": "word that starts with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5851", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with two or more lowercase letters", "source": "word that starts with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5963", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at most two letter", "source": "word that starts with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5981", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that initiate with two characters", "source": "number that starts with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6011", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a maximum of two capital letters", "source": "word that starts with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6018", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at most two number", "source": "word that starts with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6051", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with at least two character", "source": "number that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6126", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with any two characters", "source": "word that starts with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6137", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with at most two word", "source": "number that starts with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6149", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at most two word", "source": "word that starts with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6152", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that initiate with two or more digits", "source": "number that starts with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6174", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with at least two digit", "source": "number that starts with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6213", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "mention a word starting with two vowels", "source": "word that starts with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6259", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with two character", "source": "number that starts with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6266", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at most two number", "source": "word that starts with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6373", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that begins with at the most two capital letters", "source": "number that starts with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_65", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with at or less than two vowels", "source": "word that starts with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_81", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with at least two characters", "source": "number that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_112", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with two vowel", "source": "word that starts with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_277", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with at most two numbers", "source": "word that starts with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_314", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that starts with at most two vowels", "source": "number that starts with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_345", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with two or more digits", "source": "number that starts with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_395", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that begins with no more than two lowercase letters", "source": "number that starts with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_411", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with no more than two digits", "source": "word that starts with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_415", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with at most 2 character", "source": "word that starts with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_505", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any word that begins with a minimum of two vowels", "source": "word that starts with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_539", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with at least two letters", "source": "word that starts with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_550", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number begins wtwo characters maximum", "source": "number that starts with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_553", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with two and only two characters", "source": "number that starts with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_600", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with two letters and end any way", "source": "word that starts with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_609", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a double vowel", "source": "word that starts with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_612", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with a maximum of two capital letters", "source": "number that starts with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_616", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at most two word", "source": "word that starts with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_665", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the number cannot have more than two number within it", "source": "number that starts with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_680", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with three or less capital letters", "source": "word that starts with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_808", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with at least 2 lowercase letters", "source": "word that starts with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_823", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with two lower case letters", "source": "word that starts with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_844", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with at least 2 digits", "source": "number that starts with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_865", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at least two letter", "source": "word that starts with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_929", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with two or fewer capital letters", "source": "number that starts with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_943", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with two digit", "source": "number that starts with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1042", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with any two characters", "source": "word that starts with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1097", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with no more than two lowercase letters", "source": "word that starts with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1175", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with at least 2 characters", "source": "number that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1198", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has a maximum of two digits", "source": "number that starts with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1369", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with any two characters", "source": "number that starts with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1379", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number starting with two digits", "source": "number that starts with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1466", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with the most two capital letters", "source": "word that starts with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1471", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with no more than two numbers", "source": "word that starts with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1521", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with 2 letters", "source": "word that starts with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1582", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a line beginning with the word abc", "source": "line that starts with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3009", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word abc", "source": "line that starts with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3493", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that starts with the word  abc ", "source": "line that starts with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3710", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with the word abc and also starts with the word abc", "source": "line that starts with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_937", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "either the word abc or th number 123", "source": "the word `` abc '' or the number `` 123 ''", "target": "(call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_805", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "the number 123 or the word abc", "source": "the word `` abc '' or the number `` 123 ''", "target": "(call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_6037", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "number that begins with abc or a digit", "source": "number that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_266", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with 123 or a digit", "source": "number that starts with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_356", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what  word that starts with lowercase letter or digit", "source": "word that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_360", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel or a digit", "source": "word that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_387", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number begins with either a vowel or a digit", "source": "number that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_391", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter or a number as its beginning", "source": "word that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_664", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number begins with a letter or with a digit", "source": "number that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_677", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a letter or digit", "source": "word that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_761", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel or digit", "source": "word that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_897", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number beginning with either a character or a number", "source": "number that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_928", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a capital letter or a digit", "source": "word that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_931", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter or digit", "source": "word that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_949", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with capital letter or digit", "source": "number that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1067", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that starts with a lowercase letter or digit", "source": "number that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1131", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with either lowercase letter or digit", "source": "word that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1154", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with lowercase letter or digit", "source": "number that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1179", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "list numbers beginning with a vowel or a digit", "source": "number that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1437", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has either a digit or a vowel at the beginning", "source": "word that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1454", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a letter or number", "source": "word that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1533", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number begins with either 123 or with a digit", "source": "number that starts with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1547", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that had a digit or a character in the beginning", "source": "number that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1565", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with 123 or a digit", "source": "number that starts with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1624", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character or digit", "source": "word that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1625", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a character or a digit", "source": "word that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1638", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number with either a character or a digit at the beginning", "source": "number that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1664", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a capital letter or digit", "source": "word that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1680", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with lowercase letter or digit", "source": "number that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1724", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with any lowercase letter or a digit", "source": "number that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1861", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character or digit", "source": "number that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1872", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character or digit", "source": "word that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2162", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with either a lowercase letter or a digit", "source": "word that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2198", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word starts with either a number or a lowercase letter", "source": "word that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2516", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that starts with 123 or any other digit", "source": "number that starts with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2602", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with either a vowel or a digit", "source": "word that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2693", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with abc or a digit", "source": "word that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2695", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with vowel or digit", "source": "number that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2735", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a number or a vowel in the beginning", "source": "word that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2751", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with either a character or a digit", "source": "number that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3096", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a lowercase letter or digit", "source": "number that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3306", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with vowel or digit", "source": "number that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3504", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with letter or digit", "source": "number that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3543", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a letter or number", "source": "word that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3595", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a capital letter or digit", "source": "word that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3607", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a digit or abc", "source": "word that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3799", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a digit or vowel", "source": "word that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3968", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with a digit or else the string abc", "source": "number that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3979", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a vowel or digit", "source": "number that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3987", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a lowercase letter or digit", "source": "word that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4130", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with either a capital letter or a digit", "source": "word that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4320", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with capital letter or digit", "source": "number that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4343", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with either a lowercase letter or a digit", "source": "number that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4402", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter or digit", "source": "word that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4590", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a number or character", "source": "word that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4615", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a character or digit", "source": "number that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4641", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that start with either a digit or a capital letter", "source": "number that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4659", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that begins with either abc or with a digit", "source": "number that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4890", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning either with abc or a number", "source": "word that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5139", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with either a lowercase letter or a digit", "source": "word that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5179", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word with a character or digit at the beginning", "source": "word that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5331", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word thet begins with a capital letter or number", "source": "word that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5572", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that start with a digit or capital letters", "source": "number that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5665", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number begins with either a lowercase letter or a digitr", "source": "number that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5874", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a letter or digit", "source": "number that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5967", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with either a letter or digit", "source": "word that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6242", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has abc or digit at beginning", "source": "number that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6322", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with either a capital letter or a digit", "source": "number that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_80", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a digit", "source": "word that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_304", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  or digit", "source": "word that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_386", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a number or abc as its beginning", "source": "word that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_511", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  or digit", "source": "number that starts with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_517", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a character or digit", "source": "word that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_834", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a digit or   abc ", "source": "word that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_950", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with either a letter or a digit", "source": "number that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1045", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with one or more digits", "source": "number that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1230", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter or digit", "source": "word that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1252", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a capital letter or digit", "source": "number that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1303", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number begins with a vowel or digit", "source": "number that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1340", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a line that contains  abc  and a letter", "source": "line that contains `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_24", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a vowel in it", "source": "line that contains vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_90", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains a vowel within a vowel", "source": "line that contains vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_141", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes abc as well as a character", "source": "line that contains `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_177", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that contains character", "source": "line that contains lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_182", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a lowercase letter and have a lowercase letter", "source": "line that contains lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_232", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a letter and also have abc", "source": "line that contains letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_233", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line includes abc and vowel", "source": "line that contains vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_246", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that contains capital letter", "source": "line that contains capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_250", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that contains character", "source": "line that contains letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_272", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that contains capital letter", "source": "line that contains `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_291", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains the digits 123 and a vowel", "source": "line that contains `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_323", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line that contains character and that contains vowel", "source": "line that contains character and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_327", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a vowel and a capital letter", "source": "line that contains vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_364", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain a letter and number", "source": "line that contains letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_409", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a letter and a capital letter", "source": "line that contains letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_433", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a capital letter and abc both", "source": "line that contains capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_449", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and abc", "source": "line that contains capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_483", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a letter and also contains abc", "source": "line that contains letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_520", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a character in it", "source": "line that contains character and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_541", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses a lowercase letter along with 123", "source": "line that contains lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_556", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that contains capital letter", "source": "line that contains vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_564", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and a lower case letter", "source": "line that contains `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_580", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing abc as well as a character", "source": "line that contains `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_581", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains both a character and a lowercase letter", "source": "line that contains character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_598", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel as well as lowercase letters", "source": "line that contains vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_628", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have abc and have a vowel", "source": "line that contains `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_644", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has 123 in it and also has 123 in it", "source": "line that contains `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_681", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that contains  123 ", "source": "line that contains `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_719", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has character and also 123", "source": "line that contains character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_722", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains a capital letter", "source": "line that contains capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_727", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a vowel and the digit 123", "source": "line that contains vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_757", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that contains  123 ", "source": "line that contains character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_796", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes both a lowercase and capital letter", "source": "line that contains letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_800", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that contains character", "source": "line that contains capital letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_873", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains  123  and a lowercase letter", "source": "line that contains `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_888", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that contains vowel", "source": "line that contains capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_889", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and vowels", "source": "line that contains capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_920", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes 123 and also includes a letter", "source": "line that contains `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_974", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a capital letter and also has abc in it", "source": "line that contains capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_975", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing the numbers 123", "source": "line that contains `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_996", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and uses 123", "source": "line that contains vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1019", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and vowels", "source": "line that contains `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1046", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses characters and that uses lowercase letters", "source": "line that contains character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1049", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains 123 as well as a capital letter", "source": "line that contains `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1075", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that contains letter", "source": "line that contains capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1085", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that contains lowercase letter", "source": "line that contains capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1095", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains both a letter and a capital letter", "source": "line that contains letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1104", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that contains  abc ", "source": "line that contains letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1176", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that contains capital letter", "source": "line that contains capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1212", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and lowercase letters", "source": "line that contains capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1282", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a lowercase letter in it", "source": "line that contains lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1302", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a vowel and an uppercase letter", "source": "line that contains capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1332", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a vowel", "source": "line that contains vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1333", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and uses capital letters", "source": "line that contains `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1365", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that contains  abc ", "source": "line that contains character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1388", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains any letter and also contains a lowercase letter", "source": "line that contains letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1411", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that contains  123 ", "source": "line that contains vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1427", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has both letters and 123", "source": "line that contains letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1440", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line includes abc and that contains abc", "source": "line that contains `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1451", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a character and lowercase letter", "source": "line that contains lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1486", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using both a lowercase letter and a character", "source": "line that contains lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1503", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a letter and a vowel", "source": "line that contains letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1518", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses characters and capital letters", "source": "line that contains character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1544", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters and characters", "source": "line that contains letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1570", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a character", "source": "line that contains character and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1580", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a character and a lowercase letter", "source": "line that contains character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1581", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that contains character", "source": "line that contains `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1600", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that utilizes both a capital letter and 123", "source": "line that contains capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1632", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc in it and utilizes characters", "source": "line that contains character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1635", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains lowercase letters and characters", "source": "line that contains lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1758", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains both a character and a capital letter", "source": "line that contains character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1762", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with both a capital letter and a vowel", "source": "line that contains vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1767", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a character and also the number sequence 123", "source": "line that contains character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1776", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines contains letters and the word   abc ", "source": "line that contains `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1831", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that contains character", "source": "line that contains vowel and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1865", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains characters and   123 ", "source": "line that contains `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1891", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a capital letter and that includes a letter", "source": "line that contains capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1892", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a letter and a vowel", "source": "line that contains letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1899", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has a capital letter in it and also has a lowercase letter in it", "source": "line that contains capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1932", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a capital letter and 123", "source": "line that contains capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1967", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include capital letters", "source": "line that contains capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1978", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and letters", "source": "line that contains capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1983", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using both abc and a vowel", "source": "line that contains `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2009", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a lowercase letter and include the number sequence 123", "source": "line that contains lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2051", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with a vowel that also contains the number 123", "source": "line that contains `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2065", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that contains  abc ", "source": "line that contains capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2072", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains both a capital and a lowercase letter", "source": "line that contains capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2098", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a character and letter", "source": "line that contains character and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2111", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that contains  123 ", "source": "line that contains lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2174", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that contains lowercase letter", "source": "line that contains `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2184", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that contains lowercase letter", "source": "line that contains capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2201", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel and a character", "source": "line that contains vowel and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2206", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line conatins 123 and abc", "source": "line that contains `` 123 '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2208", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that uses both a character and any letter", "source": "line that contains letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2295", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "liines that have a capital letter and include a vowel", "source": "line that contains capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2315", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses a vowel and the sequence abc", "source": "line that contains `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2422", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a vowel and a letter", "source": "line that contains vowel and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2446", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including both a capital letter and the sequence 123", "source": "line that contains `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2485", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using both 123 and abc", "source": "line that contains `` 123 '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2500", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that contains  123 ", "source": "line that contains letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2559", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing 123 and a vowel", "source": "line that contains `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2581", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc and another lowercase letter if abc isnt lowercase", "source": "line that contains `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2597", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line uses lowercase and has abc in it", "source": "line that contains lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2616", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a capital letter as well as the smaller word abc", "source": "line that contains capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2618", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with many lowercase letters", "source": "line that contains lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2631", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that contains lowercase letter", "source": "line that contains `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2648", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that contains letter", "source": "line that contains character and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2659", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses lowercase letter and includes abc", "source": "line that contains lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2663", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a letter and a vowel", "source": "line that contains letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2664", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with letters and 123", "source": "line that contains letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2704", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with only vowels", "source": "line that contains vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2769", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that contains capital letter", "source": "line that contains character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2785", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a character and includes abc", "source": "line that contains character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2818", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have the number sequence 123 and include abc", "source": "line that contains `` 123 '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2828", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has a lowercase letter in it and also has a letter in it", "source": "line that contains lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2851", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that contains  abc ", "source": "line that contains vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2858", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that contains  123 ", "source": "line that contains `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2865", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and capital letters", "source": "line that contains vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2873", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has a lowercase letter in it and also has a character in it", "source": "line that contains lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2892", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that contains letter", "source": "line that contains capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2902", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that utilizes capital letters and also contains the numbers 123", "source": "line that contains capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2931", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "whats a line with both 123 and a vowel", "source": "line that contains vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2939", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line thta has 123 and has a letter", "source": "line that contains `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2958", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line includes 123 and uppercase letter", "source": "line that contains `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2984", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has a lowercase letter in it", "source": "line that contains lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2992", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains both abc and a character", "source": "line that contains `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3018", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that contains letter", "source": "line that contains lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3030", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters", "source": "line that contains lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3043", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that utilizes abc", "source": "line that contains `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3130", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a character", "source": "line that contains character and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3157", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses characters", "source": "line that contains character and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3161", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using both a character and a lowercase letter", "source": "line that contains character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3228", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes both a small letter and an uppercase letter", "source": "line that contains lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3250", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain a lowercase letter and 123", "source": "line that contains `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3281", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a letter with a letter", "source": "line that contains letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3325", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line utilizing both a capital letter and a character", "source": "line that contains capital letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3326", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing a capital letter and 123", "source": "line that contains capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3360", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters and capital letters", "source": "line that contains letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3409", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that contains vowel", "source": "line that contains vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3420", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that contains  123 ", "source": "line that contains capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3421", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing both a lowercase letter and abc", "source": "line that contains lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3444", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line contains both a lowercase letter and a vowel", "source": "line that contains vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3449", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "locate the line that has in it both a lowercase letter and the alphabetical sequence abcin it", "source": "line that contains `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3520", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains both a letter and 123", "source": "line that contains letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3533", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that contains letter", "source": "line that contains `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3560", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that contains lowercase letter", "source": "line that contains lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3563", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter as well as capital", "source": "line that contains lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3573", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a capital letter and with a lowercase letter", "source": "line that contains capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3603", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes 123 and taht includes a capital letter", "source": "line that contains `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3614", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing any character that is capitalized", "source": "line that contains capital letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3626", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels but also lowercase letters", "source": "line that contains vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3655", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains both abc and a capital letter", "source": "line that contains `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3708", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have both vowels and characters within them", "source": "line that contains vowel and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3720", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that contains lowercase letter", "source": "line that contains character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3725", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains 123 and a vowel", "source": "line that contains `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3751", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel along with a word with a capital letter", "source": "line that contains vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3755", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that contains  abc ", "source": "line that contains letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3762", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that contains  abc ", "source": "line that contains `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3792", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has a letter and a capital letter", "source": "line that contains capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3810", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines containing a vowel in addition to another character", "source": "line that contains character and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3832", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters and lowercase letters", "source": "line that contains letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3918", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a vowel and that contains abc", "source": "line that contains vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3928", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have both a letter and a lowercase letter", "source": "line that contains letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3975", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line contains the word abc as well as a capital letter", "source": "line that contains `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4031", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has letters abc within it", "source": "line that contains `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4177", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with abc in it", "source": "line that contains vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4185", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a character and also have a vowel", "source": "line that contains character and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4220", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain a vowel and abc", "source": "line that contains vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4330", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a capital better and  123 ", "source": "line that contains capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4345", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains any vowel as well as the word abc", "source": "line that contains vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4403", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses 123 and lowercase letters", "source": "line that contains `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4423", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a capital letter and lowercase letter", "source": "line that contains capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4449", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that containsabc and has a letter", "source": "line that contains `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4458", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a letter and also includes abc", "source": "line that contains letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4469", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that contains capital letter", "source": "line that contains lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4490", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line where both a letter and a character appear", "source": "line that contains letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4532", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that contains character", "source": "line that contains lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4589", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that contains letter", "source": "line that contains character and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4611", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that contains vowel", "source": "line that contains `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4613", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a letter and a lowercase letter", "source": "line that contains letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4623", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a character in them and also contain letters", "source": "line that contains character and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4631", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "abc on a line with a lowercase letter", "source": "line that contains `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4681", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses a character and vowel in it", "source": "line that contains character and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4694", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with a letter in it anywhere", "source": "line that contains letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4756", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line includes character and capitalized letter", "source": "line that contains character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4766", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a vowel and the number sequence 123", "source": "line that contains vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4797", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line includes uppercase letter and character", "source": "line that contains capital letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4805", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc and a capital letter", "source": "line that contains `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4825", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains abc and 123", "source": "line that contains `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4854", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that contains letter", "source": "line that contains vowel and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4967", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a lowercase letter and a vowel", "source": "line that contains lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4995", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain both a lowercase letter and a vowel", "source": "line that contains lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5078", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and that contains any character", "source": "line that contains `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5079", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines containing abc and at least one capital letter", "source": "line that contains capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5082", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc in it", "source": "line that contains `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5101", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has abc in it and also has abc in it", "source": "line that contains `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5175", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and has capital letters", "source": "line that contains lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5186", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a letter and a vowel", "source": "line that contains letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5192", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a capital letter as well as a vowel", "source": "line that contains capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5251", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains abc and 123", "source": "line that contains `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5270", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that contains character", "source": "line that contains character and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5274", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a vowel and that includes a vowel", "source": "line that contains vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5318", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using both a capital letter and a letter", "source": "line that contains capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5358", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and 123", "source": "line that contains lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5410", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a vowel and lowercase letter in it", "source": "line that contains vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5530", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "this line has lowercase letters and characters", "source": "line that contains character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5566", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that contains letter", "source": "line that contains lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5589", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses any character and also has a vowel", "source": "line that contains vowel and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5592", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a lowercase letter and that includes a capital letter", "source": "line that contains lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5616", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that contains letter", "source": "line that contains letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5619", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain both a character and abc", "source": "line that contains character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5644", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that appears to have vowels and 123", "source": "line that contains vowel and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5648", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using both a letter and 123", "source": "line that contains letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5661", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a vowel and a character", "source": "line that contains vowel and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5672", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses characters and letters", "source": "line that contains character and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5735", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and that includes a vowel", "source": "line that contains `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5745", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains alowercase letter that includes abc", "source": "line that contains lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5776", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and letters", "source": "line that contains vowel and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5801", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a letter and the number 123", "source": "line that contains letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5812", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a character and that includes a vowel", "source": "line that contains character and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5824", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has multiple abcs in it", "source": "line that contains `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5840", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a 123 in it", "source": "line that contains `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5846", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with letters including abc", "source": "line that contains `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5857", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have both abc as well as 123 within", "source": "line that contains `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5883", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains characters and capital letters", "source": "line that contains character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5891", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains lower case letter and  123 ", "source": "line that contains lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5922", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses characters and vowels", "source": "line that contains character and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5975", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that contains letter", "source": "line that contains `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5999", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a letter", "source": "line that contains letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6005", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a capital letter and vowel in it", "source": "line that contains capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6035", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a vowel", "source": "line that contains vowel and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6068", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a character and a letter", "source": "line that contains character and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6102", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a capital letter and a vowel on a singular line", "source": "line that contains vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_6113", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have 123 and also includes a letter", "source": "line that contains `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6163", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with a lowercase letter and at least one vowel", "source": "line that contains lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6292", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with capital letter and at least one other character", "source": "line that contains capital letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6328", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines have a character and the word abc", "source": "line that contains `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6332", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including 123 and a character", "source": "line that contains `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_2", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains both vowels and letters", "source": "line that contains vowel and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_43", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have exclusively characters", "source": "line that contains character and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_53", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that contains capital letter", "source": "line that contains lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_169", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a lower and uppercase letter", "source": "line that contains lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_171", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing characters as well as the number 123", "source": "line that contains character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_215", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that contains letter", "source": "line that contains letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_223", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that contains vowel", "source": "line that contains `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_248", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using lowercase vowel", "source": "line that contains vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_251", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has both a lowercase letter and 123", "source": "line that contains lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_260", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with the sequence 123 and other characters as well", "source": "line that contains character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_287", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that contains capital letter", "source": "line that contains letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_328", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that contains  abc ", "source": "line that contains capital letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_342", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that contains  123 ", "source": "line that contains capital letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_346", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that utilizes both a vowel and a letter", "source": "line that contains vowel and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_353", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that contains lowercase letter", "source": "line that contains lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_394", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line must have a capital letter somewhere within it", "source": "line that contains letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_402", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains letters and characters", "source": "line that contains letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_440", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters", "source": "line that contains letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_477", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that contains vowel", "source": "line that contains capital letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_486", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes 123 and also a capital letter", "source": "line that contains `` 123 '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_508", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that contains character", "source": "line that contains vowel and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_531", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that contains lowercase letter", "source": "line that contains vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_564", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that contains  123 ", "source": "line that contains `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_588", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that  includes 123  and a character", "source": "line that contains `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_607", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain 123 and also have abc in them", "source": "line that contains `` 123 '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_666", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with capital letters", "source": "line that contains capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_669", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a word abc and the number line 123", "source": "line that contains `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_677", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that contains lowercase letter", "source": "line that contains letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_714", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that contains lowercase letter", "source": "line that contains vowel and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_726", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters", "source": "line that contains capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_753", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines containing abc a some lowercase letter", "source": "line that contains lowercase letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_764", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and lowercase letters", "source": "line that contains `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_800", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing both a lowercase letter and a vowel", "source": "line that contains lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_803", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc in it", "source": "line that contains letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_809", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a letter and a character", "source": "line that contains letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_855", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains both 123 and a character", "source": "line that contains `` 123 '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_876", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using 123 and a letter", "source": "line that contains `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_887", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that contains lowercase letter", "source": "line that contains `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_891", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with a lowercase letter and other letters", "source": "line that contains letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_894", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have characters and letters", "source": "line that contains character and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_905", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a lowercase letter", "source": "line that contains lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_924", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with both the number 123 and a letter", "source": "line that contains `` 123 '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_959", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line utilizing any letter which must be capitalized", "source": "line that contains capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_996", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what  line that contains  123  and that contains lowercase letter", "source": "line that contains `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1000", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a lowercase letter and also have a vowel", "source": "line that contains lowercase letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1002", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that contains capital letter", "source": "line that contains `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1027", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc and a character", "source": "line that contains character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1070", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that contains vowel", "source": "line that contains character and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1128", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that contains  123 ", "source": "line that contains letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1159", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a vowel and letter", "source": "line that contains vowel and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1260", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and abc", "source": "line that contains `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1286", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and uses characters", "source": "line that contains lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1292", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a capital letter", "source": "line that contains capital letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1298", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has the digits 123 as well as a lowercase letter", "source": "line that contains `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1314", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using 123 and lowercase letter", "source": "line that contains `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1438", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including both a vowel and the sequence 123", "source": "line that contains `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1439", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using 123 in it", "source": "line that contains character and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1473", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that contains vowel", "source": "line that contains `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1531", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines containing abc", "source": "line that contains letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1544", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that contains capital letter", "source": "line that contains character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1565", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and letters", "source": "line that contains lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1583", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that ends with the word  abc ", "source": "line that starts with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4580", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin and end with the word abc", "source": "line that starts with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5482", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts and ends with abc", "source": "line that starts with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5750", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that do not begin with abc", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_154", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that isnt begun with abc", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_1026", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not starts with the word  abc ", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_1779", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not start with the phase abc", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_3724", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "what is a line that does not begin with the word abc", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_5333", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not have abc as its beginning", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_test_1485", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that not only contain the word abc but also start with the word", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2066", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc at the beginning", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2316", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that starts with the word  abc ", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2624", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contains and starts with the word abc", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3174", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line where abc appears at both the beginning and again later", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3464", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has the word abc in it and also begins with the word abc", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4451", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that starts with the word  abc ", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4619", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "number without abc", "source": "number that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_19", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word not containing any lowercase letters", "source": "word that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_91", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not contain a lowercase letter", "source": "word that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_114", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word that not contains  abc ", "source": "word that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_162", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not contain a vowel", "source": "number that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_253", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number without abc in it", "source": "number that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_300", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains  abc ", "source": "number that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_320", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not include 123", "source": "word that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_328", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not contain a vowel", "source": "word that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_506", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that does not use 123", "source": "word that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_584", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not contain the smaller word abc", "source": "number that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_750", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not include 123", "source": "word that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_876", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not have abc", "source": "word that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1139", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word not using capital letters", "source": "word that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1184", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not include abc", "source": "number that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1275", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not have vowels", "source": "word that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1315", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not have a vowel within it", "source": "number that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1349", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not use letters", "source": "number that not contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1629", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not include an uppercase letter", "source": "word that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1787", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not include a capital letter", "source": "number that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1897", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not contains capital letter", "source": "word that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2002", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has no capitals", "source": "word that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2039", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not contain 123", "source": "number that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2170", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word not using abc", "source": "word that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2216", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "are there numbers that dont have any lowercase letters", "source": "number that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2311", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not contain letters", "source": "number that not contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2479", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with only uppercase", "source": "word that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2863", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not contain  123 ", "source": "word that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2904", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not contains lowercase letter", "source": "word that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2925", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not contain the numbers 1 2 or 3 or the symbol ", "source": "word that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2991", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that excludes the series 123", "source": "number that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3002", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number without a single capital letter in it", "source": "number that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3139", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not use 123", "source": "number that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3233", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that only contains consonants", "source": "word that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3702", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains letter", "source": "number that not contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3761", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word that not contains  123 ", "source": "word that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3954", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "should be a number do not include any lowercase letters", "source": "number that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4133", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not utilize a lowercase letter", "source": "word that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4151", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what numbers do not contain letters", "source": "number that not contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4249", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains  123 ", "source": "number that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4371", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not have a vowel", "source": "word that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4479", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains  123 ", "source": "number that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4558", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not have abc in it", "source": "word that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4561", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not include a capital letter", "source": "number that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4774", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words lacking capitals", "source": "word that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4901", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that does not have abc in it", "source": "number that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5473", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number without a vowel in it", "source": "number that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5522", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains capital letter", "source": "number that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5645", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not have a lowercase letter", "source": "number that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5744", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number without 123", "source": "number that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5814", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word not using a vowel", "source": "word that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5835", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not have a capital letter", "source": "number that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5956", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not contain a lowercase letter", "source": "word that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6366", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not have 123", "source": "number that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_26", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not contains  123 ", "source": "word that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_442", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not use capital letters", "source": "number that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_455", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not have a letter", "source": "number that not contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_554", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains capital letter", "source": "number that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_903", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word without capital letters", "source": "word that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1054", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not have a vowel", "source": "number that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1450", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a line beginning with a letter followed by the number 123", "source": "line that starts with letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_53", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that begins with abc after a digit", "source": "line that starts with the word `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_696", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with vowel before the number  123 ", "source": "line that starts with vowel before the number `` 123 ''", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_778", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with vowel before the number  123 ", "source": "line that starts with vowel before the number `` 123 ''", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_852", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a lowercase letter that is before the number 123", "source": "line that starts with lowercase letter before the number `` 123 ''", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1234", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has a capital letter in the beginning", "source": "line that starts with capital letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1280", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with  123  before the number  123 ", "source": "line that starts with `` 123 '' before the number `` 123 ''", "target": "(call + (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1339", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that begins with a lowercase letter then 123", "source": "line that starts with lowercase letter before the number `` 123 ''", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1474", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line with a letter and 123 at the beginning", "source": "line that starts with letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2108", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line begins with 123 followed by a lowercase letter", "source": "line that starts with lowercase letter before the number `` 123 ''", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2133", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line commences wcharacter then numerals 123", "source": "line that starts with character before the number `` 123 ''", "target": "(call + (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2219", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that begins with capital letter before the number  123 ", "source": "line that starts with capital letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2226", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with the word  abc  after digit", "source": "line that starts with the word `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2487", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with character before the number  123 ", "source": "line that starts with character before the number `` 123 ''", "target": "(call + (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2511", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line beginning with a capital letter followed by 123", "source": "line that starts with capital letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2580", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with letter before the number  123 ", "source": "line that starts with letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2640", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that starts with any characters before the numbers 123", "source": "line that starts with character before the number `` 123 ''", "target": "(call + (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2644", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that start with the letter sequence abc directly after a digit", "source": "line that starts with the word `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2894", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with  abc  before the number  123 ", "source": "line that starts with `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3141", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that begins with the alphabets abc  before the digits 123", "source": "line that starts with `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3738", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line beginning with a character followed by 123", "source": "line that starts with character before the number `` 123 ''", "target": "(call + (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3899", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that starts with the word abc before the number 123", "source": "line that starts with `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4016", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with any letter followed by the number 123", "source": "line that starts with letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4077", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with  abc  before the number  123 ", "source": "line that starts with `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4157", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a letter before 123", "source": "line that starts with letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4232", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that starts with a capital letter before 123", "source": "line that starts with capital letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4456", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with abc then 123", "source": "line that starts with `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4852", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has the word abc in the beginning after a number", "source": "line that starts with the word `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4991", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "find the line that has two repetitions of the sequence 123 both of which occur at the beginning", "source": "line that starts with `` 123 '' before the number `` 123 ''", "target": "(call + (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5004", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that begins with 123 that is before a 123", "source": "line that starts with `` 123 '' before the number `` 123 ''", "target": "(call + (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5020", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line commences wdigit then abc word", "source": "line that starts with the word `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5090", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line beginning with abc followed by 123", "source": "line that starts with `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5218", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line beginning with a lowercase letter followed by the number 123", "source": "line that starts with lowercase letter before the number `` 123 ''", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5398", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that begins with the digit 123 after the number123", "source": "line that starts with `` 123 '' before the number `` 123 ''", "target": "(call + (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5406", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that start some letter then 123", "source": "line that starts with letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5597", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that begins with a vowel before 123", "source": "line that starts with vowel before the number `` 123 ''", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5657", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with a capital letter and before the number 1 2 or 3", "source": "line that starts with capital letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5912", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line beginning with 123 before itself", "source": "line that starts with `` 123 '' before the number `` 123 ''", "target": "(call + (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_6080", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with  123  before the number  123 ", "source": "line that starts with `` 123 '' before the number `` 123 ''", "target": "(call + (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_6346", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line begins with a character followed by 123", "source": "line that starts with character before the number `` 123 ''", "target": "(call + (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_6350", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that begin with a vowel before the digits 123", "source": "line that starts with vowel before the number `` 123 ''", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_145", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "what lines begins with a character and contains  abc  after", "source": "line that starts with character before the number `` 123 ''", "target": "(call + (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_311", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with capital letter before the number  123 ", "source": "line that starts with capital letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_378", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has the digit 123 after a vowel", "source": "line that starts with vowel before the number `` 123 ''", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_389", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with the word  abc  after digit", "source": "line that starts with the word `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_629", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with capital letter before the number  123 ", "source": "line that starts with capital letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_801", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a vowel that is before 123", "source": "line that starts with vowel before the number `` 123 ''", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_961", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line beginning with abc followed by the number 123", "source": "line that starts with `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_988", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has the digit 123 after the beginning letter which is in lowercase", "source": "line that starts with lowercase letter before the number `` 123 ''", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_1186", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that initiate with a vowel right before the number sequence 123", "source": "line that starts with vowel before the number `` 123 ''", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_1522", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "numbers that starts with the word abc or any digits", "source": "number that starts with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_484", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number starting on a digit or the short series abc", "source": "number that starts with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_599", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with thee word abc or a digit", "source": "number that starts with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_834", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with the word  abc  or digit", "source": "number that starts with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_286", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number starts with word abc or digit", "source": "number that starts with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_382", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number preceded by the word abc or a digit", "source": "number that starts with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_561", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that contains either 123 or a digit", "source": "line that contains `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_101", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that has a vowel or a digit", "source": "line that contains vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_159", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains any lowercase letter or a digit", "source": "line that contains lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_654", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that include either a character or digit", "source": "line that contains character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_781", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line with 123 or any other digit", "source": "line that contains `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_806", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "which line has a capital letter or a digit in it", "source": "line that contains capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_891", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains character or digit", "source": "line that contains character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1047", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains vowel or digit", "source": "line that contains vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1100", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains  123  or digit", "source": "line that contains `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1216", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that include a letter or a digit", "source": "line that contains letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1561", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines with either letters or digits", "source": "line that contains letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1975", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that includes a lowercase letter or digit", "source": "line that contains lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1980", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  or digit", "source": "line that contains `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_2023", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains capital letter or digit", "source": "line that contains capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_2166", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that includes a number or123", "source": "line that contains `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_2506", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that uses the number 123 or any digits", "source": "line that contains `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_2526", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that have a capital letter or a digit", "source": "line that contains capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3132", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that has a number or big letter", "source": "line that contains capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3245", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that includes a letter or a digit", "source": "line that contains letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3670", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains letter or digit", "source": "line that contains letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3758", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line  which has a number or a letter", "source": "line that contains letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3995", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  or digit", "source": "line that contains `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_4286", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line using either a vowel or a digit", "source": "line that contains vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_4684", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line contains either a lowercase letter or digit", "source": "line that contains lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_4695", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line containing either a letter or a digit", "source": "line that contains letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_4776", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that uses characters or digits", "source": "line that contains character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_4815", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that includes a vowel or a digit", "source": "line that contains vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_4937", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line with a capital letter or digit in it", "source": "line that contains capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5009", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that has abc or any digit", "source": "line that contains `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5319", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that include lowercase letters or digits", "source": "line that contains lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5428", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that include the letter phase abc or a digit", "source": "line that contains `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5617", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that utilize a vowel or a number", "source": "line that contains vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5624", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "linwa rhat contain either a character or a digit", "source": "line that contains character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5626", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line with a character or digit in it", "source": "line that contains character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5724", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that includes a character or a digit", "source": "line that contains character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5910", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines containing digits or abc", "source": "line that contains `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_6023", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains  123  or digit", "source": "line that contains `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_6304", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that has abc or a digit within it", "source": "line that contains `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_6372", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line has a number or a vowel", "source": "line that contains vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_116", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains letter or digit", "source": "line that contains letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_166", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that has a lowercase letter or digit", "source": "line that contains lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_323", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that includes a capital letter or a digit", "source": "line that contains capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_791", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that uses the word abc or any digits", "source": "line that contains `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_806", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that includes 123 or any digit", "source": "line that contains `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_1011", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains character or digit", "source": "line that contains character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_1541", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that concludes with two letters", "source": "line that ends with two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_33", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with no more than two words", "source": "line that ends with at most two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_52", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending in two vowels", "source": "line that ends with two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_113", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line ends with a least two vowels", "source": "line that ends with at least two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_166", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines with two words or less", "source": "line that ends with at most two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_305", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that ends with two characters", "source": "line that ends with two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_318", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with no more than two letters", "source": "line that ends with at most two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_352", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two capital letter", "source": "line that ends with at least two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_367", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with two words", "source": "line that ends with two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_392", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that comes to an end with a minimum of two letters", "source": "line that ends with at least two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_456", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending two or more digits", "source": "line that ends with at least two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_467", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two capital letter", "source": "line that ends with two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_697", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with one or two numbers", "source": "line that ends with at most two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_861", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that concludes with at least two words", "source": "line that ends with at least two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_865", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with a minimum of two vowels", "source": "line that ends with at least two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_915", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begins with at most 2 words", "source": "line that ends with at most two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_973", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes with two characters at most", "source": "line that ends with at most two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_1053", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two number", "source": "line that ends with two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1084", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ends with two characters", "source": "line that ends with two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1108", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that conclude with two lowercase letters", "source": "line that ends with two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1110", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line terminating with no fewer than two numbers", "source": "line that ends with at least two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1136", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with two digits", "source": "line that ends with two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1149", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops after 2 numbers", "source": "line that ends with two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1181", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two vowel", "source": "line that ends with at least two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1370", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops with at least 2 vowels", "source": "line that ends with at least two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1381", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two digit", "source": "line that ends with two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1412", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what is a line that ends with two letters", "source": "line that ends with two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1421", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two word", "source": "line that ends with at least two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1424", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with two digits", "source": "line that ends with two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1461", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with no fewer than two vowels", "source": "line that ends with at least two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1702", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line ends with two vowels", "source": "line that ends with two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1747", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what lines end with two or more digits", "source": "line that ends with at least two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1757", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that comes to an end with a maximum of two words", "source": "line that ends with at most two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_1791", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes with two capital letters", "source": "line that ends with two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1803", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that concludes with two vowels", "source": "line that ends with two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1812", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with no more than two vowels", "source": "line that ends with at most two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_1922", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "two vowels terminate the line", "source": "line that ends with two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1999", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two character", "source": "line that ends with at least two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2022", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with two or more words", "source": "line that ends with at least two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2091", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that ends with at least two characters", "source": "line that ends with at least two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2196", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "the line must finish off with two capital letters", "source": "line that ends with at least two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2241", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with two or more lowercase letters", "source": "line that ends with at least two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2256", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that end with at least two vowels", "source": "line that ends with at least two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2307", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that contains at least two numbers at the end", "source": "line that ends with at least two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2339", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two letter", "source": "line that ends with at least two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2353", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two word", "source": "line that ends with two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2355", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that comes to an end with two uppercase letters", "source": "line that ends with at most two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_2459", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two lowercase letter", "source": "line that ends with at most two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_2496", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two letter", "source": "line that ends with two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2539", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two digit", "source": "line that ends with at most two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_2540", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops after at least 2 lowercase letters", "source": "line that ends with at least two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2542", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two character", "source": "line that ends with at least two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2548", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "no fewer than two capital letters should end that line", "source": "line that ends with at least two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2558", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops after at least 2 capital letters", "source": "line that ends with at least two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2612", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that has at least two digits at the end", "source": "line that ends with at least two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2637", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with two or more characters", "source": "line that ends with at least two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2686", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line where two numbers appear at the end", "source": "line that ends with two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2700", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that terminates with two capital letters", "source": "line that ends with two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2741", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two letter", "source": "line that ends with at most two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_2742", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that stops with any two digits or less", "source": "line that ends with at most two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_2747", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which line finishes with two numbers", "source": "line that ends with two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2815", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two number", "source": "line that ends with two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2981", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines ending with two or more digits", "source": "line that ends with at least two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3069", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes with two numbers", "source": "line that ends with two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3091", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begin with two or more letters", "source": "line that ends with at least two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3104", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that has two letters at the end", "source": "line that ends with two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3131", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two character", "source": "line that ends with at most two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3151", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with two or more lowercase letters", "source": "line that ends with at least two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3219", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes with two words", "source": "line that ends with two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3280", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ends with a minimum of two words", "source": "line that ends with at least two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3309", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two word", "source": "line that ends with at most two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3407", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that end with two words", "source": "line that ends with two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3418", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that end with no more than two digits", "source": "line that ends with at most two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3423", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line with three or more characters", "source": "line that ends with at most two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3455", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line concludes with two vowels maximum", "source": "line that ends with at most two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3575", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line with two lowercase letters at the end", "source": "line that ends with two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3593", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with two capital letters", "source": "line that ends with two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3680", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes with at least two capital  letters", "source": "line that ends with at least two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3728", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops after 2 words", "source": "line that ends with two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3775", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that terminates with two words", "source": "line that ends with two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3785", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line with two or more characters", "source": "line that ends with at least two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3807", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what is a line that ends with two letters at the most at the end", "source": "line that ends with at most two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3852", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that end with no more than two vowels", "source": "line that ends with at most two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3938", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops after at least 2 characters", "source": "line that ends with at least two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3957", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops with at most 2 capital letters", "source": "line that ends with at most two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_4075", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that ends with at least two capital letters", "source": "line that ends with at least two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4089", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two digit", "source": "line that ends with two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_4229", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line with two letters at the end", "source": "line that ends with two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_4494", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two vowel", "source": "line that ends with at least two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4531", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that has two or more numbers at the end", "source": "line that ends with at least two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4666", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that ends with no more than two capital letters", "source": "line that ends with at most two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_4687", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops with 2 digits", "source": "line that ends with two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_4701", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that has at least two lowercase letter at the end", "source": "line that ends with at most two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_4708", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines with two digits or less", "source": "line that ends with at most two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_4717", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line of words with the last two to end with lowercase letters", "source": "line that ends with two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_4735", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two or fewer numbers", "source": "line that ends with at most two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_4739", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that comes to an end with two characters", "source": "line that ends with two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_4850", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes with two or more lowercase characters", "source": "line that ends with at least two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4907", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines with two or fewer lowercase letters", "source": "line that ends with at most two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5003", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two lowercase letter", "source": "line that ends with at least two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5021", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two word", "source": "line that ends with at most two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5060", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line with has two characters or less at the end", "source": "line that ends with at most two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5073", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line ends with two or more different letters", "source": "line that ends with at least two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5092", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "the line needs to end with two capital letters", "source": "line that ends with two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_5138", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line ends with two numbers or less", "source": "line that ends with at most two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5255", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two lowercase letters", "source": "line that ends with two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_5313", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two characters", "source": "line that ends with two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_5377", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with one or two digits", "source": "line that ends with at most two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5389", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending two or more numbers", "source": "line that ends with at least two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5447", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with two letters", "source": "line that ends with two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_5461", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes with at most two numbers", "source": "line that ends with at most two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5462", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two character", "source": "line that ends with at most two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5477", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops after at least 2 words", "source": "line that ends with at least two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5491", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops with at least 2 letters", "source": "line that ends with at least two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5494", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes with two or more characters", "source": "line that ends with at least two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5505", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line has at least two lowercase letters at the end", "source": "line that ends with at least two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5652", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with no more than two capital letters", "source": "line that ends with at most two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5668", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two capital letter", "source": "line that ends with at most two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5708", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that ends with no more than two lowercase letters", "source": "line that ends with at most two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5813", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what lines end with two characters", "source": "line that ends with two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_5852", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that end with two or more numbers", "source": "line that ends with at least two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5923", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with no more than two numbers", "source": "line that ends with at most two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_6046", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line ends with at least two digits", "source": "line that ends with at least two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_6092", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what ends with at least two words", "source": "line that ends with at least two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_6117", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with no more than two letters", "source": "line that ends with at most two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_6190", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with no more than two lowercase letters", "source": "line that ends with at most two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_5", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two digit", "source": "line that ends with at most two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_72", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that has two vowels or less at the end", "source": "line that ends with at most two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_184", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that terminate in no more than two words", "source": "line that ends with at most two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_186", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that terminates with two numbers", "source": "line that ends with two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_310", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that concludes with a maximum of two vowels", "source": "line that ends with at most two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_596", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two or less numbers", "source": "line that ends with at most two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_604", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two capital letter", "source": "line that ends with at most two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_727", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that have two numbers at the end", "source": "line that ends with two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_796", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with two or less capital letters", "source": "line that ends with at most two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_983", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that end with a word that is two letters or less", "source": "line that ends with at most two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1016", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with two letters or less", "source": "line that ends with at most two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1037", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two digit", "source": "line that ends with at least two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_1107", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops with at most 2 lowercase letter", "source": "line that ends with at most two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1169", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that is ended by any two lowercase letters", "source": "line that ends with two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_1187", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that ends with two vowels", "source": "line that ends with two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_1208", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two character", "source": "line that ends with two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_1306", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes at least two letters", "source": "line that ends with at least two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_1310", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line with two capital letters at the end", "source": "line that ends with two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_1460", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two vowel", "source": "line that ends with at most two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1474", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "the line ends with two consecutive digits", "source": "line that ends with two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_1478", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what is a line that ends with two characters at the most", "source": "line that ends with at most two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1484", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that is ended by two letters or less", "source": "line that ends with at most two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1577", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "word using either abc or digit", "source": "the word `` abc '' or digit", "target": "(call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_3507", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "word that ends with  abc  and that contains vowel", "source": "word that ends with `` abc '' and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ends with a capital letter", "source": "word that ends with capital letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_10", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that contains lowercase letter", "source": "word that ends with letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_38", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begun with any lowercase letter and uses abc somewhere", "source": "word that starts with lowercase letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_59", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with lowercase letter and contains  abc ", "source": "word that ends with lowercase letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_127", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with  123 ", "source": "number that ends with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_136", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a big letter that also has a letter", "source": "word that starts with capital letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_167", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that contains capital letter", "source": "word that starts with letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_185", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with abc", "source": "word that starts with character and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_228", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that contains lowercase letter", "source": "word that ends with lowercase letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_255", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a capital letter and uses vowels", "source": "word that ends with capital letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_258", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a character and that includes a lowercase letter", "source": "word that starts with character and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_273", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with abc and uses abc", "source": "word that ends with `` abc '' and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_284", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that contains vowel", "source": "word that ends with vowel and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_287", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that includes a character and has 123 at the end", "source": "number that ends with `` 123 '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_296", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with a letter and containing a character", "source": "word that ends with letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_306", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate with a vowel and include a capital letter", "source": "word that ends with vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_329", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number has 123 in the sequence and ends with any character", "source": "number that ends with character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_332", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that contains character", "source": "word that ends with `` abc '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_345", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with uppercase letters and has a vowel in it", "source": "word that starts with capital letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_351", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that contains vowel", "source": "word that starts with vowel and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_372", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a vowel and uses capital letters", "source": "word that ends with vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_379", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with letters including capital letters", "source": "word that ends with letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_396", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a letter and uses capital letter", "source": "word that starts with letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_436", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with and containing a lowercase letter", "source": "word that ends with lowercase letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_452", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a special character but also contains a capital letter", "source": "word that starts with character and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_481", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with abc and have capital letters", "source": "word that starts with `` abc '' and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_501", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with a vowel and uses a vowel", "source": "word that starts with vowel and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_511", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops and uses with a character", "source": "word that ends with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_514", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that contains lowercase letter", "source": "word that starts with character and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_536", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that uses abc and has a capital letter at the end", "source": "word that ends with capital letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_542", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a character and uses abc", "source": "word that ends with character and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_560", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a vowel and contains abc", "source": "word that ends with vowel and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_574", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that contains vowel", "source": "word that ends with character and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_587", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that contains  abc ", "source": "word that starts with character and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_609", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a letter and has a capital letter", "source": "word that ends with letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_613", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with a character at the end that include a capital letter", "source": "word that ends with character and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_630", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number contains   123  and ends with   123 ", "source": "number that ends with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_633", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc in the beginning", "source": "word that starts with `` abc '' and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_635", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that contains capital letter", "source": "word that ends with letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_661", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a letter and also has abc in it", "source": "word that starts with letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_668", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel at the end and includes a small letter", "source": "word that ends with vowel and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_704", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number both contains and ends with a character", "source": "number that ends with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_710", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a character and also have a capital letter", "source": "word that ends with character and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_716", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "state a word that starts with a character and has a vowel in it", "source": "word that starts with character and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_731", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and any characters", "source": "word that starts with `` abc '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_740", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that contains capital letter", "source": "word that ends with character and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_747", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a capital letter and has a letter", "source": "word that starts with capital letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_772", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a capital letter and has abc in it", "source": "word that starts with capital letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_785", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a character and have a lowercase letter in them", "source": "word that starts with character and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_789", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that contains vowel", "source": "word that ends with capital letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_791", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that contains vowel", "source": "word that starts with capital letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_820", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel and including a letter", "source": "word that starts with vowel and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_853", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word must begin with a letter and have a lowercase letter within the word", "source": "word that starts with letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_862", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with abc and uses characters", "source": "word that starts with `` abc '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_883", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a vowels and uses it too", "source": "word that ends with vowel and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_890", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the end of word should be vowel", "source": "word that ends with vowel and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_899", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that both contains a letter and begins with a character", "source": "word that starts with character and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_900", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a character", "source": "word that starts with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_901", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a vowel and have a lowercase letter", "source": "word that starts with vowel and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_925", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  and that contains  123 ", "source": "number that starts with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_938", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that contains  abc ", "source": "word that ends with letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_964", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that contains character", "source": "word that starts with `` abc '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_986", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "is there a word that a character in it and also finishes with a vowel", "source": "word that ends with vowel and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1009", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with a lowercase letter and have a vowel", "source": "word that starts with lowercase letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1013", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with the smaller word abc and containing capital letters", "source": "word that ends with `` abc '' and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1065", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with abc and uses vowel", "source": "word that ends with `` abc '' and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1081", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words start with abc and also have more lowercase letters", "source": "word that starts with `` abc '' and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1092", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with abc and also has another letter in it somewhere", "source": "word that ends with `` abc '' and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1115", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a lowercase letter and have a letter", "source": "word that ends with lowercase letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1134", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a capital letter and utilizes abc", "source": "word that starts with capital letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1170", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a smaller word abc", "source": "word that ends with `` abc '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1188", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a character at the beginning and middle", "source": "word that starts with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1189", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a capital letter and uses abc", "source": "word that starts with capital letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1190", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word starts with a letter and contains the letters a b and c", "source": "word that starts with letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1194", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has and starts with a character", "source": "number that starts with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1217", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that contains lowercase letter", "source": "word that ends with character and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1225", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with any character that has a vowel in it", "source": "word that ends with character and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1272", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a character and uses vowels", "source": "word that starts with character and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1279", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that initiate with a letter that is a vowel", "source": "word that starts with letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1308", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a capital letter a has a capital letter", "source": "word that starts with capital letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1351", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a capital letter and has a letter", "source": "word that ends with capital letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1378", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with 123 and has a character", "source": "number that starts with `` 123 '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1379", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that contains lowercase letter", "source": "word that ends with vowel and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1420", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a lowecase letter and has a character", "source": "word that starts with lowercase letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1439", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a letter and has a lowercase letter", "source": "word that starts with letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1444", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter and  abc  at its end", "source": "word that ends with `` abc '' and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1481", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a letter and containing abc", "source": "word that starts with letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1489", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has 123 at the beginning and has a character", "source": "number that starts with `` 123 '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1496", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that contains capital letter", "source": "word that ends with `` abc '' and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1502", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after 123 but also uses characters", "source": "number that ends with `` 123 '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1508", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that contains vowel", "source": "word that ends with letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1534", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a capital letter and that starts with a vowel", "source": "word that starts with vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1542", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that contains  abc ", "source": "word that starts with `` abc '' and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1590", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word commences wcharacter and is with abc", "source": "word that starts with character and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1622", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  and that contains  123 ", "source": "number that ends with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1623", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a digit that begins with a character and also contains 123", "source": "number that starts with character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1675", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that contains character", "source": "word that ends with vowel and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1687", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with lowercase letters", "source": "word that starts with letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1726", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a lowercase letter and using a lowercase letter", "source": "word that starts with lowercase letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1778", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a vowel and a lowercase letter", "source": "word that ends with vowel and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1786", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a lowercase letter and that ends with abc", "source": "word that ends with `` abc '' and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1794", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "use characters in the word and begin the word with a lowercase letter", "source": "word that starts with lowercase letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1797", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a line using any letter and ending with a lowercase letter", "source": "word that ends with lowercase letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1825", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a letter and ends with a vowel", "source": "word that ends with vowel and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1829", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that contains capital letter", "source": "word that ends with capital letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1842", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains a vowel and ends with a capital letter", "source": "word that ends with capital letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1884", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a letter and contains a letter", "source": "word that starts with letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1888", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that contains vowel", "source": "word that ends with lowercase letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1910", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that contains capital letter", "source": "word that ends with vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1912", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a character and contains it elsewhere", "source": "word that ends with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1926", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line has a capital letter within it and ends with any letter", "source": "word that ends with letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1948", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that contains letter", "source": "word that ends with letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1970", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using and ending with a vowel", "source": "word that ends with vowel and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1971", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a letter and also contains a letter", "source": "word that starts with letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1973", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a lowercase letter and has a capital", "source": "word that starts with lowercase letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2037", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a vowel and uses abc", "source": "word that ends with vowel and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2073", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a vowel and ending with a letter", "source": "word that ends with letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2106", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with abc in it and ends with a letter", "source": "word that ends with letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2146", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a capital letter and includes a character", "source": "word that ends with capital letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2176", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with the smaller word abc and contains any lowercase letter", "source": "word that ends with `` abc '' and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2181", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that contains a character and ends with a letter", "source": "word that ends with letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2186", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with abc an contains a letter", "source": "word that ends with `` abc '' and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2192", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with a lowercase letter at their end", "source": "word that ends with lowercase letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2280", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that  includes an uppercase letter and has a vowel at the end", "source": "word that ends with vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2306", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel and containing a lowercase letter", "source": "word that starts with vowel and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2309", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with abc and has a vowel within it", "source": "word that starts with `` abc '' and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2367", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that concludes with a lowercase letter and includes a capital letter", "source": "word that ends with lowercase letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2369", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that contains  abc ", "source": "word that ends with letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2374", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes the letter sequence abc and has a vowel at its end", "source": "word that ends with vowel and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2381", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that finish with the letter sequeence abc and have the smaller word abc in it", "source": "word that ends with `` abc '' and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2382", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a lowercase letter and containing a capital letter", "source": "word that starts with lowercase letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2395", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has abc in it but ends with a special character", "source": "word that ends with character and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2405", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after abc and uses letters", "source": "word that ends with `` abc '' and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2430", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that concludes with a vowel and includes a capital letter", "source": "word that ends with vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2436", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with capital letter and that includes a letter", "source": "word that ends with capital letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2464", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that contains character", "source": "word that ends with capital letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2469", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a vowel and that includes a letter", "source": "word that starts with vowel and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2474", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word including a character at its end with at least one character within it", "source": "word that ends with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2477", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends with any character and utilizes the digits 123", "source": "number that ends with character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2484", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins and ends with a vowel", "source": "word that ends with vowel and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2488", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with abc and also has abc in it", "source": "word that starts with `` abc '' and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2498", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that contains character", "source": "word that starts with lowercase letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2504", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a vowel in it but ends with any letter", "source": "word that ends with letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2517", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with a lowercase letter and contain a character", "source": "word that starts with lowercase letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2533", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that starts with 123 and also contains 123 within it", "source": "number that starts with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2537", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a small letter and has a character at the end", "source": "word that ends with character and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2544", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words beginning with a lowercase letter but also including a capital letter", "source": "word that starts with lowercase letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2554", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numebr that begins with a character that has 123", "source": "number that starts with character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2585", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a capital letter and uses character", "source": "word that ends with capital letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2598", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with lowercase letters and contains characters", "source": "word that ends with lowercase letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2617", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a vowel and uses characters", "source": "word that ends with vowel and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2638", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a char and that also has a big letter", "source": "word that ends with character and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2667", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that utilize a lowercase letter and end with a vowel", "source": "word that ends with vowel and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2668", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and have a character", "source": "word that starts with letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2715", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with abc and uses any characters", "source": "word that ends with `` abc '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2721", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains a character and ends with a capital letter", "source": "word that ends with capital letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2744", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that contains letter", "source": "word that ends with `` abc '' and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2761", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains abc and begins with a vowel", "source": "word that starts with vowel and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2776", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a character and has lowercase letters", "source": "word that ends with character and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2794", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter", "source": "word that ends with capital letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2799", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with any vowel and has a capital letter in it", "source": "word that starts with vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2805", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a character at the end and includes abc", "source": "word that ends with character and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2817", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with any letter and contains a lowercase letter", "source": "word that ends with letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2849", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter with abc", "source": "word that ends with capital letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2853", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word begininng with any lowercase letter and containing at least one vowel", "source": "word that starts with lowercase letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2869", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a vowel and that includes a capital letter", "source": "word that starts with vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2880", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "is there a numeral that begins with a character", "source": "number that starts with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2889", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that contains vowel", "source": "word that starts with `` abc '' and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2924", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with capital letters and have vowels", "source": "word that starts with capital letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3013", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with any vowel and has abc in it", "source": "word that starts with vowel and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3017", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a character and uses 123", "source": "number that starts with character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3021", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that contains capital letter", "source": "word that ends with lowercase letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3028", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number utilizes a character at the end", "source": "number that ends with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3036", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that contains letter", "source": "word that starts with lowercase letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3039", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a lowercase letter and contains the word abc", "source": "word that starts with lowercase letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3054", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a character but also has a lowercase letter", "source": "word that starts with character and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3064", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a lowercase letter and that includes a lowercase letter", "source": "word that starts with lowercase letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3070", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that contains lowercase letter", "source": "word that ends with `` abc '' and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3072", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that contains letter", "source": "word that starts with `` abc '' and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3093", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character and that contains character", "source": "number that ends with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3135", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter and have a letter", "source": "word that starts with capital letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3146", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with the word abc and uses a vowel", "source": "word that starts with `` abc '' and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3195", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc and ends with a lowercase letter", "source": "word that ends with lowercase letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3199", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a letter and has abc as its beginning", "source": "word that starts with `` abc '' and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3217", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that contains character", "source": "word that starts with capital letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3262", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and has a lowercase letter", "source": "word that starts with `` abc '' and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3275", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that contains character", "source": "word that ends with capital letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3287", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has the smaller word abc and ends in a capital letter", "source": "word that ends with capital letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3290", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a letter and includes abc", "source": "word that ends with letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3299", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes abc and begins with an uppercase letter", "source": "word that starts with capital letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3311", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts on a vowel that shows up somewhere else in the word", "source": "word that starts with vowel and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3315", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that use a vowel and end with a letter", "source": "word that ends with letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3333", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a lwoercase letter and has a vowel", "source": "word that ends with lowercase letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3364", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a capital letter which contains a vowel", "source": "word that starts with capital letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3379", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word has a lowercase letter but ends with an uppercase letter", "source": "word that ends with capital letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3399", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a vowel and have abc", "source": "word that starts with vowel and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3412", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and have a character", "source": "word that starts with `` abc '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3435", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that finishes with a character that has 123", "source": "number that ends with character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3436", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that contains vowel", "source": "word that ends with letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3441", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after 123 and uses 123", "source": "number that ends with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3442", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a lowercase letter and that includes a lowercase letter", "source": "word that ends with lowercase letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3472", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with abc and has a vowel", "source": "word that ends with `` abc '' and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3486", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that contains letter", "source": "word that ends with capital letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3525", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter in the beginning", "source": "word that starts with letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3546", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends with a capital letter and also has a lowercase letter in it", "source": "word that ends with capital letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3569", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number contains characters and ends with characters", "source": "number that ends with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3576", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending on a vowel and containing a letter", "source": "word that ends with vowel and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3653", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using abc and ending with a vowel", "source": "word that ends with vowel and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3705", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with the word abc and uses a capital letter", "source": "word that ends with `` abc '' and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3771", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that contains capital letter", "source": "word that starts with lowercase letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3774", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any word with a vowel that ends with abc", "source": "word that ends with `` abc '' and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3777", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins in a character and also has a vowel in it", "source": "word that starts with character and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3789", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter and have a lowercase letter", "source": "word that starts with capital letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3818", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning in lowercase that contains letters", "source": "word that starts with lowercase letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3872", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with the letters abc and also contains a lowercase letter", "source": "word that starts with `` abc '' and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3882", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a vowel and includes a character", "source": "word that starts with vowel and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3896", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a character and contains letters", "source": "word that starts with character and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3927", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that contains letter", "source": "word that ends with character and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3952", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with a vowel and uses letters", "source": "word that ends with vowel and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3953", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains a letter at the end", "source": "word that ends with letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3969", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that contains lowercase letter", "source": "word that starts with vowel and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3970", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with any character and has a capital letter in it", "source": "word that starts with character and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3971", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "locate a word beginning with a character and incorporating a vowel", "source": "word that starts with character and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3981", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that contains capital letter", "source": "word that starts with vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3986", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that uses a lowercase letter and ends with a letter", "source": "word that ends with letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4004", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that contains character", "source": "word that ends with `` abc '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4007", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a letter and contains lowercase letters", "source": "word that starts with letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4039", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc in it and a vowel to start", "source": "word that starts with vowel and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4047", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with a letter and uses characters", "source": "word that starts with letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4053", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that includes 123 and has 123 in the beginning", "source": "number that starts with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4099", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with and contains a character", "source": "word that starts with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4129", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that ends in 123 and also has a character in it", "source": "number that ends with `` 123 '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4132", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends with a lowercase letter and also has a character in it", "source": "word that ends with lowercase letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4156", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a lowercase letter and contains a vowel", "source": "word that ends with lowercase letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4169", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that contains vowel", "source": "word that ends with capital letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4173", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with a vowel that end in abc", "source": "word that ends with `` abc '' and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4202", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  and that contains character", "source": "number that ends with `` 123 '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4206", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a letter", "source": "word that starts with letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4241", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a capital letter with at least one capital letter within it", "source": "word that starts with capital letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4267", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with end characters", "source": "word that ends with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4270", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that end with 123 and have 123", "source": "number that ends with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4289", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words contain lowercase letters ending with a capital letter", "source": "word that ends with capital letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4292", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that finsih with a letter and also have a letter in it", "source": "word that ends with letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4299", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter and include a lowercase letter", "source": "word that starts with capital letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4323", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word begins with a capital letter and also has a character in it", "source": "word that starts with capital letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4327", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel in the beginning and includes abc", "source": "word that starts with vowel and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4333", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a small letter and has abc in the beginning", "source": "word that starts with `` abc '' and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4366", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word includes vowel and concludes with character", "source": "word that ends with character and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4383", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains abc and ends with a letter", "source": "word that ends with letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4398", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins wsmall letter and includes vowel", "source": "word that starts with lowercase letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4405", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words which have abc and starts with a character", "source": "word that starts with character and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4416", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that contains letter", "source": "word that ends with vowel and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4419", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with a capital letter and utilizes the letters abc", "source": "word that ends with capital letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4468", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that contains  abc ", "source": "word that starts with vowel and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4488", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with and containing a lowercase letter", "source": "word that starts with lowercase letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4511", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with the smaller word abc and also have abc", "source": "word that starts with `` abc '' and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4515", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that contains  abc ", "source": "word that ends with `` abc '' and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4517", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that also contains a capital letter", "source": "word that ends with character and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4530", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends in a lowercase letter and also has a lowercase letter in it", "source": "word that ends with lowercase letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4592", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number begins with 123", "source": "number that starts with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4643", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that contains letter", "source": "word that starts with character and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4660", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a capital letter and uses letters", "source": "word that ends with capital letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4675", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends and uses capital letters", "source": "word that ends with capital letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4679", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that contains capital letter", "source": "word that starts with capital letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4693", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that includes at least one character and begins with the sequence 123", "source": "number that starts with `` 123 '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4733", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a small letter and has a capital letter in the beginning", "source": "word that starts with capital letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4742", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that contains letter", "source": "word that starts with character and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4762", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word has a character and ends with any lowercase letter", "source": "word that ends with lowercase letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4773", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a letter and contains a lowercase letter", "source": "word that starts with letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4791", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what capitalized word has abc in it", "source": "word that starts with capital letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4793", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a letter and have a character", "source": "word that ends with letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4796", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that contains lowercase letter", "source": "word that ends with character and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4816", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains a character and starts with a lowercase letter", "source": "word that starts with lowercase letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4848", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starting with a vowel with a character in it somewhere", "source": "word that starts with vowel and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4862", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a vowel  and include a vowel", "source": "word that starts with vowel and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4864", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts has a capital letter and starts with a vowel", "source": "word that starts with vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4880", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word formed charecter and vowel", "source": "word that starts with vowel and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4884", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with abc and utilizes a lowercase letter", "source": "word that ends with `` abc '' and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4906", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that contains  abc ", "source": "word that ends with lowercase letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4930", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel and containing a character", "source": "word that starts with vowel and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4949", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with abc", "source": "word that ends with `` abc '' and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4951", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that contains character", "source": "word that starts with capital letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4974", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word containing lowercase letters and ending with a vowel", "source": "word that ends with vowel and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4977", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains vowels and ends with capital letters", "source": "word that ends with capital letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4979", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what numbers both end and otherwise have 123 in them", "source": "number that ends with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4989", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a lowercase letter", "source": "word that starts with lowercase letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4993", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letters and has vowels", "source": "word that ends with lowercase letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5019", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with a capital letter and uses characters", "source": "word that starts with capital letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5028", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number both begins wand includes character", "source": "number that starts with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5051", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number manifests w123 and also has 123", "source": "number that starts with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5075", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a lowercase letter and uses vowels", "source": "word that starts with lowercase letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5084", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a character and uses lowercase letters", "source": "word that ends with character and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5096", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is the number containing a character and ending with 123", "source": "number that ends with `` 123 '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5098", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with any character but also utilizes abc", "source": "word that starts with character and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5122", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word the begins with a capital letter and has a capital letter within the word", "source": "word that starts with capital letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5124", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after abc and uses characters", "source": "word that ends with `` abc '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5128", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that contains  abc ", "source": "word that ends with vowel and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5131", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number is it that begins with a character and also has 123 in it", "source": "number that starts with character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5136", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with any lowercase letter", "source": "word that starts with lowercase letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5142", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with abc and contains a capital letter", "source": "word that starts with `` abc '' and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5144", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and uses a capital letter", "source": "word that starts with `` abc '' and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5146", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a capital letter and that includes a capital letter", "source": "word that ends with capital letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5162", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that contains vowel", "source": "word that starts with `` abc '' and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5166", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains and ends with the smaller word abc", "source": "word that ends with `` abc '' and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5207", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with a character and uses letters", "source": "word that starts with character and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5223", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that contains lowercase letter", "source": "word that ends with vowel and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5235", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with any vowel and utilizes lowercase letters", "source": "word that ends with vowel and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5245", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that contains vowel", "source": "word that starts with character and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5247", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a lowercase letter and includes a character", "source": "word that ends with lowercase letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5260", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a capital letter and ending with a capital letter", "source": "word that ends with capital letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5263", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a lowercase letter and has a capital letter", "source": "word that ends with lowercase letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5277", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel and using a character", "source": "word that starts with vowel and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5293", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that contains character", "source": "word that starts with letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5306", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with a character and contains  123 ", "source": "number that starts with character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5315", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that conclude with a character and include the letter sequence abc", "source": "word that ends with character and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5321", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with a character and contains a lowercase letter", "source": "word that starts with character and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5325", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with lowercase letters and include the phase abc", "source": "word that starts with lowercase letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5332", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that contains  abc ", "source": "word that starts with capital letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5344", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes abc and has a character in the beginning", "source": "word that starts with character and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5383", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends in a character and also contains a vowel", "source": "word that ends with character and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5440", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a small letter in the beginning", "source": "word that starts with lowercase letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5450", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a letter and contains a capital letter", "source": "word that ends with letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5455", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that contains  abc ", "source": "word that ends with `` abc '' and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5488", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends and uses letters", "source": "word that ends with letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5493", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends with a lowercase letter and also has abc in it", "source": "word that ends with lowercase letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5497", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word includes small letter and concludes wletter", "source": "word that ends with letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5499", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a character and includes a vowel", "source": "word that ends with character and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5502", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with and containing a vowel", "source": "word that starts with vowel and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5503", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word both includes and concludes with character", "source": "word that ends with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5504", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words where a letter appears and end with a lowercase letter", "source": "word that ends with lowercase letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5509", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a letter and uses vowels", "source": "word that ends with letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5581", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with any letter and have a vowel in them", "source": "word that ends with letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5584", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a capital letter", "source": "word that starts with capital letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5633", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that contains vowel", "source": "word that starts with lowercase letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5635", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending in a vowel and containing abc", "source": "word that ends with vowel and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5654", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "use a vowel in the word and end it with a lowercase letter", "source": "word that ends with lowercase letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5662", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a capital letter and containing a letter", "source": "word that starts with capital letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5667", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character and that contains  123 ", "source": "number that ends with character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5669", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with letters including vowels", "source": "word that starts with letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5783", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that contains capital letter", "source": "word that starts with `` abc '' and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5787", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that contains  abc ", "source": "word that starts with character and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5805", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a letter and has abc at its end", "source": "word that ends with `` abc '' and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5825", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with any character and contains a vowel", "source": "word that ends with character and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5879", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  and that contains character", "source": "number that ends with `` 123 '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5902", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a letter and that includes a capital letter", "source": "word that starts with letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5955", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a letter and that includes a character", "source": "word that starts with letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5976", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character and containing a capital letter", "source": "word that starts with character and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5986", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with abc and containing a character", "source": "word that ends with `` abc '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6001", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contsins a letter of vowel", "source": "word that starts with letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6002", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a lowercase letter and have a capital letter", "source": "word that ends with lowercase letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6021", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that contains vowel", "source": "word that starts with lowercase letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6033", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that contains lowercase letter", "source": "word that starts with capital letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6039", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that uses 123 and ends with a character", "source": "number that ends with character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6042", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that contains  123 ", "source": "number that starts with character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6048", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel and including at least one lowercase letter", "source": "word that starts with vowel and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6074", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a lowercase letter and uses abc", "source": "word that ends with lowercase letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6089", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word begins with a capital letter and also has a lowercase letter in it", "source": "word that starts with capital letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6096", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a single word that ends with any letter so long as that letter is lowercase and it also contains that letter", "source": "word that ends with lowercase letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6111", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character and that contains  123 ", "source": "number that ends with character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6155", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that contains capital letter", "source": "word that ends with capital letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6157", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and that contains a character", "source": "word that starts with `` abc '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6186", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word includes letter and terminates wcharacter", "source": "word that ends with character and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6212", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with lowercase letter and containing a vowel", "source": "word that starts with lowercase letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6241", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that contains capital letter", "source": "word that ends with vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6272", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with the letter sequence abc and have letters in them", "source": "word that starts with `` abc '' and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6276", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter and ended by any character", "source": "word that ends with character and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6291", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ended by a character and uses a letter", "source": "word that ends with character and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6296", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that conclude in a vowel and have a vowel in them", "source": "word that ends with vowel and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6297", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is the word that contains a character and end with vowel", "source": "word that ends with vowel and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6312", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that begins with a capital letter and ends with a special character", "source": "word that starts with capital letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6320", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after a character and uses characters", "source": "number that ends with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6321", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number has a character and terminates 123", "source": "number that ends with `` 123 '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6334", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that contains  123 ", "source": "number that starts with character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6336", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that contains letter", "source": "word that starts with letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6339", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a character and utilizes characters", "source": "word that starts with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6340", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a letter and a vowel", "source": "word that starts with letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6358", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that contains capital letter", "source": "word that ends with lowercase letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6363", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that contains  abc ", "source": "word that starts with lowercase letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6367", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that contains character", "source": "number that starts with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6379", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a character and contains a letter", "source": "word that ends with character and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_0", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after abc and uses lowercase letters", "source": "word that ends with `` abc '' and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_20", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that contains  abc ", "source": "word that ends with character and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_46", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a letter and comes to an end with a vowel", "source": "word that ends with vowel and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_49", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with and containing a letter", "source": "word that ends with letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_97", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that contains vowel", "source": "word that starts with capital letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_102", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word including any letter and beginning with a vowel", "source": "word that starts with vowel and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_148", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a vowel and contains a letter", "source": "word that starts with vowel and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_164", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins and uses with a lowercase letter", "source": "word that starts with lowercase letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_167", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel", "source": "word that starts with character and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_170", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a lowercase letter and that contains a letter", "source": "word that ends with lowercase letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_172", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word includes vowel and concludes wcapitalized letter", "source": "word that ends with capital letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_180", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a lowercase letter at the end", "source": "word that ends with lowercase letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_189", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that end with characters and have 123", "source": "number that ends with character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_194", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a letter and contains a capital letter", "source": "word that starts with letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_230", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc at the end and includes an uppercase letter", "source": "word that ends with `` abc '' and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_327", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that contains lowercase letter", "source": "word that starts with lowercase letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_338", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with a letter which also contains abc", "source": "word that ends with letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_339", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words begins with a capital letter and have a vowel appear in them", "source": "word that starts with capital letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_350", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a letter and containing a capital letter", "source": "word that starts with letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_352", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "list all words that starts with a character and ends with a lowercase letter", "source": "word that starts with character and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_355", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that conclude with the smaller word abc and also have characters", "source": "word that ends with `` abc '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_393", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with and contains a capital letter", "source": "word that starts with capital letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_414", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that contains letter", "source": "word that ends with `` abc '' and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_435", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a letter and contains a character", "source": "word that starts with letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_436", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that contains vowel", "source": "word that starts with character and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_454", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that contains character", "source": "number that starts with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_493", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has a lowercase letter at the end and has lowercase letters within the word", "source": "word that ends with lowercase letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_496", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a lowercase letter and using abc", "source": "word that starts with lowercase letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_510", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with abc and containing a lowercase letter", "source": "word that starts with `` abc '' and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_546", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number ends with characters", "source": "number that ends with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_555", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that contains lowercase letter", "source": "word that starts with letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_570", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a letter and ending with a character", "source": "word that ends with character and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_586", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that contains lowercase letter", "source": "word that ends with `` abc '' and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_638", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character that contains a letter", "source": "word that starts with character and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_667", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that contains  abc ", "source": "word that ends with capital letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_676", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character and that contains character", "source": "number that ends with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_685", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word commences wsmall letter and has character", "source": "word that starts with lowercase letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_716", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with the smaller word abc and include a vowel", "source": "word that starts with `` abc '' and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_728", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with an uppercase letter and also has a lowercase letter", "source": "word that starts with capital letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_741", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that contains  abc ", "source": "word that ends with capital letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_746", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a lowercase letter and utilize a letter", "source": "word that starts with lowercase letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_755", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that contains character", "source": "word that starts with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_774", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel and an uppercase letter at the end", "source": "word that ends with capital letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_782", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with a vowel and utilizes a lowercase letter", "source": "word that starts with vowel and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_813", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a lowercase letter and have an abc", "source": "word that starts with lowercase letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_814", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with abc and has letters", "source": "word that starts with `` abc '' and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_853", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that contains character", "source": "word that starts with `` abc '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_877", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that contains capital letter", "source": "word that starts with character and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_883", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with abc and contains at least one other letter", "source": "word that starts with `` abc '' and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_896", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that contains capital letter", "source": "word that starts with vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_927", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a vowel and also has a character in it", "source": "word that ends with vowel and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_931", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words in mixed case ending in a capital letter", "source": "word that ends with capital letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_942", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a character  and an uppercase letter in the beginning", "source": "word that starts with capital letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_949", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a lowercase letter and also has a capital letter", "source": "word that starts with lowercase letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_957", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a letter and including a vowel", "source": "word that starts with letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_971", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a lowercase vowel", "source": "word that starts with vowel and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_977", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word has a capitol letter and begins with a letter", "source": "word that starts with letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1007", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with the short sequence abc and has a lowercase letter somewhere in it", "source": "word that ends with `` abc '' and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1033", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that contains lowercase letter", "source": "word that starts with `` abc '' and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1035", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words contain capital letters that end with a letter", "source": "word that ends with letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1065", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a letter and includes a letter", "source": "word that ends with letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1072", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that begins with 123 and also contains character in it", "source": "number that starts with `` 123 '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1088", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with any vowel and uses capital letter", "source": "word that starts with vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1090", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a lowercase letter and includes abc", "source": "word that ends with lowercase letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1116", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word where a lowercase letter appears and ends with a character", "source": "word that ends with character and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1117", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that contains character", "source": "word that starts with vowel and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1119", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a lowercase letter and uses capital letters", "source": "word that starts with lowercase letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1129", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a special character and ends with a letter", "source": "word that ends with letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1146", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains a letter and begins abc", "source": "word that starts with `` abc '' and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1160", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a vowel and ending with abc", "source": "word that ends with `` abc '' and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1161", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with 123", "source": "number that starts with `` 123 '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1177", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have capital letters but end in lowercase letters", "source": "word that ends with lowercase letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1192", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a capital letter and includes a lowercase letter", "source": "word that ends with capital letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1200", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words contain a vowel and abc at the beginning", "source": "word that starts with `` abc '' and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1205", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that contains capital letter", "source": "word that ends with character and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1228", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter and that is ended by a vowel", "source": "word that ends with vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1233", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with abc", "source": "word that starts with `` abc '' and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1237", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with any character and utilizes letters", "source": "word that starts with character and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1245", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that contains character", "source": "word that ends with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1259", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that contains  abc ", "source": "word that starts with capital letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1263", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word can begin with any character and must contain a capital letter", "source": "word that starts with character and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1266", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which  word that ends with letter and that contains letter", "source": "word that ends with letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1276", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a letter and uses lowercase letters", "source": "word that ends with letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1305", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what begins with and contains a character", "source": "word that starts with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1309", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words are written with lowercase letters and end with another character", "source": "word that ends with character and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1352", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word using at least one capital letter and ending with a lowercase letter", "source": "word that ends with lowercase letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1361", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that contains character", "source": "word that ends with vowel and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1372", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a capital letter and that includes abc", "source": "word that ends with capital letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1376", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a capital letter", "source": "word that ends with capital letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1389", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words contains letters and ends with a character", "source": "word that ends with character and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1417", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc", "source": "word that starts with `` abc '' and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1418", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with lowercase letters containing vowels", "source": "word that ends with lowercase letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1480", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with any character and uses capital letters", "source": "word that starts with character and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1487", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that begins with 123 and also has 123 in it", "source": "number that starts with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1519", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with a character and uses a character", "source": "number that starts with character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1542", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words where a capital letter appears and ends with abc", "source": "word that ends with `` abc '' and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1548", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word starts with vowel and contains vowel", "source": "word that starts with vowel and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1586", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with abc and a character", "source": "word that starts with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_35", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a letter", "source": "word that starts with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_44", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number ends with a characer", "source": "number that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_66", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a lowercase letter and begins with a vowel", "source": "word that starts with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_68", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with a capital letter as first character and a vowel as the final character", "source": "word that starts with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_71", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a character and begins with abc", "source": "word that ends with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_75", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with an abc", "source": "word that starts with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_78", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ends with a lowercase letter", "source": "word that ends with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_94", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character and with abc", "source": "word that starts with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_102", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that ends with lowercase letter", "source": "word that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_104", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with lowercase letter", "source": "word that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_116", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning and ending with a vowel", "source": "word that ends with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_119", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that ends with character", "source": "word that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_135", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with capital letter", "source": "word that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_152", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which words begin with both a character and a lowercase letter", "source": "word that starts with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_181", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with both abc and a lowercase letter", "source": "word that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_191", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that starts with character", "source": "number that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_200", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a lowercase letter", "source": "word that ends with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_217", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with vowel", "source": "word that ends with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_219", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a character and begins with a letter", "source": "word that ends with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_224", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with abc and a lowercase letter", "source": "word that ends with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_225", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that starts with vowel", "source": "word that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_229", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with a capital letter and starts with a letter", "source": "word that ends with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_234", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character and ending with abc", "source": "word that starts with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_236", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a vowel and end with a lowercase letter", "source": "word that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_238", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that starts with lowercase letter", "source": "word that starts with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_247", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a vowel and a lowercase letter", "source": "word that starts with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_252", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a vowel", "source": "word that ends with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_260", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter and end with a character", "source": "word that starts with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_275", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number begins with a characters and ends in   123 ", "source": "number that starts with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_282", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a character and a vowel", "source": "word that starts with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_290", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word concludes wsmall letter and character", "source": "word that ends with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_292", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with  abc ", "source": "word that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_310", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that end with a letter thats a vowel", "source": "word that ends with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_316", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with abc and stops after a capital letter", "source": "word that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_333", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that starts with  abc ", "source": "word that starts with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_337", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that starts with character", "source": "number that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_362", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a letter and also begins in a character", "source": "word that ends with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_369", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word needs to begin with the characters abc and end with any vowel", "source": "word that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_380", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with any capital letter that ends with a vowel", "source": "word that starts with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_384", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with a character", "source": "number that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_385", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that starts with capital letter", "source": "word that ends with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_398", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a vowel and character", "source": "word that ends with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_406", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a character and end with a capital letter", "source": "word that ends with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_410", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends with abc and also ends with any letter", "source": "word that ends with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_411", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that starts with letter", "source": "word that ends with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_419", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter", "source": "word that starts with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_430", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a letter and begins with a vowel", "source": "word that ends with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_441", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with  abc ", "source": "word that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_457", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with  abc ", "source": "word that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_463", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with lowercase vowels", "source": "word that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_474", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc and a vowel in the beginning", "source": "word that starts with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_476", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning and ending with a letter", "source": "word that starts with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_523", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and terminate with a vowel", "source": "word that starts with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_526", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with abc", "source": "word that ends with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_557", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a character and end with abc", "source": "word that starts with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_558", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words beginning with a lowercase letter", "source": "word that starts with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_563", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter in the beginning and a letter at the end", "source": "word that starts with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_565", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a character and ends with a vowel", "source": "word that ends with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_566", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with a small letter", "source": "word that ends with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_569", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a character", "source": "word that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_582", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends and begins with a letter", "source": "word that ends with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_592", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a lowercase vowel", "source": "word that starts with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_607", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with abc and also ends in a character", "source": "word that starts with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_611", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with letter", "source": "word that starts with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_634", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with letter", "source": "word that starts with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_665", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word begins with a lowercase letter and ends with abc", "source": "word that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_666", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with abc and begins with a vowel", "source": "word that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_675", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a lowercase letter and begins with a capital letter", "source": "word that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_678", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with vowel", "source": "word that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_679", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with character", "source": "word that starts with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_680", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a capital letter and commences with a character", "source": "word that ends with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_691", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with abc and doesnt end with an uppercase letter", "source": "word that ends with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_694", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with any letter and ends with any letter that is lowercase", "source": "word that starts with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_702", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that closures with abc and that finishes with letter", "source": "word that ends with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_703", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a lowercase letter and a vowel", "source": "word that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_709", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has abc at both the beginning and the end", "source": "word that ends with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_726", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that ends with vowel", "source": "word that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_749", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with any letter but starts with abc", "source": "word that starts with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_762", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning and ending in lowercase", "source": "word that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_765", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  and ends with a character", "source": "number that starts with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_783", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with lowercase letter", "source": "word that starts with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_795", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a letter and vowel", "source": "word that starts with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_799", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a character and ends with a lowercase letter", "source": "word that ends with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_801", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a vowel and begins with a character", "source": "word that ends with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_822", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with  abc ", "source": "word that starts with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_823", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with any lowercase letter", "source": "word that starts with letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_844", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number ends with a character and also begins with a character", "source": "number that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_856", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts on a vowel", "source": "word that starts with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_860", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a capital letter and that concludes with a character", "source": "word that ends with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_870", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with character", "source": "word that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_880", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with vowel", "source": "word that ends with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_884", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with abc and also starts with abc", "source": "word that starts with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_887", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a lowercase letter and begin with abc", "source": "word that ends with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_892", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a lowercase letter in the beginning and a character in the beginning", "source": "word that starts with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_895", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with characters and a capital letter", "source": "word that starts with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_913", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a lowercase word that starts with abc", "source": "word that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_918", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a  small letter", "source": "word that starts with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_922", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that always start with capital letters", "source": "word that starts with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_929", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a vowel and begins with a capital", "source": "word that starts with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_940", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel and a character", "source": "word that starts with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_942", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with lowercase letter and ending with a vowel", "source": "word that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_961", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words ending and starting with a capital letter", "source": "word that ends with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_966", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starting with a vowel and ending with a lowercase letter", "source": "word that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_976", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that ends with character", "source": "number that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_990", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a letter", "source": "word that ends with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1032", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that starts with lowercase letter", "source": "word that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1033", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops and begins with a character", "source": "word that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1035", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a capital letter and a character", "source": "word that ends with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1037", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with abc and ending with a letter", "source": "word that starts with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1052", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "proper words ending with a certain character", "source": "word that ends with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1055", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a capital letter and terminates with abc", "source": "word that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1057", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that starts with  abc ", "source": "word that ends with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1061", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with letter", "source": "word that starts with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1064", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a vowel and a lowercase letter", "source": "word that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1089", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with abc and a character", "source": "word that ends with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1101", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends with the number 123 and ends with a character", "source": "number that ends with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1112", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words ending with a vowel", "source": "word that ends with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1118", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with a lowercase letter and also ends in a vowel", "source": "word that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1130", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel at the end", "source": "word that ends with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1137", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word terminating with a capital letter and beginning with abc", "source": "word that ends with capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1147", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with any uppercase letter but begins with any character", "source": "word that ends with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1160", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that in the ending there is a character that starts with a letter", "source": "word that starts with letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1197", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a letter", "source": "word that ends with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1213", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "locate a word that begins with a capitalized letter and uses the sequence abc to finish", "source": "word that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1246", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with lowercase letter and finishes with abc", "source": "word that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1255", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts out lowercase and ends with a letter", "source": "word that ends with letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1263", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with abc", "source": "word that ends with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1265", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a vowel but ends with a capital letter", "source": "word that ends with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1266", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that initiate with a vowel and terminate with a letter", "source": "word that starts with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1313", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that ends with lowercase letter", "source": "word that ends with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1316", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with a lower case letter and ends with a vowel", "source": "word that ends with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1330", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel ends with a character", "source": "word that ends with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1344", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a character", "source": "word that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1391", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a character and stops with 123", "source": "number that starts with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1393", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a letter and starts with any character", "source": "word that ends with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1405", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a vowel and ends with any letter", "source": "word that starts with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1423", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word needs to end with a letter as its character", "source": "word that ends with letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1434", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that starts with lowercase letter", "source": "word that starts with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1469", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number begins and ends with a character", "source": "number that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1470", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that ends with capital letter", "source": "word that starts with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1476", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a capital letter and terminates with a vowel", "source": "word that starts with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1482", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and finish with a letter", "source": "word that starts with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1499", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a character and that begins with a capital letter", "source": "word that starts with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1501", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a letter and with a character", "source": "word that starts with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1507", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and finsih with a lowercase letter", "source": "word that starts with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1510", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number begins with a character and 123", "source": "number that starts with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1512", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a letter and  abc ", "source": "word that ends with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1513", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a vowel and stops with abc", "source": "word that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1514", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a character and stops after a capital letter", "source": "word that starts with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1525", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that starts with lowercase letter", "source": "word that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1537", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character and that ends with character", "source": "number that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1545", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after 123", "source": "number that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1552", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words starting with a vowel that ends with the sequence abc", "source": "word that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1557", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with abc but ends with a lowercase letter", "source": "word that starts with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1558", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a capital letter and also ends in a letter", "source": "word that ends with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1560", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter in the beginning and in the end", "source": "word that starts with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1568", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a vowel and letter", "source": "word that ends with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1578", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with vowel", "source": "word that starts with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1597", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start and end with letters", "source": "word that starts with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1599", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a lowercase letter and starts with a vowel", "source": "word that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1602", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and ends with a vowel", "source": "word that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1605", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a capital letter and starts with  abc ", "source": "word that ends with capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1621", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a capital letter and starts with a letter", "source": "word that ends with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1634", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that are not fully capitalized and start with a vowel", "source": "word that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1644", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a vowel and finishes with a character", "source": "word that starts with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1657", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with capital letter", "source": "word that starts with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1659", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that ends with capital letter", "source": "word that starts with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1665", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter and end with a lowercase letter", "source": "word that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1671", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with and ending with a letter", "source": "word that ends with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1679", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a letter and finishes with a capital letter", "source": "word that starts with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1689", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with 123 and characters", "source": "number that starts with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1691", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is the word that starts with a character and ends with abc", "source": "word that starts with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1695", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a letter and begins with abc", "source": "word that ends with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1698", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a character and also begins with a capital letter", "source": "word that ends with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1710", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with abc and stops after a character", "source": "word that starts with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1741", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number beginning and ending with a character", "source": "number that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1742", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a letter and has a small letter at the end", "source": "word that ends with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1764", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a capital letter and starts with a vowel", "source": "word that ends with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1765", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a capital letter that starts with abc", "source": "word that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1777", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and that concludes with a capital letter", "source": "word that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1796", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that ends with character", "source": "word that ends with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1798", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and also start with letters", "source": "word that starts with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1801", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a letter and  abc ", "source": "word that starts with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1804", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with one character and end with another letter", "source": "word that starts with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1807", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a character and vowel", "source": "word that ends with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1830", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with vowel", "source": "word that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1840", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a lowercase letter but also starts with the chain abc", "source": "word that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1849", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with character", "source": "word that ends with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1860", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stop after a character and capital letters", "source": "word that ends with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1863", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character and a vowel", "source": "word that starts with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1864", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that ends with letter", "source": "word that ends with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1868", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that starts with vowel", "source": "word that starts with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1874", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has123 and a character in the beginning", "source": "number that starts with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1879", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel in the beginning and a uppercase letter at the end", "source": "word that starts with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1906", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that ends with lowercase letter", "source": "word that ends with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1921", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has an uppercase letter in the beginning and end", "source": "word that starts with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1940", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "wordthat uses big letter in the beginningthat finishes with abc", "source": "word that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1941", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a character and ending with a capital letter", "source": "word that starts with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1949", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with capital letters and end with lowercase letters", "source": "word that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1957", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starting abc and ending with any character", "source": "word that ends with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1972", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with  abc ", "source": "word that starts with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1981", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that starts with capital letter", "source": "word that starts with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1984", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that both start and end with a capital letter", "source": "word that ends with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1990", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that ends in 123 and also ends in 123", "source": "number that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2006", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning in lowercase and ending with a character", "source": "word that ends with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2021", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins and stops with abc", "source": "word that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2029", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a character and ends with a vowel", "source": "word that starts with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2035", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a vowel and that begins with a vowel", "source": "word that starts with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2040", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that starts with letter", "source": "word that ends with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2043", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with any character and ends with a lowercase letter", "source": "word that ends with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2047", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that starts with character", "source": "word that ends with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2056", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with character", "source": "word that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2069", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with lowercase letter", "source": "word that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2071", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "find the word that begins with a capitalized letter and ends with any sort of a letter", "source": "word that starts with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2082", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a lowercase letter and also ends in a letter", "source": "word that ends with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2084", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends in the letters abc and starts with a vowel", "source": "word that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2100", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that finish with a letter", "source": "word that ends with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2101", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with 123", "source": "number that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2102", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a character and that concludes with a lowercase letter", "source": "word that ends with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2124", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts and ends with a capital letter", "source": "word that starts with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2128", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with capital letter", "source": "word that starts with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2132", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a letter and also ends in a letter", "source": "word that ends with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2135", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with  abc  and starts with a lowercase letter", "source": "word that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2139", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a capital and ending with a letter", "source": "word that ends with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2150", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and end with a letter", "source": "word that starts with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2151", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a character and begins with a capital letter", "source": "word that ends with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2159", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with lowercase letters", "source": "word that starts with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2168", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a lowercase letter and ends with any letter", "source": "word that starts with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2169", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel", "source": "word that starts with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2177", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a letter and ending with a lowercase letter", "source": "word that starts with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2220", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with any letter and ending with a capital letter", "source": "word that starts with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2253", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that starts with vowel", "source": "word that ends with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2261", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with capital letter", "source": "word that ends with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2271", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with a lowercase letter but ends with a capital letter", "source": "word that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2278", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts and ends with any vowel", "source": "word that ends with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2285", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that ends with vowel", "source": "word that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2293", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends and starts with the number 123", "source": "number that ends with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2303", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that starts with  123 ", "source": "number that starts with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2322", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with  abc ", "source": "word that starts with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2342", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a capital letter", "source": "word that starts with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2346", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that ends with  abc ", "source": "word that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2347", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a character and ends with a letter", "source": "word that starts with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2348", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with character", "source": "word that ends with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2349", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with any letter and ends with abc", "source": "word that starts with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2362", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a capital letter but ends with a character", "source": "word that starts with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2370", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning and ending with a capital letter", "source": "word that ends with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2393", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and end with abc", "source": "word that starts with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2403", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word terminating with a lowercase letter and beginning with a character", "source": "word that ends with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2418", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that starts with lowercase letter", "source": "word that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2420", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  and that starts with  123 ", "source": "number that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2427", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with a character", "source": "word that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2432", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with any letter and ends with a lowercase letter", "source": "word that starts with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2434", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words starts with a capital letter and a character", "source": "word that starts with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2441", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that both begin with and end with a vowel", "source": "word that starts with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2443", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a character and the wordsabc in the beginning", "source": "word that starts with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2450", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has an uppercase letter in the beginning ", "source": "word that starts with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2452", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character and a letter", "source": "word that starts with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2457", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with capital letter", "source": "word that starts with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2483", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with a letter", "source": "word that ends with letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2489", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a lowercase letter and begins with a vowel", "source": "word that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2522", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character and that ends with  123 ", "source": "number that ends with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2524", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel", "source": "word that starts with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2525", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a vowel and begins with abc", "source": "word that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2536", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc in the beginning and a vowel at the end of it", "source": "word that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2560", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a lowercase letter and ends with a letter", "source": "word that starts with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2588", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that starts with character", "source": "word that ends with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2594", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number both beginning and ending with 123", "source": "number that ends with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2595", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with abc and a lowercaseletter", "source": "word that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2610", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that starts with  abc ", "source": "word that starts with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2611", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a vowel and ends with any lowercase letter", "source": "word that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2614", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that has a character in the beginning and 123 in the end", "source": "number that starts with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2632", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with abc and beings with a vowel", "source": "word that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2633", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with capital letters and vowels", "source": "word that starts with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2657", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter and also begin with a character", "source": "word that starts with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2665", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with abc and ending with a character", "source": "word that ends with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2675", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with any letter but ended with a vowel", "source": "word that starts with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2680", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a lowercase letter and begins with a capital", "source": "word that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2681", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with the string abc and ends with any letter", "source": "word that ends with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2691", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a lowercase letter and ends with abc", "source": "word that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2694", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and end with a lowercase letter", "source": "word that starts with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2698", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a line that begins with a e i o or u and ends with a letter", "source": "word that starts with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2701", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a character using abc", "source": "word that starts with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2706", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that ends with vowel", "source": "word that starts with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2720", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts and ends with a letter", "source": "word that starts with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2739", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a vowel and begins with a lowercase letter", "source": "word that ends with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2753", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ends with capital vowel", "source": "word that ends with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2756", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with abc and begins with a letter", "source": "word that ends with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2770", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a letter and a capital letter", "source": "word that ends with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2774", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with letter", "source": "word that ends with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2790", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with vowel", "source": "word that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2795", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a character after starting on a vowel", "source": "word that starts with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2797", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins and stops with characters", "source": "word that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2801", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a vowel", "source": "word that starts with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2808", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character and that starts with character", "source": "number that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2826", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with a vowel and also ends in a vowel", "source": "word that starts with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2836", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after abc and a character", "source": "word that ends with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2843", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that ends with character", "source": "word that ends with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2862", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a character", "source": "number that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2878", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a letter and begins with a character", "source": "word that ends with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2899", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a capital letter", "source": "word that ends with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2901", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with a character", "source": "word that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2909", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "mention a word starting with a character and ending with a lowercase letter", "source": "word that starts with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2915", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word which starts with any character and vowel at the end", "source": "word that starts with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2927", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with the sequence 123 that begins with any character", "source": "number that starts with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2929", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a letter and ending with a vowel", "source": "word that ends with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2938", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "is there a number ending in 123", "source": "number that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2943", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a abc in lowercase", "source": "word that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2953", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with a vowel and an uppercase letter", "source": "word that ends with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2959", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a capital letter and ending with a lowercase letter", "source": "word that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2967", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with a capital letter and also begins with a vowel", "source": "word that starts with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2980", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that starts with lowercase letter", "source": "word that starts with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2996", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that ends with letter", "source": "word that ends with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3001", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  and that starts with  123 ", "source": "number that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3020", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with a character and starts with  123 ", "source": "number that ends with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3032", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a character and end witha  capital letter", "source": "word that starts with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3033", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that ends with letter", "source": "word that starts with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3044", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with letter and that begins with abc", "source": "word that ends with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3049", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with vowel", "source": "word that ends with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3061", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with character", "source": "word that starts with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3071", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins and ends with any lowercase letter", "source": "word that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3080", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a capital letter", "source": "word that ends with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3085", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with a charcter and finishes with another one", "source": "number that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3115", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a lowercase letter and terminates with a lowercase letter", "source": "word that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3128", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter but ends with capital letter", "source": "word that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3143", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character and ending with a vowel", "source": "word that ends with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3147", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a lowercase letter", "source": "word that ends with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3155", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with lowercase letter", "source": "word that ends with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3159", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning and ending with a vowel", "source": "word that ends with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3163", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with capital letter", "source": "word that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3164", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a letter and that concludes with any capital letter", "source": "word that starts with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3176", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that starts with lowercase letter", "source": "word that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3180", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begin with a capital letter", "source": "word that starts with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3184", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with 123", "source": "number that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3188", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a character and abc", "source": "word that starts with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3190", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that beings with a vowel and a capital letter", "source": "word that starts with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3193", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a lowercase but ends in a capital letter", "source": "word that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3196", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with abc and ending with a capital letter", "source": "word that ends with capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3198", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a capital letter", "source": "word that starts with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3202", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a capital letter and ending with a vowel", "source": "word that ends with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3215", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a lowercase letter and ends with any letter", "source": "word that starts with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3218", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word concludes wsmall letter", "source": "word that ends with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3230", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter in the beginning and an uppercase letter at the end", "source": "word that ends with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3237", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc as its beginning and a character at the end", "source": "word that starts with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3246", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character", "source": "word that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3251", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a capital letter and stops with a character", "source": "word that starts with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3259", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that starts with character", "source": "word that starts with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3267", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with any letter and ends with abc", "source": "word that ends with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3282", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with a character and 123", "source": "number that starts with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3284", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes in a vowel", "source": "word that ends with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3302", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a capital letter and ending with a letter", "source": "word that starts with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3312", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter and stops after a lowercase letter", "source": "word that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3316", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word the ends with a capital vowel", "source": "word that ends with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3328", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with  abc ", "source": "word that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3331", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that starts with  abc ", "source": "word that starts with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3332", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words whose last character is a vowel", "source": "word that ends with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3345", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that ends with letter", "source": "word that ends with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3347", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that starts with vowel", "source": "word that starts with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3365", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with any letter and ends with any vowel", "source": "word that ends with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3370", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with a character and that begins with a character", "source": "number that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3378", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what are words that start with vowels and characters", "source": "word that starts with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3388", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate with a lowercase letter and also begin with a letter", "source": "word that ends with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3400", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starts and ends with a capital letter", "source": "word that starts with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3419", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that starts with letter", "source": "word that starts with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3429", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have abc at the end and has a vowel in the beginning", "source": "word that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3434", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that with a character and abc", "source": "word that ends with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3440", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a letter and starts with the letters abc", "source": "word that ends with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3451", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a lowercase vowel", "source": "word that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3461", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins and ends with a letter", "source": "word that starts with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3468", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with a vowel and character", "source": "word that ends with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3477", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with  abc  and also starts with  abc ", "source": "word that ends with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3485", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with vowel", "source": "word that starts with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3494", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that ends with character", "source": "word that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3497", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that terminate with a character or begin with a character", "source": "number that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3498", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a lowercase letter and end with a vowel", "source": "word that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3512", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a lowercase letter and end with abc", "source": "word that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3550", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that starts with vowel", "source": "word that starts with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3553", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number beginning and ending with a character", "source": "number that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3554", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a vowel as first character and any lowercase letter as last character", "source": "word that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3557", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a character and begins  with a letter", "source": "word that starts with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3566", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word terminating with a vowel and beginning with a lowercase letter", "source": "word that ends with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3568", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a capital letter and ends with abc", "source": "word that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3571", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word commences wuppercase letter and concludes wcharacter", "source": "word that starts with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3580", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that starts with lowercase letter", "source": "word that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3583", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that ends with letter", "source": "word that starts with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3585", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that begins with a character and also begins with 123", "source": "number that starts with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3589", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start and finish with vowels", "source": "word that ends with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3591", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with a double letter", "source": "word that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3597", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word the ends with a capital", "source": "word that ends with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3616", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which words begin with a capital letter and end with a vowel", "source": "word that ends with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3617", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number wich begins with character and ends with 123", "source": "number that starts with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3641", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that starts with vowel", "source": "word that starts with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3648", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a small letter at the end", "source": "word that ends with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3663", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a lowercase letter and ending with a character", "source": "word that starts with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3665", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a character in the beginning and has abc  at the end", "source": "word that ends with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3671", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "where wond ends with big letter that begins with small letter", "source": "word that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3686", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with abc and end with vowels", "source": "word that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3687", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word has to begin with a letter and and with the characters abc", "source": "word that starts with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3700", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number ends with multiple characters", "source": "number that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3715", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and a character", "source": "word that starts with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3721", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that start with  124  and ends with  123 ", "source": "number that starts with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3727", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a lowercase letter and ending with a letter", "source": "word that ends with letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3744", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a capital letter and a vowel", "source": "word that starts with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3759", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins and ends with any letter", "source": "word that ends with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3794", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "note the word that begins with the sequence abc as well as any other vowel", "source": "word that starts with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3809", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with  abc ", "source": "word that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3811", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that ends with lowercase letter", "source": "word that starts with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3816", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with lowercase letter", "source": "word that starts with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3820", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a capital vowel", "source": "word that ends with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3821", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in abc and also begins in abc", "source": "word that ends with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3822", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel and abc in the beginning", "source": "word that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3825", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel but ending with a character", "source": "word that starts with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3835", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that ends with  abc ", "source": "word that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3839", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that ends with lowercase letter", "source": "word that starts with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3848", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a letter and begins with a capital letter", "source": "word that ends with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3850", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word with a that begins with a lowercase letter that is a letter", "source": "word that starts with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3860", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that ends with capital letter", "source": "word that ends with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3865", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a wide beginning with abc as well as with a character", "source": "word that starts with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3878", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number begins with 123 and ends with a character", "source": "number that ends with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3930", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and stops after a vowel", "source": "word that starts with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3935", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a letter and starts with a letter", "source": "word that ends with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3943", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends with any character", "source": "number that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3947", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with any character but starts with a lowercase letter", "source": "word that ends with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3959", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter and finish with a letter", "source": "word that starts with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3976", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a character that ends with any lowercase letter", "source": "word that ends with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3984", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that ends with vowel", "source": "word that ends with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3988", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a letter and vowel", "source": "word that ends with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3993", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a lowercase letter", "source": "word that starts with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3999", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words begin with a lowercase letter and ends with a letter", "source": "word that starts with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4015", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with lowercase letters and end with characters", "source": "word that ends with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4021", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that ends with letter", "source": "word that ends with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4024", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that ends with lowercase letter", "source": "word that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4035", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a vowel and lowercase letters", "source": "word that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4037", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that concludes with a character and begins with a character", "source": "word that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4069", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with abc and ends with a lowercase letter", "source": "word that ends with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4079", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel in the beginning and has a letter at the end", "source": "word that starts with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4086", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with letter", "source": "word that ends with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4087", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that ends with vowel", "source": "word that ends with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4090", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends with a letter and also begins with a capital letter", "source": "word that ends with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4098", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a lowercase letter and ends with a letter", "source": "word that ends with letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4103", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a vowel and ends with a capital letter", "source": "word that starts with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4109", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel but ending with a capital letter", "source": "word that starts with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4118", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that ends with 123 but also begins with a character", "source": "number that ends with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4131", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a character that finishes with a vowel", "source": "word that starts with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4145", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with abc as well as with a character", "source": "word that ends with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4154", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and a lowercase letter", "source": "word that ends with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4155", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word begins with a vowel and also begins with a capital letter", "source": "word that starts with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4179", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that starts with character", "source": "word that ends with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4194", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and that concludes with a vowel", "source": "word that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4212", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a capital letter for an ending", "source": "word that ends with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4218", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a vowel and letter", "source": "word that starts with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4221", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that concludes with 123 and that concludes with 123", "source": "number that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4223", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a letter and also ends in a lowercase letter", "source": "word that ends with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4234", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  and that starts with character", "source": "number that ends with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4261", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with abc", "source": "word that ends with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4264", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with abc", "source": "word that ends with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4301", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that ends with  123 ", "source": "number that starts with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4325", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that starts with vowel", "source": "word that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4329", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with lowercase letter", "source": "word that ends with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4332", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that both begins and ends with a lowercase letter", "source": "word that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4347", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel and ending with a capital letter", "source": "word that ends with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4361", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a letter and character", "source": "word that starts with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4370", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and that concludes with a lowercase letter", "source": "word that starts with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4388", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that starts with character", "source": "word that starts with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4393", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with both abc and a character", "source": "word that starts with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4407", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with vowels and stops with characters", "source": "word that starts with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4426", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ended by abc and begun by any character", "source": "word that ends with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4438", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line with a vowel at the start and finish", "source": "word that ends with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4444", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a lowercase letter and ending with abc", "source": "word that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4448", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with vowel", "source": "word that starts with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4452", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a vowel and starts with a lowercase letter", "source": "word that ends with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4455", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word ends in a character and also begins in a vowel", "source": "word that ends with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4466", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  and that ends with character", "source": "number that ends with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4467", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a capital letter and stops with a letter", "source": "word that starts with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4485", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that starts with vowel", "source": "word that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4492", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a character and stops after acb", "source": "word that starts with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4504", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that ends with letter", "source": "word that starts with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4509", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word with a capital letter at the beginning and a lowercase letter at the end", "source": "word that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4510", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with abc and begins with a capital", "source": "word that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4524", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that ends with  abc ", "source": "word that ends with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4526", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a vowel", "source": "word that starts with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4547", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word concludes wletter and vowel", "source": "word that ends with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4557", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a vowel and a letter", "source": "word that starts with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4560", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with a character and also ends in a lowercase letter", "source": "word that starts with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4575", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a capital letter", "source": "word that ends with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4585", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that ends with capital letter", "source": "word that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4593", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc and a character  in the beginning", "source": "word that starts with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4606", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a capital letter and begins with a vowel", "source": "word that ends with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4635", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a lowercase letter and finish with the smaller word abc", "source": "word that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4648", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with abc and begins with a character", "source": "word that ends with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4657", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with letter", "source": "word that starts with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4678", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with and ending with a vowel", "source": "word that starts with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4683", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that starts with letter", "source": "word that starts with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4692", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate with a character and begin with a lowercase letter", "source": "word that ends with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4697", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "locate a word that starts with any type of letter but ends with a capitalized one", "source": "word that ends with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4718", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "this word needs to begin with a vowel and finish off with the letters abc", "source": "word that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4729", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel and a letter in the beginning", "source": "word that starts with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4731", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a lowercase letter and vowel", "source": "word that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4741", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with vowel", "source": "word that ends with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4744", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a capital letter and ending with abc", "source": "word that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4746", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that stops with a character and 123 together", "source": "number that ends with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4782", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word that starts with character and that starts with character", "source": "word that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4784", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel and ending with a letter", "source": "word that ends with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4786", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins and ends with lowercase letters", "source": "word that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4798", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that starts with character", "source": "word that starts with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4817", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a character and abc", "source": "word that ends with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4821", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with capital letter", "source": "word that ends with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4856", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with any letter and also the smaller word abc", "source": "word that starts with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4869", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "this number needs to both begin and end with a character", "source": "number that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4870", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a vowel and a capital letter", "source": "word that ends with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4872", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word concludes wvowel", "source": "word that ends with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4876", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number beginning with 123 and ending with any character", "source": "number that starts with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4883", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that begins with a character and also with 123", "source": "number that starts with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4885", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with both a lowercase letter and with a vowel", "source": "word that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4887", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending on a capital that starts with some different caharacter", "source": "word that ends with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4891", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with an uppercase letter and ended with abc", "source": "word that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4897", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that starts with lowercase letter", "source": "word that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4915", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with a vowel that is begun by a lowercase letter", "source": "word that ends with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4921", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to amend", "source": "word that ends with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4922", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a lowercase character", "source": "word that ends with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4927", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that commences with a lowercase letter and terminates with a vowel", "source": "word that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4933", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that starts with  abc ", "source": "word that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4944", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with character", "source": "word that ends with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4945", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a letter that is lowercase", "source": "word that starts with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4947", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that starts with letter", "source": "word that starts with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4960", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with with a lowercase letter and a character", "source": "word that starts with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4965", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a small letter in the beginning and end", "source": "word that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4970", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a capital letter and ends with any letter", "source": "word that ends with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4978", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that starts with letter", "source": "word that ends with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4983", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word stops with abc", "source": "word that ends with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4994", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends in a character and also ends in a letter", "source": "word that ends with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4998", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a vowel and abc in sequence", "source": "word that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5005", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and also begin with a vowel", "source": "word that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5006", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "this word ends with a capital letter", "source": "word that ends with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5010", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that starts with capital letter", "source": "word that starts with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5041", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with 123 and terminating with 123", "source": "number that starts with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5058", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with any character and ends with any letter", "source": "word that ends with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5064", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter and end with a letter", "source": "word that ends with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5069", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with a capital letter but starts with a lowercase letter", "source": "word that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5070", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with 123", "source": "number that ends with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5085", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with capital letter", "source": "word that ends with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5089", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a lowercase letter and letter", "source": "word that ends with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5107", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a vowel and also begin with a lowercase letter", "source": "word that starts with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5111", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with vowel", "source": "word that starts with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5117", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends in a vowel and starts with a capital letter", "source": "word that ends with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5118", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with any character that ends with a vowel", "source": "word that starts with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5133", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that starts with letter", "source": "word that ends with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5141", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  and that ends with  123 ", "source": "number that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5154", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with abc and also ends in abc", "source": "word that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5164", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begun with any lowercase letter and has a capital letter at the end", "source": "word that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5201", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a capital letter and begins with a vowel", "source": "word that ends with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5202", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a capital letter that is also a vowel", "source": "word that ends with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5206", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with a vowel and beginning with abc", "source": "word that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5219", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with any vowel", "source": "word that starts with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5226", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words beginning with the characters abc", "source": "word that starts with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5229", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word with a lowercase letter at the start and end with abc", "source": "word that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5230", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do have characters at both the beginning and end", "source": "word that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5244", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a letter that is a vowel", "source": "word that ends with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5275", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with a capitalized vowel", "source": "word that ends with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5299", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "whats a word ending lowercase and starting with a character", "source": "word that starts with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5304", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a charatcer that finishes with a capital letter", "source": "word that ends with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5308", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin and end with a lowercase letter", "source": "word that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5320", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that starts with character", "source": "word that starts with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5341", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with vowel", "source": "word that ends with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5347", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that must start with 123", "source": "number that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5356", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that ends with character", "source": "word that ends with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5357", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and end with a capital letter", "source": "word that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5376", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a letter that has a capital letter at the end", "source": "word that ends with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5394", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with abc and a letter", "source": "word that starts with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5405", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a character and begins abc in sequence", "source": "word that starts with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5409", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc  and a small letter at the end", "source": "word that ends with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5421", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends with a lowercase letter and also begins with a vowel", "source": "word that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5426", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with a character", "source": "word that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5430", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a lowercase letter in the beginning and a character at the end", "source": "word that starts with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5435", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words begins with a vowel and ends with  abc ", "source": "word that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5436", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that starts with lowercase letter", "source": "word that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5453", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starts with abc", "source": "word that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5483", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a lowercase letter and also ends in abc", "source": "word that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5498", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a vowel", "source": "word that ends with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5500", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a letter and that concludes with a character", "source": "word that ends with letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5513", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter at the end which is a vowel", "source": "word that ends with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5521", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with both a character and a capital letter", "source": "word that ends with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5523", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words taht begin with a letter that is also a character", "source": "word that starts with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5544", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a letter after starting on any vowel", "source": "word that ends with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5554", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a capital letter and commences with a lowercase letter", "source": "word that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5558", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with lowercase letter and ends with capital letters", "source": "word that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5559", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that ends with lowercase letter", "source": "word that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5575", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that ends with  123 ", "source": "number that starts with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5579", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a capital letter and that concludes with a lowercase letter", "source": "word that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5591", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that terminates with 123 as well as a character", "source": "number that ends with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5596", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts and ends with 123", "source": "number that ends with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5608", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that end with a character and 123", "source": "number that ends with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5609", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with any letter and ending with any lowercase letter", "source": "word that ends with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5620", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops with a character and also 123", "source": "number that ends with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5621", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning and ending with any character", "source": "word that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5638", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with letter", "source": "word that starts with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5682", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops and begins with a lowercase letter", "source": "word that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5683", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a lowercase vowel", "source": "word that starts with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5685", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a character and ends with a letter", "source": "word that starts with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5690", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a capital letter and also ends in a capital letter", "source": "word that ends with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5717", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finsihes with a lowercase letter and begins with a character", "source": "word that ends with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5718", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a letter and a vowel", "source": "word that ends with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5746", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with any capital letter", "source": "word that ends with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5766", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts and ends with  abc ", "source": "word that starts with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5768", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and that begins with a lowercase letter", "source": "word that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5773", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with character", "source": "word that starts with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5780", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a character and terminates with a character", "source": "word that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5806", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning and ending with an uppercase letter", "source": "word that starts with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5808", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word starts with abc and also starts with a lowercase letter", "source": "word that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5810", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with lowercase letter and also it starts with a lowercase letter", "source": "word that starts with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5826", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with letter", "source": "word that ends with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5831", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with letter", "source": "word that starts with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5842", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a letter and stops after abc", "source": "word that starts with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5844", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a capital letter and ends with a lowercase letter", "source": "word that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5845", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character and ending with a capital letter", "source": "word that starts with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5850", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a letter and a vowel", "source": "word that ends with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5856", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number starts with a character before ending on 123", "source": "number that ends with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5858", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and ends with any lowercase letter", "source": "word that ends with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5867", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that starts with vowel", "source": "word that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5880", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a lowercase letter and ends with any letter", "source": "word that starts with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5895", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a character and stops after a lowercase letters", "source": "word that starts with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5914", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with letter", "source": "word that ends with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5918", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a lowercase letter", "source": "word that ends with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5931", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number starts and ends with a character", "source": "number that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5939", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with a capital vowel", "source": "word that starts with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5940", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with a lowercase letter and ends with a capital letter", "source": "word that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5945", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with and ending with a character", "source": "word that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5950", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a vowel and that begins with a capital letter", "source": "word that ends with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5964", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with lowercase letter", "source": "word that starts with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5970", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins and  ends with a character", "source": "word that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5971", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with  abc ", "source": "word that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5973", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that starts with character", "source": "word that ends with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5980", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that ends with letter", "source": "word that starts with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5989", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a lowercase letter and terminates with a letter", "source": "word that ends with letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5998", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word where begins with vowel and also starts with small letter", "source": "word that starts with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6008", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with letter", "source": "word that ends with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6010", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a capital letter and a vowel", "source": "word that ends with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6013", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter and a character in the beginning", "source": "word that starts with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6015", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "is there a number that starts with 123 and a character", "source": "number that starts with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6025", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that ends in 123 and also ends in a character", "source": "number that ends with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6027", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate with a capital letter and begin with one", "source": "word that ends with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6028", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a digit that both begins and ends with 123", "source": "number that ends with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6040", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that starts with letter", "source": "word that starts with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6073", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with letters and abc", "source": "word that starts with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6077", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that ends with character", "source": "word that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6079", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins and stops with a vowel", "source": "word that starts with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6081", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with capital letter", "source": "word that ends with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6085", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with character", "source": "word that ends with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6097", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with abc and begins with a vowel", "source": "word that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6104", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins in a lowercase letter and also ends in a character", "source": "word that starts with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6110", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and terminate with abc", "source": "word that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6121", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that starts with vowel", "source": "word that ends with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6129", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with  abc ", "source": "word that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6130", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with  abc ", "source": "word that ends with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6134", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "list down a word starting with abc and ending with a character", "source": "word that starts with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6147", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that starts with character", "source": "word that ends with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6159", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that starts with character", "source": "word that ends with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6167", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with any character", "source": "word that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6171", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "only words which start with a capital letter", "source": "word that starts with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6182", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "can a lowercase letter end a word that also ends abc", "source": "word that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6189", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that ends with capital letter", "source": "word that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6191", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with lowercase letters and characters", "source": "word that starts with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6200", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a character at the end and has abc in the beginning", "source": "word that ends with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6210", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has a character at the start and abc at the end", "source": "word that ends with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6224", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with abc", "source": "word that ends with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6236", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning and ending with any character", "source": "word that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6244", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc in the beginning and end", "source": "word that ends with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6251", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a vowla and ends with a capital letter", "source": "word that starts with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6260", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that starts with capital letter", "source": "word that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6261", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with vowel", "source": "word that starts with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6268", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with character", "source": "word that ends with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6270", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with any lowercase letter but ends with sequence abc", "source": "word that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6280", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter at the end", "source": "word that ends with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6289", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a letter but ends in a character", "source": "word that ends with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6298", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that starts with  abc ", "source": "word that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6301", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with any character", "source": "word that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6302", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and end with a character", "source": "word that starts with letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6308", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a character in the beginning and a small letter in the end", "source": "word that starts with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6311", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a character that begins with a vowel", "source": "word that starts with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6313", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that ends with lowercase letter", "source": "word that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6317", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate with a letter and begin with a character", "source": "word that ends with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6319", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter", "source": "word that starts with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6327", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a character and ends with a capital letter", "source": "word that ends with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6344", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a lowercase letter and begins with a letter", "source": "word that ends with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6370", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with any character and ends with abc", "source": "word that ends with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6380", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel and ending with a lowercase letter", "source": "word that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_7", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a letter and ending with a character", "source": "word that ends with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_48", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with character", "source": "word that starts with letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_52", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts as well as ends with vowel", "source": "word that starts with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_56", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  and that starts with character", "source": "number that starts with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_57", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with the word abc and ends with a lowercase letter", "source": "word that starts with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_64", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that ends with lowercase letter", "source": "word that ends with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_74", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes abc and that concludes with a letter", "source": "word that ends with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_83", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends with a letter and also ends in a capital letter", "source": "word that ends with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_88", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with capital letter", "source": "word that starts with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_90", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has no numbers or characters that end with abc", "source": "word that ends with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_100", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  and that ends with character", "source": "number that ends with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_103", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that starts with letter", "source": "word that starts with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_106", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a capital letter and stops with a vowel", "source": "word that starts with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_119", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that ends with letter", "source": "word that starts with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_121", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with  abc ", "source": "word that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_130", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a lowercase letter and a vowel", "source": "word that starts with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_133", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with a character and that concludes with a character", "source": "number that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_134", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with character", "source": "word that starts with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_139", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a letter and also starts with a letter", "source": "word that starts with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_152", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a character and the word abc", "source": "word that ends with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_158", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number starting with the characters 123 and ending with a character", "source": "number that starts with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_177", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a lowercase letter", "source": "word that ends with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_183", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a character and begins with a capital letter", "source": "word that ends with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_203", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "is there a word that ends in a lowercase vowel", "source": "word that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_205", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a vowel and abc", "source": "word that starts with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_207", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number staring and ending with 123", "source": "number that ends with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_214", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning and ending with a lowercase letter", "source": "word that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_221", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  and that ends with  123 ", "source": "number that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_232", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a lowercase letter and a letter", "source": "word that starts with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_237", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has the smaller number 123 in the beginning that also begins with a character", "source": "number that starts with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_244", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with   abc  and ends with a capital letter", "source": "word that ends with capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_247", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number sequence has 123 at both the start and end", "source": "number that starts with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_257", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with character", "source": "word that starts with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_258", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a character and that begins with a vowel", "source": "word that ends with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_272", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a capital letter and a character", "source": "word that starts with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_274", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with a vowel and begins with a letter", "source": "word that ends with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_289", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  and that starts with  123 ", "source": "number that ends with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_294", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that starts with letter", "source": "word that starts with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_296", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with abc and ending with any lowercase letter", "source": "word that starts with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_326", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character and that ends with  123 ", "source": "number that ends with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_340", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that starts with  abc ", "source": "word that ends with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_343", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starts with characters and ends with letters", "source": "word that starts with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_356", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning and ending with abc", "source": "word that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_358", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a capital and ends with a character", "source": "word that starts with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_368", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts and ends with the smaller word abc", "source": "word that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_370", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with letter", "source": "word that starts with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_372", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel and ending with an uppercase letter", "source": "word that starts with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_423", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins and stops with capital letters", "source": "word that starts with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_424", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with abc and begins with a capital letter", "source": "word that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_428", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that ends with  abc ", "source": "word that starts with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_433", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with letters", "source": "word that starts with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_437", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a letter and ending with a capital letter", "source": "word that starts with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_438", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that starts with vowel", "source": "word that ends with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_452", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a character and end with a letter", "source": "word that starts with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_458", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with any lowercase letter", "source": "word that ends with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_467", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a letter and ending with abc", "source": "word that ends with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_470", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with character", "source": "word that ends with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_471", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with a capital letter but ends with the word abc", "source": "word that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_480", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a lowercase letter and abc", "source": "word that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_490", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a lower case vowel", "source": "word that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_512", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a character that begins with abc", "source": "word that ends with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_513", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a digit that ends with a character", "source": "number that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_514", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words starting out lowercase", "source": "word that starts with letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_515", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has vowel at the beginning and starts with a capital letter", "source": "word that starts with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_516", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with both a character and a lowercase letter", "source": "word that starts with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_523", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "name a word ending with a letter especially capital letter", "source": "word that ends with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_529", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with letter", "source": "word that ends with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_579", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that ends with capital letter", "source": "word that ends with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_582", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that terminates with a character and begins with 123", "source": "number that ends with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_606", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word will start with a vowel and end with a character", "source": "word that ends with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_611", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with a lowercase vowel", "source": "word that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_613", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter the beginning and a lowercase letter at the end", "source": "word that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_625", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with letter", "source": "word that ends with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_627", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and a character", "source": "word that starts with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_632", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a character and ends with a lowercase letter", "source": "word that ends with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_633", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a vowel and a character", "source": "word that ends with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_635", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with a vowel as first character", "source": "word that starts with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_646", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with  abc ", "source": "word that ends with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_648", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that concludes with both a lowercase letter and abc", "source": "word that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_671", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with letter", "source": "word that ends with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_672", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words start with a letter and end with a vowel", "source": "word that starts with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_675", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with vowel", "source": "word that ends with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_679", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word starts with a letter and ends with a vowel", "source": "word that ends with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_692", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with an uppercase letter", "source": "word that starts with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_694", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a character and ends with  abc ", "source": "word that starts with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_715", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a letter and also ends with a character", "source": "word that starts with letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_748", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with abc and end with capital letters", "source": "word that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_759", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes and begins with a letter", "source": "word that ends with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_763", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what  word that ends with character and that starts with capital letter", "source": "word that ends with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_768", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends and starts with the word abc", "source": "word that ends with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_777", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that starts with letter", "source": "word that ends with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_785", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starts with a vowel and ends with a character", "source": "word that ends with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_794", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that starts with capital letter", "source": "word that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_819", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in abc and also starts with a vowel", "source": "word that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_828", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with a letter", "source": "word that starts with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_836", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a vowel", "source": "word that starts with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_848", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that ends with vowel", "source": "word that ends with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_850", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a lowercase vowel", "source": "word that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_851", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a letter and that ends with a lowercase letter", "source": "word that ends with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_860", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a character and also ends with abc", "source": "word that ends with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_868", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter at the beginning and the smaller word abc at the end", "source": "word that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_872", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that finishes with character and has a letter at the end", "source": "word that ends with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_875", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that ends with character", "source": "word that starts with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_893", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter at the end and a vowel in the beginning", "source": "word that ends with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_904", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with abc and a letter", "source": "word that ends with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_906", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with vowels and conclude with lowercase letters", "source": "word that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_907", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with a character and with abc", "source": "word that ends with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_908", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a capital letter and starts with a capital letter", "source": "word that ends with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_920", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that ends with vowel", "source": "word that starts with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_925", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that ends with vowel", "source": "word that ends with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_932", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a vowel and that concludes with a character", "source": "word that ends with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_946", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that starts with letter", "source": "word that ends with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_953", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with   abc  and ends with a lowercase letter", "source": "word that ends with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_969", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a character and a capital letter", "source": "word that starts with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1003", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word both starts and ends with a lowercase letter", "source": "word that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1009", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a letter ending with a capital letter", "source": "word that starts with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1013", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "name a word starting with a character and ending with a capital letter", "source": "word that starts with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1014", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with capital letter", "source": "word that starts with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1015", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with vowel", "source": "word that starts with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1017", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with a letter and also begins with a vowel", "source": "word that starts with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1040", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a lowercase letter", "source": "word that ends with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1051", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a lowercase letter and end with a letter", "source": "word that ends with letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1061", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with a series of capital letters", "source": "word that starts with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1091", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a capital letter and character", "source": "word that ends with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1092", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with any character and ends with any vowel", "source": "word that ends with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1094", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts and ends with any capital letter", "source": "word that ends with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1096", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that begins with 123 and ends with a special character", "source": "number that starts with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1102", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a character and also a lowercase letter", "source": "word that starts with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1104", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word ends with a vowel and also ends in a capital letter", "source": "word that ends with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1106", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character and with a capital letter", "source": "word that starts with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1110", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a character and terminates with a vowel", "source": "word that starts with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1122", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that starts with capital letter", "source": "word that ends with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1126", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with an uppercase letter and ends with any vowel", "source": "word that ends with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1131", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number begins with a character and ends with   123 ", "source": "number that ends with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1151", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  and that starts with character", "source": "number that starts with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1162", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that ends with character", "source": "word that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1163", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with  abc ", "source": "word that starts with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1182", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and a lowercase letter", "source": "word that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1193", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a letter and that has a lowercase letter at the end", "source": "word that starts with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1204", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with abc and has a vowel at the end", "source": "word that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1210", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that starts with  123 ", "source": "number that starts with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1215", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter and a vowel at the end", "source": "word that ends with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1219", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with lowercase letter", "source": "word that starts with letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1225", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that ends with  abc ", "source": "word that ends with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1226", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a letter and begins with a vowel", "source": "word that ends with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1240", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel and ending with abc", "source": "word that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1250", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that ends with letter", "source": "word that ends with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1261", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with vowel", "source": "word that starts with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1265", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has 123 at the end", "source": "number that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1273", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a vowel and ends with a character", "source": "word that starts with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1278", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a lowercase letter ending with a character", "source": "word that starts with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1297", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with the same character it begins with", "source": "word that ends with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1345", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a capital and ending with a vowel", "source": "word that starts with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1349", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that starts with letter", "source": "word that starts with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1362", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that starts and ends with a capital letter", "source": "word that ends with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1386", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with abc and that concludes with a lowercase letter", "source": "word that ends with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1391", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with lowercase letter and ending with abc", "source": "word that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1406", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with any letter but must end with a lowercase letter", "source": "word that ends with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1408", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "locate the word that begins with a small letter and finishes by using a capitalized letter", "source": "word that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1409", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with any letter but ends with sequence abc", "source": "word that ends with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1416", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that ends with vowel", "source": "word that ends with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1427", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a vowel and that begins with a lowercase letter", "source": "word that starts with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1430", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number ends with 123 and starts with a a character", "source": "number that ends with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1437", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that initiate with a capital letter and characters", "source": "word that starts with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1448", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that ends with letter", "source": "word that ends with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1463", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with character and with a letter", "source": "word that starts with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1476", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a character and ends with   abc ", "source": "word that ends with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1503", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that starts with vowel", "source": "word that ends with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1516", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel at its end", "source": "word that ends with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1528", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends with the number 123 but starts with any character", "source": "number that ends with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1536", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with the number sequence 123 and finish with a character", "source": "number that starts with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1545", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a letter and ends with abc", "source": "word that starts with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1556", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with lowercase letter", "source": "word that starts with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1566", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a character and starts with a letter", "source": "word that starts with letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1593", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "lines that stops with a character or digit", "source": "line that ends with character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_366", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line ending with 123 or any digit", "source": "line that ends with `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_405", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that finish with a digit or abc", "source": "line that ends with `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_509", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line ending with a character or a digit", "source": "line that ends with character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_576", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "what line ends with 123 or another digit", "source": "line that ends with `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_934", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with character or digit", "source": "line that ends with character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_937", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that end with either a letter or number", "source": "line that ends with vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_1404", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that finishes in lowercase or a numeral", "source": "line that ends with lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_1682", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with capital letter or digit", "source": "line that ends with capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_1699", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with  123  or digit", "source": "line that ends with `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_2117", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "what line ends with a digit or abc", "source": "line that ends with `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_2197", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that concludes with a letter or a digit", "source": "line that ends with letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_2451", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with vowel or digit", "source": "line that ends with vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_2556", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line ending with either a capital letter or a single digit", "source": "line that ends with capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_2570", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that stops after a capital letter or digit", "source": "line that ends with capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_3256", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line ending with either a vowel or a digit", "source": "line that ends with vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_3294", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with lowercase letter or digit", "source": "line that ends with lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_3415", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with  123  or digit", "source": "line that ends with `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_3559", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that contain a digit ora vowel at the end", "source": "line that ends with vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_3713", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line ending either with 123 or a digit", "source": "line that ends with `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_3866", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line concludes wletter or digit", "source": "line that ends with letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_3877", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that have a lowercase letter or number at the end", "source": "line that ends with lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_4106", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with lowercase letter or digit", "source": "line that ends with lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_4352", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that finish with the sequence of 123 or any other digit", "source": "line that ends with `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_4576", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line ending with either abc or a digit", "source": "line that ends with `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_4725", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line ending with either a letter or a number", "source": "line that ends with letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_4754", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with letter or digit", "source": "line that ends with letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_4794", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that can be ended with a capital letter or number", "source": "line that ends with capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_4913", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "what line ends in either a capital letter or in a digit", "source": "line that ends with capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_5053", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line ending with either a lowercase letter or a digit", "source": "line that ends with lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_5459", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that terminate with either a capital letter or digit", "source": "line that ends with capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_5526", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that has a lowercase letter or digit at the end", "source": "line that ends with lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_5702", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line that terminates with a character or digit", "source": "line that ends with character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_6153", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that end with either a vowel or a digit", "source": "line that ends with vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_461", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that stops after 123 or any digits", "source": "line that ends with `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_479", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line that terminates with a letter or a digit", "source": "line that ends with letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_630", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "what is a line that ends with either a lowercase letter or with a digit", "source": "line that ends with lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_797", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line ending in either a digit or any letter", "source": "line that ends with letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_911", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that finishes with a vowel or digit", "source": "line that ends with vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_938", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with character or digit", "source": "line that ends with character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_956", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with vowel or digit", "source": "line that ends with vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_1055", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that has a character or a  number at the end", "source": "line that ends with character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_1217", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with  abc  or digit", "source": "line that ends with `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_1392", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that conclude with the smaller word abc or a digit", "source": "line that ends with `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_1410", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with capital letter or digit", "source": "line that ends with capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_1512", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that starts with the word  abc  after the number  123 ", "source": "line that starts with the word `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_285", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that initiate with a smaller word abc before the number sequence 123", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_669", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with the word  abc  before the number  123 ", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_777", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts 123 followed by the word abc", "source": "line that starts with the word `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_792", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "123 shall be after abc at the beginning of the line", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3411", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line begins with 123 and then abc", "source": "line that starts with the word `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3911", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with the word  abc  after the number  123 ", "source": "line that starts with the word `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4113", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "is there a line starting with abc that immediately continues 123", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4136", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that uses the word abc after the number 123", "source": "line that starts with the word `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4528", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has 123 after the starting word abc", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5839", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line where the word abc appears before the number 123", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_766", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that complete with the word abc or the digit 123", "source": "line that ends with the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_841", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "lines that stops with abc or 123", "source": "line that ends with the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_1435", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with the word  abc  or the number  123 ", "source": "line that ends with the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_2952", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "which line ends with the number 123 or the word abc", "source": "line that ends with the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_3829", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "a line ending with either abc or 123", "source": "line that ends with the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_4222", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line ends with either abc or 123", "source": "line that ends with the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_914", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with the word  abc  or the number  123 ", "source": "line that ends with the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_1284", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "a line ending either with the word abc or with a digit", "source": "line that ends with the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_321", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line that ends with  abc  or a digit", "source": "line that ends with the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_645", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that has a number or abc at the end", "source": "line that ends with the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_676", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that have a number or the smaller word abc at the end", "source": "line that ends with the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_2075", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with a number or the word abc", "source": "line that ends with the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_1181", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "numbers that begins with a character after digits", "source": "number that starts with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_87", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has a character in the beginning before a digit", "source": "number that starts with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1192", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that begins with a digit followed by 123", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1334", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that starts with any character before a digit", "source": "number that starts with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1856", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  after digit", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1945", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number beginning with 123 and then a digit", "source": "number that starts with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2163", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with 123 before a digit", "source": "number that starts with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2568", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  after digit", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2718", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that begins with 123 preceded by a digit", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2891", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character before digit", "source": "number that starts with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2921", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with a digit followed by a character", "source": "number that starts with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3154", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with a character followed by a digit", "source": "number that starts with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3354", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number commences wdigit then character", "source": "number that starts with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3453", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that start with digits and then 123 after", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3517", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what numbers begin with 123 followed by a digit", "source": "number that starts with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4126", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character before digit", "source": "number that starts with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4375", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses the number 123 after any digit", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4472", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number than starts with 123 before any other digit", "source": "number that starts with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4877", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  before digit", "source": "number that starts with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5600", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with 123 followed by any digit", "source": "number that starts with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6271", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers with a digit followed by 123 at the beginning", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_66", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number beginning with a character followed by digits", "source": "number that starts with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1087", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character after digit", "source": "number that starts with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1229", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "lines that have two letters at the beginning", "source": "line that starts with two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_26", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at least two vowel", "source": "line that starts with at least two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_145", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line begins with at the least two letters", "source": "line that starts with at least two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_183", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at most two capital letter", "source": "line that starts with at most two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_294", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that initiate with only two numbers", "source": "line that starts with two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_340", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two letter", "source": "line that starts with two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_543", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that initiate with no more than two characters", "source": "line that starts with at most two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_545", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that starts with two vowels", "source": "line that starts with two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_552", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line uses at most two capital letters at the beginning", "source": "line that starts with at most two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_617", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line beginning with two words or less", "source": "line that starts with at most two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_653", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that begins with a maximum of two uppercase letters", "source": "line that starts with at most two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_686", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line beginning with two lowercase letters or less", "source": "line that starts with at most two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_707", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two or less numbers", "source": "line that starts with at most two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_775", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at least two lowercase letter", "source": "line that starts with at least two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_912", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which line begins with at the most two letters", "source": "line that starts with at most two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_926", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two capital letter", "source": "line that starts with two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_946", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lind starting with two or less digits", "source": "line that starts with at most two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_959", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begins with at least 2 characters", "source": "line that starts with at least two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_985", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begin with two or more words", "source": "line that starts with at least two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1113", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line beginning with two lowercase letters or less", "source": "line that starts with at most two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_1195", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that begins with two vowels", "source": "line that starts with two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1202", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begin with no less than two digits", "source": "line that starts with at least two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1228", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two capital letter", "source": "line that starts with two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1232", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line beginning with one or two numbers", "source": "line that starts with at most two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_1254", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begin with no more than two words", "source": "line that starts with at most two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_1261", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two number", "source": "line that starts with two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1289", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that begins with atmost two numbers", "source": "line that starts with at most two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_1310", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begins with at most 2 digits", "source": "line that starts with at most two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_1394", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line beginning with two lowercase letters", "source": "line that starts with two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1485", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line begins wtwo numbers", "source": "line that starts with two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1535", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that initiate with no more than two words", "source": "line that starts with at most two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_1650", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begins with at least 2 vowels", "source": "line that starts with at least two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1969", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at most two digit", "source": "line that starts with at most two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_2041", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line begins with two lowercase letters", "source": "line that starts with two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2050", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at least two number", "source": "line that starts with at least two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2089", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begins with 2 words", "source": "line that starts with two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2129", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that begins with two or more capital letters", "source": "line that starts with at least two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2140", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line starts with at least two words", "source": "line that starts with at least two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2191", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "the line can start with no more than two digits", "source": "line that starts with at most two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_2259", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line begins wtwo noncapitalized letters", "source": "line that starts with two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2337", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that begins with a minimum of two words", "source": "line that starts with at least two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2400", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that begins with no more than two letters", "source": "line that starts with at most two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_2433", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begin with two numbers", "source": "line that starts with two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2437", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that begins with two vowels", "source": "line that starts with two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2579", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "whats a line starting with two vowels", "source": "line that starts with two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2582", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines beginning with no more than two lowercase letters", "source": "line that starts with at most two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_2584", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begins with at most 2 lowercase letters", "source": "line that starts with at most two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_2600", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begins with 2 capital letters", "source": "line that starts with two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2677", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that begins with two characters", "source": "line that starts with two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2689", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begins with at least 2 capital letters", "source": "line that starts with at least two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2771", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line beginning with any two uppercase letters", "source": "line that starts with two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2811", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line beginning with exactly two digits", "source": "line that starts with two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2827", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that has a maximum of two letters in the beginning", "source": "line that starts with at most two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_2895", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line with two capital letters at the beginning", "source": "line that starts with two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2946", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begin with no more than two vowels", "source": "line that starts with at most two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3126", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begins with 2 digits", "source": "line that starts with two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3200", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that initiate with two letters", "source": "line that starts with two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3213", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line beginning with two numbers", "source": "line that starts with two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3243", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two words", "source": "line that starts with two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3274", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at least two number", "source": "line that starts with at least two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3357", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at least two character", "source": "line that starts with at least two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3382", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that starts with at least two numbers", "source": "line that starts with at least two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3384", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two word", "source": "line that starts with two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3389", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line begins with two letters", "source": "line that starts with at most two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3529", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that begins with no fewer than two characters", "source": "line that starts with at least two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3621", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begins with 2 vowels", "source": "line that starts with two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3666", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line beginning with no more than two vowels", "source": "line that starts with at most two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3806", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which line starts with two letters", "source": "line that starts with two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3814", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines with two or fewer characters at their start", "source": "line that starts with at most two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3854", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line beginning with a minimum of two letters", "source": "line that starts with at least two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3926", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line with two or more characters at its start", "source": "line that starts with at least two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3991", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at most two character", "source": "line that starts with at most two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_4042", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "two or more capital letters beginning a line", "source": "line that starts with at least two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4128", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that begins with a two words", "source": "line that starts with two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_4139", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begin with two or more lowercase letters", "source": "line that starts with at least two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4219", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at most two digit", "source": "line that starts with at most two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_4258", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line beginning with a least two letters", "source": "line that starts with at least two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4336", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two digit", "source": "line that starts with two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_4354", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at most two lowercase letter", "source": "line that starts with at most two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_4387", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line begun with two digits or less", "source": "line that starts with at least two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4454", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line begins with at least two lowercase letters", "source": "line that starts with at least two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4497", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that begins with at least two numbers", "source": "line that starts with at least two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4525", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at least two digit", "source": "line that starts with at least two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4551", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what is a line that begins with two words at the most", "source": "line that starts with at most two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_4614", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two letters or less", "source": "line that starts with at most two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_4617", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line beginning with two or more vowels", "source": "line that starts with at least two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4712", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begin with no more than two lowercase letters", "source": "line that starts with at most two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_4719", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what is a line that begins with two numbers", "source": "line that starts with two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_4830", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that start with two characters", "source": "line that starts with two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_4840", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line beginning with two or more vowels", "source": "line that starts with at least two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4860", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "the line starts with at least two letters", "source": "line that starts with at least two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4899", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which line begins with two characters", "source": "line that starts with two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_4955", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begin with two or more words", "source": "line that starts with at least two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5042", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at least two capital letter", "source": "line that starts with at least two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5056", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two word", "source": "line that starts with two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_5183", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that starts with two digits", "source": "line that starts with two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_5314", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at least two character", "source": "line that starts with at least two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5370", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begins with at least 2 number", "source": "line that starts with at least two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5375", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that has two words in the beginning", "source": "line that starts with two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_5397", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line beginning with two digits or more", "source": "line that starts with at least two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5420", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line with two words in the beginning", "source": "line that starts with two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_5651", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that has at most two digits in the beginning", "source": "line that starts with at most two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5689", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "the line sarts with two letters or numbers", "source": "line that starts with two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_5695", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line beginning with no less than two lowercase letters", "source": "line that starts with at least two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5731", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that begins with at least two lowercase letters", "source": "line that starts with two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_5878", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines with two characters or less", "source": "line that starts with at most two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5896", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that begins with two numbers", "source": "line that starts with two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_6050", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at most two lowercase letter", "source": "line that starts with at most two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_6181", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at least two vowel", "source": "line that starts with at least two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_6201", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line begins wtwo letters minimum", "source": "line that starts with at least two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_6227", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "whats a line that starts with no more than two vowels", "source": "line that starts with at most two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_6290", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two digit", "source": "line that starts with two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_23", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that begins with two or more lowercase letters", "source": "line that starts with at least two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_30", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at least two capital letter", "source": "line that starts with at least two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_78", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that has a minimum of two vowels at the beginning", "source": "line that starts with at least two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_98", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two character", "source": "line that starts with two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_165", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at least two digit", "source": "line that starts with at least two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_195", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line beginning with two or more numbers", "source": "line that starts with at least two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_211", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line beginning with any two characters", "source": "line that starts with two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_218", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line starts with no more than two small words", "source": "line that starts with at most two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_235", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two vowel", "source": "line that starts with two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_253", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line begins with no more than two numbers", "source": "line that starts with at most two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_288", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line beginning with two or more characters", "source": "line that starts with at least two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_374", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line beginning with two or more digits", "source": "line that starts with at least two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_375", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that starts with any two letters", "source": "line that starts with two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_491", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two character", "source": "line that starts with two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_521", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line beginning with any two letters", "source": "line that starts with two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_594", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line starts out with two numbers", "source": "line that starts with two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_626", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begin with more than one lowercase letter", "source": "line that starts with at least two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_653", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line with at least two characters at the beginning", "source": "line that starts with at least two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_687", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that begins with at a maximum of two capital letter", "source": "line that starts with at most two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_732", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "the line begins with two lowercase letters", "source": "line that starts with two lowercase letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_832", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line beginning with no more than two capital letters", "source": "line that starts with at most two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_859", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that begins with no more than two vowels", "source": "line that starts with at most two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_979", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line begins with two capital letters or less", "source": "line that starts with at most two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1005", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that start with a double vowel or better", "source": "line that starts with at least two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_1078", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two letter", "source": "line that starts with two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_1143", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that begins with two capital letters", "source": "line that starts with two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_1156", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two or fewer numbers", "source": "line that starts with at most two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1254", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that begins with no more than two vowels", "source": "line that starts with at most two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1300", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that kicks off with two or more capital letters", "source": "line that starts with at least two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_1322", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "is there a line beginning with two capitalized letters minimum", "source": "line that starts with at least two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_1326", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begins with at most 2 characters", "source": "line that starts with at most two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1382", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that begins with a minimum of two words", "source": "line that starts with at least two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_1399", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that begins with at most two characters", "source": "line that starts with at most two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1425", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begin with two or more digits", "source": "line that starts with at least two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_1429", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that start with two or more digits", "source": "line that starts with at least two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_1459", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line beginning with two digits or less", "source": "line that starts with at most two digit", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1461", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that has the word abc", "source": "line that contains the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2820", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that contains the word  abc ", "source": "line that contains the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4005", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes the word abc and that includes the word abc", "source": "line that contains the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4054", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains   abc ", "source": "line that contains the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4061", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains at least two letter", "source": "line that contains at least two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_11", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines where at least two capital letters appear", "source": "line that contains at least two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_29", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two digit", "source": "line that contains at most two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_92", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines with at least two characters", "source": "line that contains at least two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_140", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most 2 capital letters", "source": "line that contains at most two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_169", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line has at least two letters in it", "source": "line that contains at least two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_196", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line using two numbers", "source": "line that contains two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_212", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "state a line that has at least two digits", "source": "line that contains at least two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_270", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two digit", "source": "line that contains at least two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_299", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that include two or more vowels", "source": "line that contains at least two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_546", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has at least two digits", "source": "line that contains at most two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_751", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what line that contains two word", "source": "line that contains two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_754", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that contains at least two lowercase letters", "source": "line that contains at least two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_755", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with two digits or less", "source": "line that contains at most two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_827", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what line contains at most two numbers", "source": "line that contains at most two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_836", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two number", "source": "line that contains at least two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_907", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what is a line that has at least two words in it", "source": "line that contains two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_939", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two capital letter", "source": "line that contains at most two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_979", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a two character or longer line", "source": "line that contains at least two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1074", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two vowel", "source": "line that contains two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_1103", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line with two numbers", "source": "line that contains two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_1122", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two digit", "source": "line that contains at least two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1132", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what is a line with two or more numbers in it", "source": "line that contains at least two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1140", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two character", "source": "line that contains at least two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1175", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line where two letters appear", "source": "line that contains two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_1178", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two vowel", "source": "line that contains at least two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1208", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two letter", "source": "line that contains at most two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1243", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most two lowercase letters", "source": "line that contains at most two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1284", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that only has two characters", "source": "line that contains two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_1301", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what line contains at least two capital letters", "source": "line that contains at least two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1327", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line including no fewer than two capital letters", "source": "line that contains at least two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1398", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that have more than one character", "source": "line that contains at least two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1400", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes a max of two characters", "source": "line that contains at most two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1452", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes a maximum of two small letters", "source": "line that contains at most two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1519", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with two words or less", "source": "line that contains at most two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1551", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two number", "source": "line that contains at least two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1594", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line using two or more lowercase letters", "source": "line that contains at least two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1626", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has a maximum to two uppercase letters", "source": "line that contains at most two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1630", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that contains exactly two numbers", "source": "line that contains two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_1636", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that have two or more lowercase letters", "source": "line that contains at least two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1643", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line containing two or more letters", "source": "line that contains at least two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1736", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with two capital letters or less in it", "source": "line that contains at most two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1788", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has two digits at most", "source": "line that contains at most two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1814", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that include two capital letters", "source": "line that contains two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_1833", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most 2 numbers", "source": "line that contains at most two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1900", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two character", "source": "line that contains at most two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1961", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes two small letters", "source": "line that contains two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_2011", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most 2 words", "source": "line that contains at most two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_2092", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has at most two letters", "source": "line that contains at most two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_2333", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that have two characters", "source": "line that contains two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_2357", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes two digits", "source": "line that contains two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_2384", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line using one or two numbers", "source": "line that contains at most two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_2514", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two number", "source": "line that contains two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_2575", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line using two or more words", "source": "line that contains at least two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_2726", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two character", "source": "line that contains at least two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_2782", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that has two or more numbers", "source": "line that contains at least two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_2879", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two lowercase letter", "source": "line that contains at most two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_3035", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two lowercase letter", "source": "line that contains two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3235", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line containing any two characters", "source": "line that contains two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3265", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what line conatins two lower case letters", "source": "line that contains two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3341", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that contain two vowels", "source": "line that contains two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3342", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two lowercase letter", "source": "line that contains at most two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_3359", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "the line must be comprised of at least two words", "source": "line that contains at least two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_3383", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line using two or more digits", "source": "line that contains at least two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_3476", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines with two capital letters", "source": "line that contains two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3526", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes at least two words", "source": "line that contains at least two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_3551", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with two digits in it", "source": "line that contains two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3562", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes two characters", "source": "line that contains two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3567", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "whats a line with two plus vowels", "source": "line that contains at least two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_3647", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line using two lowercase letters", "source": "line that contains two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3683", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that has two capital letters", "source": "line that contains two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3769", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line containing at least two words", "source": "line that contains at least two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_3797", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has a maximum of two vowels", "source": "line that contains at most two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_3900", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses two capital letters", "source": "line that contains two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3919", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "which line has at least two vowels in it", "source": "line that contains at least two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_4110", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line containing two letters", "source": "line that contains two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_4170", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that contain two or more capital letters", "source": "line that contains at least two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_4201", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that includes two words", "source": "line that contains two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_4269", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with no more than two lower case letters", "source": "line that contains at most two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4272", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two vowel", "source": "line that contains at most two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4316", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line has two vowels", "source": "line that contains two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_4331", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that include no more than two words", "source": "line that contains at most two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4349", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has at least two words", "source": "line that contains at least two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_4427", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two vowel", "source": "line that contains two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_4459", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has two capitals at most", "source": "line that contains at most two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4534", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that contain two or more numbers", "source": "line that contains at least two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_4572", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with at least 2 lowercase letters", "source": "line that contains at least two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_4574", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at least 2 lowercase letters", "source": "line that contains at least two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_4597", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two capital letter", "source": "line that contains two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_4661", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has two or fewer lowercase letters", "source": "line that contains at most two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4670", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what  line that contains at most two vowel", "source": "line that contains at most two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4707", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes a maximum of two characters", "source": "line that contains at most two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4779", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses 2 lowercase letters", "source": "line that contains two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_4919", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that includes no more than two vowels", "source": "line that contains at most two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4968", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two character", "source": "line that contains two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_4997", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with two or less digits", "source": "line that contains at most two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_5065", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has at most two letters", "source": "line that contains at most two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_5145", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what is a line that has at the most two words in it", "source": "line that contains at most two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_5242", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what is a line that has at least two digits in it", "source": "line that contains at least two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_5278", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses 2 digits", "source": "line that contains two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_5360", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "is there a line that has two digits minimum inside of it", "source": "line that contains at least two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_5392", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line where two numbers are had", "source": "line that contains two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_5456", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two letter", "source": "line that contains two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_5518", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "which line has in it at the most two digits", "source": "line that contains at most two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_5520", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line with two special characters", "source": "line that contains two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_5580", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two character", "source": "line that contains two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_5679", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two digit", "source": "line that contains at most two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_5691", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses 2 vowels", "source": "line that contains two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_5792", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line containing two numbers", "source": "line that contains two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_5889", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most two character", "source": "line that contains at most two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_5905", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most 2 vowel", "source": "line that contains at most two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_5920", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line including exactly two vowels", "source": "line that contains two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_5951", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that includes no more than two numbers", "source": "line that contains at most two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_6052", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two words", "source": "line that contains two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_6090", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with two lowercase letters or less in it", "source": "line that contains at most two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_6091", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines which include at least two capital letters", "source": "line that contains at least two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_6127", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that contains two letters", "source": "line that contains two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_6165", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "which line has two lowercase letters somewhere in it", "source": "line that contains two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_6307", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most 2 digits", "source": "line that contains at most two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_6345", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses 2 words", "source": "line that contains two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_6351", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains no more than two words", "source": "line that contains at most two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_54", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most two letter", "source": "line that contains at most two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_69", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two lowercase letter", "source": "line that contains at least two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_76", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two lowercase letter", "source": "line that contains two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_99", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two word", "source": "line that contains at most two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_249", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that has no more than two capital letters", "source": "line that contains at most two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_250", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what is a line that has at least two letters in it", "source": "line that contains at least two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_383", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with no more than two characters in it", "source": "line that contains at most two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_419", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two word", "source": "line that contains at most two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_488", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two digit", "source": "line that contains two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_556", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two character", "source": "line that contains at most two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_573", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at least 2 letters", "source": "line that contains at least two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_578", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that utilize two vowels", "source": "line that contains two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_698", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has at least two vowels", "source": "line that contains at least two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_710", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at least 2 vowels", "source": "line that contains at least two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_781", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at least 2 digits", "source": "line that contains at least two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_816", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with at least two characters in it", "source": "line that contains at least two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_820", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses two numbers", "source": "line that contains two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_824", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line includes two vowels maximum", "source": "line that contains at most two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_866", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two capital letter", "source": "line that contains two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_869", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what is a line that has at least two characters in it", "source": "line that contains at least two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_878", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with two capital letters or less", "source": "line that contains two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_912", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at least 2 number", "source": "line that contains at least two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_922", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two letter", "source": "line that contains at most two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_976", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "find a line that contains a maximum of two letters in it", "source": "line that contains at most two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_1058", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that include no more than two vowels", "source": "line that contains at most two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_1073", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has two or more numbers", "source": "line that contains at least two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_1135", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with two letters", "source": "line that contains two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_1201", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes at least two lettersq", "source": "line that contains two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_1258", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two number", "source": "line that contains at most two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_1271", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two letters", "source": "line that contains at least two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_1324", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two letter", "source": "line that contains at least two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_1513", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that uses two digits", "source": "line that contains two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_1529", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two word", "source": "line that contains two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_1539", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that contains either a capital letter or the number 123", "source": "line that contains capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_36", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that include lowercase letters or the number sequence 123", "source": "line that contains lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1028", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line including a lowercase letter or the number 123", "source": "line that contains lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1106", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line has a character or 123", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1210", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that includes 123 or the number 123", "source": "line that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1492", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains  123  or the number  123 ", "source": "line that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1563", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line contains a vowel or the number   123 ", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1673", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line using either a character of 123", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1946", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains vowel or the number  123 ", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_2224", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line contains 123", "source": "line that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_2229", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that have a vowel or 123", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_3006", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  or the number  123 ", "source": "line that contains `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_3482", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains the number 123", "source": "line that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4101", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what is a line that contains the number 123", "source": "line that contains letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4112", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that uses with either letter or number 123", "source": "line that contains lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4213", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that has either letters or the numeric sequence 123", "source": "line that contains letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4415", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that includes a character or the number 123", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4439", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that utilizes either a vowel or the number 123", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4807", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a vowel or the number 123 on a single line", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4810", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what  line that contains letter or the number  123 ", "source": "line that contains letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5008", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that uses characters or 123", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5029", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line using the either the character or number 123", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5038", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that includes a capital letter or the number 123", "source": "line that contains capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5143", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what is a line that has a capital letter or the number 123 in it", "source": "line that contains capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5487", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  or the number  123 ", "source": "line that contains `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5771", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that has a lowercase letter or 123", "source": "line that contains lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_6122", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that has a vowel or 123 in it", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_6360", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains either a letter or the number 123", "source": "line that contains letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_159", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that have letters and the number 123", "source": "line that contains letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_236", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains character or the number  123 ", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_545", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that contains  abc  or  123 ", "source": "line that contains `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_830", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that has either a capital letter or the number 123 within it", "source": "line that contains capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_933", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that include the characters abc or include the number 123", "source": "line that contains `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_1123", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains either a capital letter or the number 123", "source": "line that contains capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_1141", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains character or the number  123 ", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_1164", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines tha have either abc or 123 within", "source": "line that contains `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_1357", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines with lowercase letters or 123", "source": "line that contains lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_1398", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that includes within it either the sequence 123 or a letter", "source": "line that contains letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_1549", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that does not contain  abc ", "source": "line that not contains `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\"))", "qid": "regex_train_58", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not contain  123 ", "source": "line that not contains `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\"))", "qid": "regex_train_70", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line not containing any lowercase letters", "source": "line that not contains lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_173", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line with no characters in it", "source": "line that not contains character", "target": "(call + (string \"~(\") (call + (string .*) (string .) (string .*)) (string \")\"))", "qid": "regex_train_869", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line without small letter", "source": "line that not contains lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_989", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not use vowels", "source": "line that not contains vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_1038", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not have a capital letter", "source": "line that not contains capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_train_1337", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line without any lowercase letters", "source": "line that not contains lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_1402", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not have a capital letter", "source": "line that not contains capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_train_1681", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "what  line that not contains character", "source": "line that not contains character", "target": "(call + (string \"~(\") (call + (string .*) (string .) (string .*)) (string \")\"))", "qid": "regex_train_1704", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines without any vowels at all", "source": "line that not contains vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_1748", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains capital letter", "source": "line that not contains capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_train_1839", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "what is a line that does not have 123 in it", "source": "line that not contains `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\"))", "qid": "regex_train_1858", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains letter", "source": "line that not contains letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_2626", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not include a letter", "source": "line that not contains letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_3062", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not have a character in it", "source": "line that not contains character", "target": "(call + (string \"~(\") (call + (string .*) (string .) (string .*)) (string \")\"))", "qid": "regex_train_3191", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not use capital letters", "source": "line that not contains capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_train_3268", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line containing no characters", "source": "line that not contains character", "target": "(call + (string \"~(\") (call + (string .*) (string .) (string .*)) (string \")\"))", "qid": "regex_train_3273", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not contain a letter", "source": "line that not contains letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_3330", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains character", "source": "line that not contains character", "target": "(call + (string \"~(\") (call + (string .*) (string .) (string .*)) (string \")\"))", "qid": "regex_train_3635", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that cannot utilize any lowercase letters", "source": "line that not contains lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_3936", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line without letters", "source": "line that not contains letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_4095", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not contain a capital letter", "source": "line that not contains capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_train_4507", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not have a vowel", "source": "line that not contains vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_4736", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not contain a vowel", "source": "line that not contains vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_4738", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not include a small letter", "source": "line that not contains lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_5102", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not include a character", "source": "line that not contains character", "target": "(call + (string \"~(\") (call + (string .*) (string .) (string .*)) (string \")\"))", "qid": "regex_train_5120", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains  123 ", "source": "line that not contains `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\"))", "qid": "regex_train_5150", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not have the digits 123 within them", "source": "line that not contains `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\"))", "qid": "regex_train_5156", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines where abc does not appear", "source": "line that not contains `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\"))", "qid": "regex_train_5181", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains lowercase letter", "source": "line that not contains lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_5539", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not contain a letter", "source": "line that not contains letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_5615", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains  123 ", "source": "line that not contains `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\"))", "qid": "regex_train_5800", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line not using abc", "source": "line that not contains `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\"))", "qid": "regex_train_6017", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line with only numbers and letters", "source": "line that not contains character", "target": "(call + (string \"~(\") (call + (string .*) (string .) (string .*)) (string \")\"))", "qid": "regex_train_6234", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "what line does not contain a vowel", "source": "line that not contains vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_test_55", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not include any capital letters", "source": "line that not contains capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_test_360", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains vowel", "source": "line that not contains vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_test_738", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not use letters", "source": "line that not contains letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_test_760", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not use 123", "source": "line that not contains `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\"))", "qid": "regex_test_909", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "numbers that terminate with the smaller word abc or a digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_842", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends with the word abc or any digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3111", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with abc or any digit at the end", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3714", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with either abc or digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4014", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that concludes with the word abc or a digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1006", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with the word  abc  or digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1351", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "lines that uses lowercase letters and ends with it too", "source": "line that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a character that finishes with a lowercase letter", "source": "line that contains character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_25", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter and includes a vowel", "source": "line that contains vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_30", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with  123 ", "source": "line that contains vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_37", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that utilize a lowercase letter and end with 123", "source": "line that contains lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_80", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with  123 ", "source": "line that contains capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_84", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with  123 ", "source": "line that contains character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_122", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that ends with  123 ", "source": "line that contains character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_125", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses 123 and stops with abc", "source": "line that contains `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_128", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins wvowel has abc", "source": "line that contains `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_131", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines starting with a vowel that then have another letter", "source": "line that contains letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_133", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the word phase abc and end with a lowercase letter", "source": "line that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_137", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a letter and begins with a letter", "source": "line that contains letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_142", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a vowel and end with the smaller word abc", "source": "line that contains vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_150", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with capital letter", "source": "line that contains capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_168", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with  123  and contains vowels", "source": "line that contains vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_179", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that comes to an end with a vowel and includes abc in it", "source": "line that contains `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_207", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that ends with character", "source": "line that contains `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_244", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has capital letters and ends with vowels", "source": "line that contains capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_259", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "list lines containing and ending with lowercase letters", "source": "line that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_265", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that ends with  abc ", "source": "line that contains character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_311", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a letter and using a capital letter", "source": "line that contains capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_315", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that ends with character", "source": "line that contains character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_357", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with lowercase letter", "source": "line that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_359", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line has 123 in it and also begins with a lowercase letter", "source": "line that contains `` 123 '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_382", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a vowel and ends with a vowel", "source": "line that contains vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_383", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that starts with  abc ", "source": "line that contains vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_413", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with lowercase letter", "source": "line that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_423", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line uses a lowercase letter and begins with a vowel", "source": "line that contains lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_425", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line which ends with 123 and has abc in it", "source": "line that contains `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_437", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have 123 but also ends with a capital letter", "source": "line that contains `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_451", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel at the end and includes 123 in it", "source": "line that contains `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_455", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines  that have a lowercase letter and begin with abc", "source": "line that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_458", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with vowels but also have characters", "source": "line that contains character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_494", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with character", "source": "line that contains capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_495", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that both contains and ends with a letter", "source": "line that contains letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_496", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with vowel", "source": "line that contains letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_499", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have lowercase letters and start out abc", "source": "line that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_500", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes 123 and has abc in the beginning", "source": "line that contains `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_521", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses any character but ends with a letter", "source": "line that contains character and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_537", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include letters and terminate with a lowercase letter", "source": "line that contains letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_539", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a character and ending with a vowel", "source": "line that contains character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_555", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with capital letters and contains characters", "source": "line that contains character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_561", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a vowel in the beginning", "source": "line that contains letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_579", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that starts with lowercase letter", "source": "line that contains vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_583", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that utilize a vowel and end with a capital letter", "source": "line that contains vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_589", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have characters and a letter at the beginning", "source": "line that contains character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_593", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line uses abc and ends with a letter", "source": "line that contains `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_594", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a character and uses letters", "source": "line that contains letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_631", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that starts with vowel", "source": "line that contains `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_638", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a character and begins with 123", "source": "line that contains character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_642", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and stops after a letter", "source": "line that contains capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_650", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes character and that starts with a lowercase letter", "source": "line that contains character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_671", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with 123 and contains lowercase letters", "source": "line that contains lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_682", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with the sequence 123 and including a letter", "source": "line that contains letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_685", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with  abc ", "source": "line that contains letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_714", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with letter", "source": "line that contains `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_715", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing the word abc and ending with a letter", "source": "line that contains `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_723", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain a character that begins with a capital letter", "source": "line that contains character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_743", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a character in the beginning and includes a capital letter", "source": "line that contains capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_753", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and begins with a character", "source": "line that contains `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_769", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that starts with character", "source": "line that contains `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_773", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses characters and begins with 123", "source": "line that contains character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_776", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line both contains and ends with a lowercase letter", "source": "line that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_782", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line should start with and contain a vowel", "source": "line that contains vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_790", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with  123 ", "source": "line that contains lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_794", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and stops with a lowercase letter", "source": "line that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_810", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with  abc ", "source": "line that contains letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_812", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with letter", "source": "line that contains character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_835", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and that concludes with a character", "source": "line that contains `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_857", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing abc and beginning with a capital letter", "source": "line that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_872", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins wsmall letter and includes 123", "source": "line that contains `` 123 '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_874", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a letter and beginning with a vowel", "source": "line that contains letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_875", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "where line ends with character includes a character", "source": "line that contains character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_878", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that both begins with and includes a capital letter within it", "source": "line that contains capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_908", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a lowercase letter and containing a vowel", "source": "line that contains vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_910", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a letter and contains 123", "source": "line that contains `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_916", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a capital letter and starts with a character", "source": "line that contains capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_923", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and  has 123 at the end of it", "source": "line that contains `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_924", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel in the beginning and also includes a vowel", "source": "line that contains vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_927", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and begins with a capital letter", "source": "line that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_943", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses and also ends with the number 123", "source": "line that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_944", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and begins with a character", "source": "line that contains vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_948", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "123 initiating a line that has a letter in it", "source": "line that contains letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_968", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain a character inside the line as well as the end of the line", "source": "line that contains character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_978", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with capital letter", "source": "line that contains vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_1002", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has a lowercase letter in it and also ends in abc", "source": "line that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1025", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing characters and ending with letters", "source": "line that contains character and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1050", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with lowercase letter", "source": "line that contains character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1062", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a letter that begins with abc", "source": "line that contains letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1068", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a letter and begins with 123", "source": "line that contains letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1082", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using 123 and ending with a letter", "source": "line that contains `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1162", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with abc", "source": "line that contains letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1163", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with a lowercase letter and that also utilizes a letter", "source": "line that contains letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1169", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has a letter in it and begins with 123", "source": "line that contains letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1183", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a letter and terminates with abc", "source": "line that contains letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1224", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a letter and begin with a letter", "source": "line that contains letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1230", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using 123 and ended by a lowercase letter", "source": "line that contains `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1277", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains any vowels and ends with a capital letter", "source": "line that contains vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_1295", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a vowel and begin with a vowel", "source": "line that contains vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1342", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with letter", "source": "line that contains vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1353", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has lowercase instances of the letter that starts it", "source": "line that contains lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1372", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a letter and containing a lowercase letter", "source": "line that contains lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1403", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a lowercase letter and must include 1 2 or 3", "source": "line that contains `` 123 '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1431", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including 123 and begins with abc", "source": "line that contains `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1433", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a capital letter that finishes with 123", "source": "line that contains capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_1468", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes abc and begins with a letter", "source": "line that contains `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1538", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and stops after a character", "source": "line that contains vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_1576", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with letter", "source": "line that contains letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1607", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that starts with letter", "source": "line that contains `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1611", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with lowercase letter", "source": "line that contains character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1627", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a capital letter and contains a vowel", "source": "line that contains vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1672", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with vowel", "source": "line that contains capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1676", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a letter and abc for an ending", "source": "line that contains letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1684", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes 123 and has a character in the beginning", "source": "line that contains `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1713", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include at least one letter and ends with a vowel", "source": "line that contains letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_1717", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing and ending with abc", "source": "line that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1729", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with a letter and having a lowercase somewhere in it", "source": "line that contains lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1731", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a vowel and contains a character", "source": "line that contains character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1734", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines contain a letter and end with a character", "source": "line that contains letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_1769", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with lowercase letter", "source": "line that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1773", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with  123 ", "source": "line that contains `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_1792", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with capital letter", "source": "line that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1800", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a lowercase letter and ending with abc", "source": "line that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1806", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including a lowercase letter and beginning with 123", "source": "line that contains lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1815", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and stops with 123", "source": "line that contains lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_1820", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses characters and stops with abc", "source": "line that contains character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1828", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with letter", "source": "line that contains capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1838", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with a character at its end that contains at least one lowercase letter", "source": "line that contains lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_1844", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a vowel and starts with  123 ", "source": "line that contains vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1866", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line includes small letter and concludes wvowel", "source": "line that contains lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_1869", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a character that finishes with abc", "source": "line that contains character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1894", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and begins with a capital letter", "source": "line that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1902", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has vowels as well as a character at the start", "source": "line that contains vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1920", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with lowercase letter", "source": "line that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1933", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a vowel utilizes a lowercase ltter", "source": "line that contains lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1934", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with  abc ", "source": "line that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1979", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with 123 and using a vowel", "source": "line that contains vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1989", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a capital letter and ending with the smaller word abc", "source": "line that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1994", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with character", "source": "line that contains vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2030", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains 123 and ends with the word abc", "source": "line that contains `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2044", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with  abc ", "source": "line that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2049", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "note the line that incorporates a letter besides beginning with the alphabetical sequence abc", "source": "line that contains letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2064", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains a lowercase letter and begins with a character", "source": "line that contains lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2078", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "where line finishes with a letter also includes a letter", "source": "line that contains letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2081", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with capital letter", "source": "line that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2114", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses and begins with 123", "source": "line that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2115", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with a lowercase letter at its end that utilizes the sequence", "source": "line that contains `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2126", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending abc thats got a character in it", "source": "line that contains character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2156", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and stops with a character", "source": "line that contains lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2187", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a capital letter that is a vowel", "source": "line that contains capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2188", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a capital letter and ending with 123", "source": "line that contains capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2232", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with letter", "source": "line that contains vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2240", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with capital letter", "source": "line that contains letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2251", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains  abc  and starts with a lowercase letter", "source": "line that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2263", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a small letter and has a vowel at the end", "source": "line that contains lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2290", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a lowercase letter and a vowel to start", "source": "line that contains lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2313", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes 123 and that ends with a vowel", "source": "line that contains `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2331", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and ends with a capital letter", "source": "line that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2341", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and has abc at the end", "source": "line that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2344", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes 123 and begins with a capital letter", "source": "line that contains `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2351", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a lowercase letter and a capital at the end", "source": "line that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2371", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have both a character as well as a capital letter at the beginning", "source": "line that contains character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2375", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains vowels and begins with a letter", "source": "line that contains vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2379", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and stops with a letter", "source": "line that contains vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2386", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a lowercase beginning", "source": "line that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2388", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the smaller word abc and begin with a vowel", "source": "line that contains `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2396", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a lowercase letter and ending with 123", "source": "line that contains lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2397", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes 123 and that concludes with a capital letter", "source": "line that contains `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2406", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing lowercase letters and ending with letters", "source": "line that contains lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2414", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a lowercase letter and that begins with a lowercase letter", "source": "line that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2417", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a letter and end with a lowercase letter", "source": "line that contains letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2419", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains   123  and ends with a vowel", "source": "line that contains `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2429", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel and finishes with a lowercase letter", "source": "line that contains vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2472", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with lowercase letter", "source": "line that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2501", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a character and contains at least one capital letter", "source": "line that contains capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2515", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that ends with  abc ", "source": "line that contains `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2535", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a letter and has a capital letter at the end", "source": "line that contains letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2555", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a character and starts with  abc ", "source": "line that contains character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2583", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a lowercase letter and ending with123", "source": "line that contains lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2587", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with vowel", "source": "line that contains vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2605", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing 123 and  beginning with a lowercase letter", "source": "line that contains `` 123 '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2609", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including 123 and terminating with a letter", "source": "line that contains `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2621", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a vowel but also ends with abc", "source": "line that contains vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2643", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that starts with capital letter", "source": "line that contains `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2658", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a lowercase letter in it and also ends in a capital letter", "source": "line that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2660", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line includes and concludes with uppercase letter", "source": "line that contains capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2699", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line has 123 within it and also begins with a vowel", "source": "line that contains `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2728", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and stops with a character", "source": "line that contains `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2740", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have vowels but also ends with a capital letter", "source": "line that contains vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2767", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a vowel that includes at least one letter", "source": "line that contains letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2772", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that both contains and ends with a letter", "source": "line that contains letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2775", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that starts with  123 ", "source": "line that contains vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2792", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using any letters and ends with a lowercase letter", "source": "line that contains letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2800", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line commences wcharacter and includes letter", "source": "line that contains letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2809", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains  123  and ends with a capital letter", "source": "line that contains `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2813", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes abc and terminates with 123", "source": "line that contains `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2823", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with 123 in it that is ended by a vowel", "source": "line that contains `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2848", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have capitals and end in lowercas", "source": "line that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2859", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with capital letters", "source": "line that contains letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2913", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains a character and starts with a vowel", "source": "line that contains character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2936", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with lowercase letter", "source": "line that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2941", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with abc and starts with a capital letter", "source": "line that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2951", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the phase abc and that begin with a character", "source": "line that contains `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2965", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a lowercase letter and ending with a capital letter", "source": "line that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2970", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with capital letters and start with 123", "source": "line that contains capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2973", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and ends with a capital letter", "source": "line that contains vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2986", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line using at least one capital letter with a capital letter at its end", "source": "line that contains capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2997", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a capital letter at the beginning and includes abc", "source": "line that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2999", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a lowercase letter and begin with a character", "source": "line that contains lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3003", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that ends with capital letter", "source": "line that contains character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3011", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with  123 ", "source": "line that contains lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3014", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a character and which contains a capital letter", "source": "line that contains capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3015", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and have an abc", "source": "line that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3022", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with capital letter", "source": "line that contains letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3024", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning abc", "source": "line that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3027", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a character ending with a capital letter", "source": "line that contains character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3031", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has a character in it and also ends in a vowel", "source": "line that contains character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3034", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with  abc ", "source": "line that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_3056", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing capitals and starting with abc", "source": "line that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3073", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lind containing 123 and ending with a letter", "source": "line that contains `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3075", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has a capital letter in it and also begins in a vowel", "source": "line that contains capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3092", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word abc and ends with a vowel", "source": "line that contains `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3108", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and stops after 123", "source": "line that contains `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_3148", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with abc and have a character", "source": "line that contains character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3149", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a character and terminate with a vowel", "source": "line that contains character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3187", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with lowercase letter", "source": "line that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3207", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including the sequence 123 within it and at its beginning", "source": "line that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3227", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line includes a capital letter and starts with 123", "source": "line that contains capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3231", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a capital letter that finishes with a capital letter", "source": "line that contains capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3232", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line commences wletter and includes 123", "source": "line that contains `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3240", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a letter and stops after a vowel", "source": "line that contains letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3247", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing 123 and ending with abc", "source": "line that contains `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_3317", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with  123  and contains lowercase letters", "source": "line that contains lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3352", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a vowel", "source": "line that contains letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3362", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that ends with letter", "source": "line that contains `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3380", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing the word abc and ending with a capital letter", "source": "line that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3386", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with  123 ", "source": "line that contains letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3396", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with capital letter", "source": "line that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3410", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a lowercase letter that contains a letter", "source": "line that contains letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3413", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a vowel and that begins with a letter", "source": "line that contains vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3439", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines goes abc to start and has a capital in it", "source": "line that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3458", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines starting with a capital letter and have some character", "source": "line that contains character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3460", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a capital letter at both the start and somewhere else", "source": "line that contains capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3469", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has a character in it and also begins with a vowel", "source": "line that contains character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3474", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with  abc ", "source": "line that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_3487", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and begins with a vowel", "source": "line that contains capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3509", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing any letter and starting with a letter", "source": "line that contains letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3532", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have capital letters but also starts with abc", "source": "line that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3534", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have 123 and end with a lowercase letter", "source": "line that contains `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3561", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with vowel", "source": "line that contains capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3582", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with abc", "source": "line that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3584", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the beginning word a capital letter and includes 123", "source": "line that contains `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3615", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with a capital letter to start then 123 somewhere later", "source": "line that contains `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3620", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line includes character and end also", "source": "line that contains character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_3624", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains characters and starts with a character", "source": "line that contains character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3627", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with  123 ", "source": "line that contains `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3645", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a character and ending with a lowercase letter", "source": "line that contains character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3652", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with any character and including at least one character", "source": "line that contains character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3669", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line has a character in it and also ends in abc", "source": "line that contains character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_3675", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a character that begins right after 123", "source": "line that contains character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3689", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a letter and that has a letter in it", "source": "line that contains capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3691", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include lowercase letters and finish with a capital letter", "source": "line that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3694", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a lowercase letter and begins with a capital", "source": "line that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3698", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with abc and at least one lowercase letter", "source": "line that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_3718", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with abc and end with vowels", "source": "line that contains `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3743", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with character", "source": "line that contains letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_3746", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a character and which also ends with any lowercase letter", "source": "line that contains character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3748", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line has a capital letter in it and also begins with a lowercase letter", "source": "line that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3780", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the number sequence 123 and conclude with a letter", "source": "line that contains `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3781", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and begins with abc", "source": "line that contains vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3827", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end in a letter and have at least one vowel", "source": "line that contains vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3831", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "note the line ending in a lowercase letter that also has the alphabetical listing abc", "source": "line that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3841", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with letter", "source": "line that contains lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3855", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters and stops after a capital letter", "source": "line that contains letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3868", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a character and has a vowel at the end", "source": "line that contains character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3871", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have 123 and start with a character", "source": "line that contains `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3884", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with character", "source": "line that contains letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3907", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a character and that begins with abc", "source": "line that contains character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3912", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has 123 in the end", "source": "line that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_3923", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that ends with vowel", "source": "line that contains character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3925", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses characters and begins with letters", "source": "line that contains character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3965", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line has a character and begins with a letter", "source": "line that contains character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3983", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a vowel in it and a letter at the end", "source": "line that contains vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3989", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with character", "source": "line that contains `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4001", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a vowel and end with a vowel", "source": "line that contains vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4011", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word 123 and which also starts with a letter", "source": "line that contains `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4030", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has 123 in it and also ends in 123", "source": "line that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4055", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with  abc ", "source": "line that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4064", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with a lowercase letter", "source": "line that contains character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4071", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with capital letter", "source": "line that contains capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4080", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that ends with character", "source": "line that contains character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4081", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with letter", "source": "line that contains character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4096", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with vowel", "source": "line that contains letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4120", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and stops after 123", "source": "line that contains capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4138", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing a lowercase letter and ending with a vowel", "source": "line that contains lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4163", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines have lowercase letters but also ends with a letter", "source": "line that contains lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4166", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel and ending with a character", "source": "line that contains vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4171", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has any character and ends with an uppercase letter", "source": "line that contains character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4172", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that starts with character", "source": "line that contains vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4191", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes 123 and that starts with 123", "source": "line that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4228", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter", "source": "line that contains capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4248", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and has a letter in the beginning", "source": "line that contains `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4298", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that comes to an end with a letter and includes a small letter", "source": "line that contains lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4314", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a special character that ends with a lowercase letter", "source": "line that contains character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4319", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters and stops with abc", "source": "line that contains letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4328", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter but also contain lowercase letters", "source": "line that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4338", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a vowel and utilizes a capital letter", "source": "line that contains capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4342", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes 123 and that concludes with a lowercase letter", "source": "line that contains `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4372", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has 123 ending with a character", "source": "line that contains `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4379", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that starts with character", "source": "line that contains vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4432", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and that begins with a lowercase letter", "source": "line that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4443", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a lowercase letter and begin with a character", "source": "line that contains lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4446", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a capital  and starts off with a lowercase letter", "source": "line that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4450", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a letter and using a letter", "source": "line that contains letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4481", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and ends with a capital letter", "source": "line that contains `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4496", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has 123 number sequence and finishes with a vowel", "source": "line that contains `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4516", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a vowel in it and also ends in a capital letter", "source": "line that contains vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4538", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with any character where capital letters appear", "source": "line that contains capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4541", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc and that begins with a lowercase letter", "source": "line that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4546", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a vowel that finishes with a character", "source": "line that contains vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4549", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that starts with  abc ", "source": "line that contains vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4555", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with 123 and contains a letter", "source": "line that contains letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4563", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line has a capital letter in it and also ends in a lowercase letter", "source": "line that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4599", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a letter and begins with a capital letter", "source": "line that contains letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4607", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters and begins with a character", "source": "line that contains letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4622", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including a lowercase letter and ending with 123", "source": "line that contains lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4640", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a letter and ending with a capital", "source": "line that contains letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4642", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the number 123 and contains the word abc elsewhere", "source": "line that contains `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4645", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses abc and ends with a character", "source": "line that contains `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4649", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has 123 in it and also begins with a character", "source": "line that contains `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4650", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing abc and ending with 123", "source": "line that contains `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4674", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with 123 at the beginning and has a lowercase letter", "source": "line that contains lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4685", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with lowercase letters that starts with characters", "source": "line that contains lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4686", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes 123 and has a letter at its end", "source": "line that contains `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4688", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc at the end", "source": "line that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4691", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc that has a vowel", "source": "line that contains vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4721", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starting with a vowel and using a letter", "source": "line that contains letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4737", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a capital letter and end with a capital letter", "source": "line that contains capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4740", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that starts with letter", "source": "line that contains vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4748", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and stops after abc", "source": "line that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4755", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that use a character and end with a letter", "source": "line that contains character and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4767", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a capital letter and begin with 123", "source": "line that contains capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4785", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses characters and begins with a vowel", "source": "line that contains character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4790", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with the sequence 123 with that sequence used at least once within it", "source": "line that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4801", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a vowel and that begins with a lowercase letter", "source": "line that contains vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4832", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that ends with capital letter", "source": "line that contains character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4844", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starting with abc", "source": "line that contains character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4888", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and stops after abc", "source": "line that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4889", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that ends with lowercase letter", "source": "line that contains `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4892", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starts with 123 and includes small abc", "source": "line that contains `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4893", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with vowel", "source": "line that contains lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4948", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with  abc ", "source": "line that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4971", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain the number sequence 123 and start with abc", "source": "line that contains `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4975", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letter and begins with a letter", "source": "line that contains capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4984", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters and begins with a vowel", "source": "line that contains letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4992", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with  abc ", "source": "line that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5001", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with  abc ", "source": "line that contains vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5011", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a lowercase letter and stop with abc", "source": "line that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5012", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines use a vowel and end with a lowercase letter", "source": "line that contains vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_5015", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel and then 123 at the end", "source": "line that contains vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5026", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc that finishes with a vowel", "source": "line that contains `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_5027", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing the smaller word abc and ending with a character", "source": "line that contains `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5034", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a capital letter and ending with a character", "source": "line that contains capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5039", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a character and ends with a capital letter", "source": "line that contains character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5047", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a capital letter in it is ended by a lowercase letter", "source": "line that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_5061", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "there is a vowel in the end of a line that also includes a big letter", "source": "line that contains capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_5068", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a capital and begins with 123", "source": "line that contains capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5076", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with vowel", "source": "line that contains `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5081", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains  123  and ends with  123 ", "source": "line that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5091", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line includes noncapitalized letter and concludes wcharacter", "source": "line that contains lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5109", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a lowercase letter and also starts with a letter", "source": "line that contains lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5147", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and has 123 at the end", "source": "line that contains capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5158", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a letter and ending with a letter", "source": "line that contains letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5160", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing capital letter and beginning with lowercase letter", "source": "line that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5165", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with lowercase letter", "source": "line that contains letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5173", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with  abc ", "source": "line that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5174", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a lowercase letter and uses other letters", "source": "line that contains letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5185", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with 123 and where a character appears with it", "source": "line that contains character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5197", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with character", "source": "line that contains letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5203", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes letter and ends with a character", "source": "line that contains letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5217", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has vowels including at the end", "source": "line that contains vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_5224", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "note the line incorporating a capitalized letter that also finishes with the sequence abc", "source": "line that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5227", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that contains the string 123 and starts with a character", "source": "line that contains `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5243", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and has abc in the beginning", "source": "line that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5266", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ends with a lowercase letter", "source": "line that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_5267", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and has a character in the beginning", "source": "line that contains `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5268", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and stops with a letter", "source": "line that contains lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5283", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "123 on a line that finishes with abc", "source": "line that contains `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5294", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a capital letter and that begins with a vowel", "source": "line that contains capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5302", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have the number sequence 123 and finish with a capital letter", "source": "line that contains `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5307", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses 123 and begins with a vowel", "source": "line that contains `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5316", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a lowercase letter and that begins with abc", "source": "line that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5342", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc and using 123", "source": "line that contains `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5350", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with character", "source": "line that contains lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5354", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that starts with  123 ", "source": "line that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5365", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and has a letter in the beginning", "source": "line that contains capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5372", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with letter", "source": "line that contains lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5379", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with  abc ", "source": "line that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5386", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel and beginning with a letter", "source": "line that contains vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5393", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that starts with character", "source": "line that contains `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5402", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has a capital letter and ends with sequence 123", "source": "line that contains capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5431", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has abc in it and also ends in a letter", "source": "line that contains `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5432", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including a vowel and beginning with a capital letter", "source": "line that contains vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5438", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a character at the end", "source": "line that contains character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5449", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line contains 123 and has a charcter at the end", "source": "line that contains `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5471", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with character", "source": "line that contains `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5474", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with  abc ", "source": "line that contains letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5512", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with  123 ", "source": "line that contains `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5515", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that comes to an end with 123 and includes a character", "source": "line that contains character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5517", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a vowel in it and also ends in abc", "source": "line that contains vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5532", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line thatcontain a character in it and also starts with a character", "source": "line that contains character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5547", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a lowercase letter and end with a capital letter", "source": "line that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5569", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line contains a letter and ends with", "source": "line that contains letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5585", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has  a character at the end and also has 123 in it", "source": "line that contains `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5586", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a vowel and containing 123", "source": "line that contains `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5593", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a vowel and begin with a character", "source": "line that contains vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5595", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have lowercase letters and end with characters", "source": "line that contains lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5602", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc to start and another vowel besides", "source": "line that contains vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5612", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with 123 has a character in it", "source": "line that contains character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5623", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and begins with 123", "source": "line that contains `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5643", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that starts with  abc ", "source": "line that contains `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5656", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and begins with a vowel", "source": "line that contains `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5666", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has any vowel and ends with any characters", "source": "line that contains vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5711", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a capital letter and containing 123", "source": "line that contains `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5712", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "whats a line with characters and ends in one", "source": "line that contains character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5756", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel adn ending with abc", "source": "line that contains vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5760", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes abc", "source": "line that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5767", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line starts with a letter and contains a lowercase letter", "source": "line that contains lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5785", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with a capital letter and contain at least one vowel", "source": "line that contains vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5832", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that ends with letter", "source": "line that contains character and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5838", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has lowercase letters in it and ends with a character", "source": "line that contains lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5863", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with vowel", "source": "line that contains letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5882", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with character", "source": "line that contains capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5887", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a letter and has a lowercase letter in it", "source": "line that contains lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5903", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a capital letter and contains letters", "source": "line that contains letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5927", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a capital letter and contains a letter", "source": "line that contains letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5953", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a vowel and end with 123", "source": "line that contains vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5954", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with  abc ", "source": "line that contains letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5984", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word abc and contains any vowel", "source": "line that contains vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5995", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and that begins with 123", "source": "line that contains `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_6022", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line that contains  abc  and that starts with vowel", "source": "line that contains `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6030", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with character", "source": "line that contains lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6031", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains and ends with a vowel", "source": "line that contains vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_6057", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with capital letter", "source": "line that contains character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_6059", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and has a small letter at the end", "source": "line that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_6061", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a lowecase letter and begins with a vowel", "source": "line that contains lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6087", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with vowel", "source": "line that contains character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6099", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with vowel", "source": "line that contains lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_6124", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains 123 and ends with a character", "source": "line that contains `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_6214", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and begins with a letter", "source": "line that contains vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6228", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines which end with a capital letter and includes abc", "source": "line that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_6238", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a letter and begin with a character", "source": "line that contains letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6246", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with letter", "source": "line that contains capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6253", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc in it and ended by a character", "source": "line that contains `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_6254", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a capital letter and contains a capital letter", "source": "line that contains capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_6262", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a vowel and terminates with a letter", "source": "line that contains vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_6281", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and has a letter at the end", "source": "line that contains `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_6343", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with vowel", "source": "line that contains `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_6368", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a vowel and has 123 at the end of it", "source": "line that contains vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_15", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses any capital letters but ends with a character", "source": "line that contains capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_29", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line can contain any letters the first letter being capitalized", "source": "line that contains letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_34", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a capital letter and contains vowels", "source": "line that contains vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_77", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with lowercase letter", "source": "line that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_87", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines begin with a vowel and contain 123", "source": "line that contains `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_92", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains   123  and ends with   abc ", "source": "line that contains `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_94", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with letter", "source": "line that contains capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_126", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with  123 ", "source": "line that contains letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_132", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a character and ends with  123 ", "source": "line that contains character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_141", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a capital letter and begins with a letter", "source": "line that contains capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_151", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a capital letter and ending with a lowercase letter", "source": "line that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_163", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line contains the numerals 1 2 and 3 and starts with a lowercase letter", "source": "line that contains `` 123 '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_173", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starting with 123 and containing abc", "source": "line that contains `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_182", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and stops after a lowercase letter", "source": "line that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_197", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses capital letters and ends with any character", "source": "line that contains capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_201", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a vowel and begin with the smaller word abc", "source": "line that contains vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_204", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has both a vowel and 123 in sequence for its end", "source": "line that contains vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_246", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starting with 123 also has abc in it", "source": "line that contains `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_259", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with letter", "source": "line that contains lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_262", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel and begins with a lowercase letter", "source": "line that contains vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_273", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with vowel", "source": "line that contains lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_276", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line commences w123 and has vowel", "source": "line that contains vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_290", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel and ending with the number 123", "source": "line that contains vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_302", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses 123 and begins with a character", "source": "line that contains `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_308", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a letter and end with a capital letter", "source": "line that contains letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_315", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with  abc ", "source": "line that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_320", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a capital letter and ending with a vowel", "source": "line that contains capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_362", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and begins with a letter", "source": "line that contains `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_392", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a lowercase letter in it and also begins with a character", "source": "line that contains lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_396", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with letter", "source": "line that contains capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_425", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a character in both the body and end of the line", "source": "line that contains letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_434", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line starting with and containing a letter", "source": "line that contains letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_445", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have in them a character and begin with a letter", "source": "line that contains character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_449", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a capital letter", "source": "line that contains capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_453", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word abc and starts with a vowel", "source": "line that contains `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_463", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc and a lowercase letter", "source": "line that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_468", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a capital but containing lowercase letters", "source": "line that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_469", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses character but ends with capital letters", "source": "line that contains character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_518", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a letter and ending with a lowercase letter", "source": "line that contains letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_519", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with  123 ", "source": "line that contains capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_530", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a character and had a letter at the end", "source": "line that contains character and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_541", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses and starts with lowercase letters", "source": "line that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_542", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a vowel and ends in another vowel", "source": "line that contains vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_595", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has characters and also ends with a charcter", "source": "line that contains character and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_597", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line has a capital letter in it and also begins with 123", "source": "line that contains capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_610", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter and have a capital letter", "source": "line that contains capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_622", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a capital letter and terminates with a letter", "source": "line that contains capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_634", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a lowercase letter and begins with a capital letter", "source": "line that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_678", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines where abc is both the start and finish", "source": "line that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_693", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel and ending with a letter", "source": "line that contains vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_705", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter", "source": "line that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_707", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and stops after abc", "source": "line that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_709", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a letter and ends with the sequence abc", "source": "line that contains letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_717", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the phase abc and begin with the letter sequence abc", "source": "line that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_730", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a vowel and that terminates with a character", "source": "line that contains vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_740", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a vowel and begin with a character", "source": "line that contains vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_745", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a letter and ending with a lowercase letter", "source": "line that contains letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_769", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter in the beginning", "source": "line that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_780", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a vowel that must use at least one lowercase letter", "source": "line that contains lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_795", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with any vowel and contains the number 123", "source": "line that contains `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_798", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and begins with a vowel", "source": "line that contains lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_838", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a vowel and starts with a character", "source": "line that contains vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_852", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a capital letter and using 123", "source": "line that contains `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_864", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a vowel and has abc  at the end", "source": "line that contains vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_874", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that ends with lowercase letter", "source": "line that contains `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_879", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses 123 and stops after a lowercase letter", "source": "line that contains `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_880", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a capital letter and with a character", "source": "line that contains capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_898", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that ends with vowel", "source": "line that contains `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_966", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with capital letter", "source": "line that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_999", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with any lowercase letter with a vowel within it", "source": "line that contains vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1019", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a capital letter and end with a vowel", "source": "line that contains capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1050", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing 123 and ending with a character", "source": "line that contains `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_1052", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains a character and ends with a lowercase letter", "source": "line that contains character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1053", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has characters but ends with a vowel", "source": "line that contains character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1080", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains any character and ends with a capital letter", "source": "line that contains character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_1118", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a letter and contains a capital letter", "source": "line that contains capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_1130", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with  123 ", "source": "line that contains capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1142", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a lowercase letter and begins with 123", "source": "line that contains lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1144", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with character", "source": "line that contains character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1154", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses characters and stops with 123", "source": "line that contains character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_1165", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with lowercase letter", "source": "line that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1172", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with lowercase letter", "source": "line that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1207", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with  abc ", "source": "line that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1212", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel and finishes with a lowercase letter", "source": "line that contains vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1213", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and stops after a lowercase letter", "source": "line that contains vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1218", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using abc and ending with a capital letter", "source": "line that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_1221", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses and begins with characters", "source": "line that contains character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1234", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a letter and the line ends with a letter", "source": "line that contains letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_1244", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and begins with abc", "source": "line that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1249", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what  line that contains lowercase letter and that starts with  abc ", "source": "line that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1267", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains characters and ends with   123 ", "source": "line that contains character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_1272", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a capital letter and begin with a lowercase letter", "source": "line that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1280", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a capital letter and finish with the letter sequence abc", "source": "line that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_1285", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and includes a vowel", "source": "line that contains vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1302", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing a character and starting with a lowercase letter", "source": "line that contains character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1312", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a vowel and also 123 in the beginning", "source": "line that contains vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1333", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with lowercase letter", "source": "line that contains vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1354", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with multiple vowels starting with a vowel", "source": "line that contains vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1355", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses 123 and begins with a letter", "source": "line that contains `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1360", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins with a letter and contains a vowel", "source": "line that contains vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1365", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a capital letter but can contain any other letter", "source": "line that contains letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1374", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what begins and contains characters", "source": "line that contains character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1381", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with vowel", "source": "line that contains letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1383", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that both starts with and contains 123", "source": "line that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1385", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line start with both a letter and 123", "source": "line that contains `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1407", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a lowercase letter and contains at least one vowel", "source": "line that contains vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1421", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending on a vowel with a lowercase letter somewhere", "source": "line that contains lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1440", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line creates wletter and includes abc", "source": "line that contains `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1490", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with  123 ", "source": "line that contains character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1493", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a capital letter that finishes with a vowel", "source": "line that contains capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1523", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the letter sequence abc and begin with a capital letter", "source": "line that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1524", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that ends with capital letter", "source": "line that contains `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_1537", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc ending in a vowel", "source": "line that contains `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1552", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with vowel", "source": "line that contains character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1560", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with lowercase letter", "source": "line that contains letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1564", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "word that ends with two capital letter", "source": "word that ends with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_43", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a numbers that ends with no more than two numbers", "source": "number that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_50", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "locate a word ending with two different characters", "source": "word that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_110", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has two numbers or less at the end", "source": "word that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_132", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with no more than two letters", "source": "word that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_195", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two lowercase letters", "source": "word that ends with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_276", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after 2 words", "source": "word that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_371", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two lowercase letter", "source": "number that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_404", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with a minimum of two characters", "source": "word that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_434", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two number", "source": "number that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_491", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two capital letter", "source": "number that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_540", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that ends in at the most two numbers", "source": "number that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_656", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two character", "source": "word that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_695", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with two or more letters", "source": "word that ends with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_768", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number is it that ends with two characters", "source": "number that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_846", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have at least two capital letters and the end", "source": "word that ends with at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_930", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with at least two vowels", "source": "word that ends with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_935", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two capital letter", "source": "word that ends with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_977", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that finish with two vowels", "source": "word that ends with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1285", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number where at least two digits appear", "source": "number that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1321", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any word that has two letters as its final characters", "source": "word that ends with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1322", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number with no more than two digits at its end", "source": "number that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1326", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with no fewer than two capital letters", "source": "word that ends with at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1335", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with two words or less", "source": "number that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1343", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after 2 capital letters", "source": "word that ends with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1357", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops with at most 2 numbers", "source": "number that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1410", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with at least two characters", "source": "number that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1487", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at least two digit", "source": "number that ends with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1541", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with no more than two digits", "source": "number that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1718", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that is completed with two letters or less", "source": "word that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1723", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number with no more than two lowercase letters at its end", "source": "number that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1749", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after at most two vowels", "source": "word that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1759", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at most two number", "source": "word that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1808", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "mention a word ending with two letters at most", "source": "word that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1875", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that finishes with two vowels at most", "source": "number that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2004", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with no more than two numbers", "source": "word that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2018", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with no more than two lowercase letters", "source": "word that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2088", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that finishes with at most two digits", "source": "number that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2121", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has more than a single character at the end", "source": "word that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2130", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with at least 2 letters", "source": "word that ends with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2204", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that end with two characters or less", "source": "number that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2258", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that finish with two letters", "source": "word that ends with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2320", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after at most 2 capital letters", "source": "word that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2424", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that finishes with atmost two words", "source": "number that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2462", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that end with two or fewer letters", "source": "number that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2490", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that finish with two vowels", "source": "word that ends with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2545", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with two or more vowels", "source": "word that ends with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2593", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that finish with two characters", "source": "number that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2606", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with at most two digits", "source": "word that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2661", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with at a maximum of two words", "source": "word that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2697", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two letter", "source": "word that ends with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2708", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after at most 2 digits", "source": "number that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2733", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after at least 2 character", "source": "word that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2765", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with two words or less at the end", "source": "number that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2777", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two letter", "source": "word that ends with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2784", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two letter", "source": "number that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2867", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two letter", "source": "number that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2905", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with no less than two capital letters", "source": "word that ends with at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2990", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with no more than two letters", "source": "number that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3010", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that terminates with no more than two characters", "source": "number that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3059", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with two capital letters", "source": "word that ends with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3074", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with at least two digits", "source": "number that ends with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3102", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that comes to an end with two digits", "source": "number that ends with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3118", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with no more than two characters", "source": "word that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3165", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with two vowels or less", "source": "number that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3181", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with any two letters", "source": "word that ends with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3252", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after 2 characters", "source": "word that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3269", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word with exactly two vowels at its end", "source": "word that ends with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3305", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at most two word", "source": "word that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3350", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with two character", "source": "number that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3369", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with two or more vowels at the end", "source": "word that ends with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3395", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number ends with two digits", "source": "number that ends with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3401", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word with no more than two characters at its end", "source": "word that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3452", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with two or less lowercase letters", "source": "number that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3522", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with two characters", "source": "word that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3574", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that finish with no more than two lowercase letters", "source": "word that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3637", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word can be any but finishing word have two lowercase letter", "source": "word that ends with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3649", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has two vowels at the end", "source": "word that ends with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3800", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two letter", "source": "word that ends with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3837", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with two or more digits", "source": "number that ends with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3870", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains two characters at the end", "source": "number that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3873", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has a minimum of two characters at the end", "source": "number that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3883", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have two letters at the end", "source": "word that ends with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3910", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after at most 2 letters", "source": "number that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4009", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two digit", "source": "number that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4012", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two capital letter", "source": "word that ends with at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4093", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has two lowercase letters at the end", "source": "word that ends with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4117", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after at most 2 letters", "source": "word that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4144", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending in no more than two digits", "source": "word that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4195", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate in no more than two numbers", "source": "word that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4204", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with two or more lowercase letters", "source": "word that ends with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4214", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a double character", "source": "word that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4244", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at most two capital letter", "source": "word that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4290", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers ending with at most two capital letters", "source": "number that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4353", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with no more than two capital letters", "source": "word that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4365", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number ends with two digits", "source": "number that ends with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4378", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with two vowels at most", "source": "number that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4424", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with any letter number or character but ends with two lowercase letters", "source": "word that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4457", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that terminates in no more than two vowels", "source": "word that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4483", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that terminates with no more than two words", "source": "number that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4513", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that is ended by any two letters", "source": "word that ends with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4554", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with at least a capital", "source": "word that ends with at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4567", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with two lowercase letters", "source": "word that ends with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4583", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with three or more digits", "source": "number that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4608", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has two characters or less at the end", "source": "word that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4618", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with two digits", "source": "number that ends with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4628", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with two vowels or less", "source": "number that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4653", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has two small letters at the end", "source": "word that ends with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4671", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with two capital letters", "source": "word that ends with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4703", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with no more than two capital letters", "source": "number that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4760", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after at most 2 characters", "source": "word that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4865", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "last two letters of last word are lowercase", "source": "word that ends with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4911", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with two or more characters", "source": "number that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4966", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has two characters at its end", "source": "word that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5040", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two lowercase letter", "source": "word that ends with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5059", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with no more than two digits", "source": "word that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5063", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with no more than two letters", "source": "word that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5087", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with two digit", "source": "number that ends with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5103", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after at most 2 lowercase letters", "source": "word that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5126", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has two uppercase letters or less at the end", "source": "number that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5205", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after 2 characters", "source": "number that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5236", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a maximum of two vowels", "source": "word that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5237", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two character", "source": "word that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5297", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at most two lowercase letter", "source": "word that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5385", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two word", "source": "number that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5417", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that finish with two or more letters", "source": "word that ends with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5466", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with two lowercase letters or less", "source": "number that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5476", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after at least 2 vowels", "source": "word that ends with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5552", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with any two digits", "source": "number that ends with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5618", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word is it that ends in at least two vowels", "source": "word that ends with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5655", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which words end with two or less shorter words", "source": "word that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5697", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with a maximum of two capital letters", "source": "word that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5700", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word ends with two consecutive lowercase letters", "source": "word that ends with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5734", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that uses at least two capital letters at the end", "source": "word that ends with at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5742", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two capital letter", "source": "word that ends with at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5777", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two capital letters", "source": "word that ends with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5779", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that are shorter than three capital letters", "source": "word that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5836", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with two character", "source": "number that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5900", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at most two character", "source": "word that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6060", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at least two characters", "source": "number that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6071", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two vowel", "source": "word that ends with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6095", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with two digits or less", "source": "word that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6098", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after 2 lowercase letters", "source": "word that ends with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6105", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "this number must end with less that three capital letters", "source": "number that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6114", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate with no more than two characters", "source": "word that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6119", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with two uppercase letters", "source": "word that ends with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6133", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at most two letter", "source": "word that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6195", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word that ends with at most two number", "source": "word that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6198", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at most two character", "source": "word that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6204", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that also no more than two lowercase letters at the end", "source": "number that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_6", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two character", "source": "word that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_18", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with at least two letters", "source": "word that ends with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_86", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after 2 vowels", "source": "word that ends with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_108", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two number", "source": "number that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_131", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with two capital letters or less", "source": "number that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_278", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with a maximum of two small letters", "source": "word that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_317", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word ends with at least two vowels", "source": "word that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_376", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word ends with two letters", "source": "word that ends with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_379", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at most two capital letter", "source": "word that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_406", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number ends with minimum two digits in it", "source": "number that ends with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_498", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with at most 2 numbers", "source": "word that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_524", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with a double character", "source": "number that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_567", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that end with no more than two characters", "source": "number that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_773", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that ends in at the least two digits", "source": "number that ends with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_802", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with not more than two capital letters", "source": "word that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_826", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with at least two lowercase letters", "source": "word that ends with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_867", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two vowel", "source": "word that ends with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1020", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two lowercase letter", "source": "word that ends with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1277", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with two or more digits", "source": "number that ends with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1329", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two vowel", "source": "word that ends with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1363", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with two lowercase letters", "source": "number that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1380", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with two or more characters", "source": "word that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1384", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with two vowels or less", "source": "word that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1413", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two vowel", "source": "word that ends with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1426", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two character", "source": "word that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1546", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two vowel", "source": "number that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1571", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that does not contain abcv", "source": "line that not contains the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_56", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not contain the smaller word abc", "source": "line that not contains the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_3731", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line without the word abc", "source": "line that not contains the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_3881", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "what is a line that does not have the word abc in it", "source": "line that not contains the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_4085", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line without abc in it", "source": "line that not contains the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_test_109", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains the word  abc ", "source": "line that not contains the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_test_1500", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that stops with abc and uses abc", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3502", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line stops with abc after having abc earlier in the word", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3805", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains the word  abc ", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4552", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with the word abc and has the word abc", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4827", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends with the word abc and also has the word abc in it", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5694", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that terminate with the letter sequence abc and include abc", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_1109", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what word ends with a lowercase letter or  123 ", "source": "word that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_34", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a capitalized final letter or the ending 123", "source": "word that ends with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_139", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that is ended with any character or 123", "source": "word that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_197", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a letter or the number 123", "source": "word that ends with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_237", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with the sequence 123 or ending with a letter", "source": "word that ends with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_435", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a vowel or the number 123", "source": "word that ends with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1007", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a character or number 123", "source": "word that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1123", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a letter or the number 123", "source": "word that ends with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1129", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  or the number  123 ", "source": "number that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1226", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a digit that ends in 123", "source": "number that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1240", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with either abc or 123", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1464", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with the character or number 123", "source": "number that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1595", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with either a lowercase letter or 123", "source": "word that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1939", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel or the number  123 ", "source": "word that ends with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2046", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with a capital letter or 123", "source": "word that ends with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2277", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that finishes with 123 or 123", "source": "number that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2284", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with either a letter or 123", "source": "word that ends with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2356", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with the number123 or an uppercase letter", "source": "word that ends with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2590", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate with either a vowel or number sequence 123", "source": "word that ends with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2619", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends with 123", "source": "number that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2768", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter or the number  123 ", "source": "word that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2885", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending 123 or with abc", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3924", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a lowercase letter or the number 123", "source": "word that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4288", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with 123 or any capital letter", "source": "word that ends with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4536", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word concludes wsmall letter or 123 numerals", "source": "word that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4663", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter or the number  123 ", "source": "word that ends with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4813", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter or the number  123 ", "source": "word that ends with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5439", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel or the number  123 ", "source": "word that ends with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5560", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with a character or  123 ", "source": "number that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5601", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with either 123 or the number 123", "source": "number that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5719", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  or the number  123 ", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5720", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word concludes weither uppercase letter or numerals 123", "source": "word that ends with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5732", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a lowercase letter or 123", "source": "word that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5919", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number terminating with a character or the number 123", "source": "number that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5926", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character or the number  123 ", "source": "word that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6294", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  or the number  123 ", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6342", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter or the number  123 ", "source": "word that ends with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_124", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with the letters abc or the numbers 123", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_190", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character or the number  123 ", "source": "word that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_295", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with either a letter or the number 123", "source": "word that ends with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_373", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  or the number  123 ", "source": "number that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_430", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number stops on either the number", "source": "number that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_476", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what numbers in either character or the number   123 ", "source": "number that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_547", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with   abc  or   123 ", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_591", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with either abc or 123", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_618", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a vowel or 123", "source": "word that ends with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_827", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any word ending in characters or 123", "source": "word that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1121", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any word that ends with either a vowel or the number 123", "source": "word that ends with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1231", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with either a vowel or 123", "source": "word that ends with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1319", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "list words that ends with a character or the number   123 ", "source": "word that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1510", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with a character or 123", "source": "word that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1588", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a line commencing with the word abc and including a character", "source": "line that starts with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_60", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with the word abc and has a lowercase letter", "source": "line that starts with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_280", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with abc in addition to at least another letter", "source": "line that starts with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_335", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains letter", "source": "line that starts with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_416", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with the smaller word abc and containing a capital letter", "source": "line that starts with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_462", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with abc which contains a lowercase letter", "source": "line that starts with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_485", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with lower case abc and numbers", "source": "line that starts with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_612", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains  123 ", "source": "line that starts with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_866", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that initiate with the smaller word abc and vowels", "source": "line that starts with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_957", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc at the beginning and a vowel in it", "source": "line that starts with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1016", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with abc and has a capital letter", "source": "line that starts with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1227", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the word abc and includes a lowercase letter", "source": "line that starts with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1311", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line begins with the word abc and also has a character in it", "source": "line that starts with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1401", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a smaller word abc and include other letters", "source": "line that starts with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1448", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with the word  abc  and contains  123 ", "source": "line that starts with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2329", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with  abc ", "source": "line that starts with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2373", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "list lines that begins with   abc  and contains characters", "source": "line that starts with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2391", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the word abc and includes abc", "source": "line that starts with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3117", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line that starts with the word  abc  and that contains  123 ", "source": "line that starts with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3355", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains 123 and starts with the word abc", "source": "line that starts with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3521", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starts with the characters abc and has more characters in it", "source": "line that starts with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3558", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with abc but uses 123", "source": "line that starts with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3678", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with abc and have a vowel", "source": "line that starts with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3730", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains lowercase letter", "source": "line that starts with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4396", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains vowel", "source": "line that starts with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4570", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with abc and contains a capital letter", "source": "line that starts with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5256", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the chain abc and also contains the digits 123", "source": "line that starts with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5352", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with abc and has a capital letter", "source": "line that starts with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5490", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains capital letter", "source": "line that starts with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5627", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains capital letter", "source": "line that starts with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_6383", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that both begins with the word abc and also has abc in it", "source": "line that starts with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_118", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with a vowel plus the short word abc at the beginning", "source": "line that starts with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_537", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains  abc ", "source": "line that starts with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_544", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc that also has a lowercase letter", "source": "line that starts with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_895", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with abc and contains any other letter", "source": "line that starts with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_941", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with abc and have a letter", "source": "line that starts with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_993", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains lowercase letter", "source": "line that starts with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1071", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with a vowel that starts with abc", "source": "line that starts with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1530", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a character followed by 123", "source": "line that contains character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_143", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line where the word abc appears after a number", "source": "line that contains the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_297", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "what line has a letter just before the number 123", "source": "line that contains letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_507", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  before the number  123 ", "source": "line that contains `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_780", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines in which 123 follows a vowel", "source": "line that contains vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_858", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that have abc right after some digits", "source": "line that contains the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_951", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line where includes a big letter before the number 123", "source": "line that contains capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_963", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line that has any letter before the number 123", "source": "line that contains lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1018", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line that includes a letter followed by the number 123", "source": "line that contains letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1059", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains  123  before the number  123 ", "source": "line that contains `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1114", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "what line contains alphabets before 123", "source": "line that contains letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1141", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that uses character before 123", "source": "line that contains character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1151", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line with the number 123 preceded by a capital letter", "source": "line that contains capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1152", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line where a character precedes the number 123", "source": "line that contains character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1251", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line that contains a vowel before  123 ", "source": "line that contains vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1523", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line containing abc prior to 123", "source": "line that contains `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1653", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that have a capital letter before 123", "source": "line that contains capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1700", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line includes 123 which precedes number 123", "source": "line that contains `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2076", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that uses abc that is before 123", "source": "line that contains `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2255", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has a character before 123", "source": "line that contains character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2294", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has abc then 123", "source": "line that contains `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2350", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "what is a line that has abc that comes before the number 123", "source": "line that contains `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2576", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains character before the number  123 ", "source": "line that contains character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2884", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line that contains a lowercase letter before  123 ", "source": "line that contains lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2993", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that uses vowels before 123", "source": "line that contains vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3114", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line where 123 precedes the number 123", "source": "line that contains `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3225", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains  123  before the number  123 ", "source": "line that contains `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3283", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has a capital letter before the number 123", "source": "line that contains capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3674", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that have a lowercase letter before 123", "source": "line that contains lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4315", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line containing a digit followed by the word abc", "source": "line that contains the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4495", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains vowel before the number  123 ", "source": "line that contains vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4584", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "what line is it that has the word abc in it coming after a digit", "source": "line that contains the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4632", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line containing a letter preceding the number 123", "source": "line that contains letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4787", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that uses 123 in front of 123", "source": "line that contains `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4961", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has the digit 123 after a small letter", "source": "line that contains lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5213", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line where the sequence 123 appears after a lowercase letter", "source": "line that contains lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5407", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line has capital letter before 123", "source": "line that contains capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5525", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has the 123 after the digit 123", "source": "line that contains `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5749", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines where the number 123 appear after any character", "source": "line that contains character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5841", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "what lines contains   123  before   123 ", "source": "line that contains `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_6115", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  after digit", "source": "line that contains the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_38", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that includes letter before the number 123", "source": "line that contains letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_398", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that have a vowel before 123", "source": "line that contains vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_459", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line with abc followed by 123", "source": "line that contains `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_686", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has a number before the word abc", "source": "line that contains the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_807", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  after digit", "source": "line that contains the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_1022", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines where vowels appear before   123  does", "source": "line that contains vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_1194", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line starting either with abc or a digit", "source": "line that starts with `` abc '' or digit", "target": "(call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_602", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line commencing with a vowel or a digit", "source": "line that starts with vowel or digit", "target": "(call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_764", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with vowel or digit", "source": "line that starts with vowel or digit", "target": "(call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_815", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line begins with either a letter or a digit", "source": "line that starts with letter or digit", "target": "(call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1097", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that begin with a number or a lowercase letter", "source": "line that starts with lowercase letter or digit", "target": "(call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1171", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line starting with a digit or letter", "source": "line that starts with letter or digit", "target": "(call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1215", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that begins with a vowel or a digit", "source": "line that starts with vowel or digit", "target": "(call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1222", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that begins with a letter or digit", "source": "line that starts with letter or digit", "target": "(call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1253", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line starts with 123 or a digit", "source": "line that starts with `` 123 '' or digit", "target": "(call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1271", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with lowercase letter or digit", "source": "line that starts with lowercase letter or digit", "target": "(call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1573", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what is a line which begins with either a vowel or with a digit", "source": "line that starts with vowel or digit", "target": "(call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1587", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that begins with a character or a digit", "source": "line that starts with character or digit", "target": "(call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1709", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that starts with a lowercase letter or digit", "source": "line that starts with lowercase letter or digit", "target": "(call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1895", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with capital letter or digit", "source": "line that starts with capital letter or digit", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1924", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines starting 123 or another single digit", "source": "line that starts with `` 123 '' or digit", "target": "(call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_2048", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line beginning with either 123 or any digit", "source": "line that starts with `` 123 '' or digit", "target": "(call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_2054", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that begins with a digit or abc", "source": "line that starts with `` abc '' or digit", "target": "(call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_2495", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with character or digit", "source": "line that starts with character or digit", "target": "(call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_2682", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line beginning with a character or a digit", "source": "line that starts with character or digit", "target": "(call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3349", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line begins with a character or a digit", "source": "line that starts with character or digit", "target": "(call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3535", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that begin with either 123 or a digit", "source": "line that starts with `` 123 '' or digit", "target": "(call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3867", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line begins with a digit or character", "source": "line that starts with character or digit", "target": "(call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_4176", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what is a line that begins with either a lowercase letter or in a digit", "source": "line that starts with lowercase letter or digit", "target": "(call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_4279", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line beginnings with a lowercase letter or a digit", "source": "line that starts with lowercase letter or digit", "target": "(call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_4312", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with  123  or digit", "source": "line that starts with `` 123 '' or digit", "target": "(call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_4836", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with letter or digit", "source": "line that starts with letter or digit", "target": "(call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5281", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line beginning with a letter or a digit", "source": "line that starts with letter or digit", "target": "(call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5687", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line with a vowel or digit at the beginning", "source": "line that starts with vowel or digit", "target": "(call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5704", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line begins with a letter or digit", "source": "line that starts with letter or digit", "target": "(call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5821", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that begins with a lowercase letter or a digit", "source": "line that starts with lowercase letter or digit", "target": "(call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_6248", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line begins with a capital letter or a digit", "source": "line that starts with capital letter or digit", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_22", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that begins with either a capital letter or a digit", "source": "line that starts with capital letter or digit", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_822", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line begins with either abc or with a digit", "source": "line that starts with `` abc '' or digit", "target": "(call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_968", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that begin with either a vowel or digit", "source": "line that starts with vowel or digit", "target": "(call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_982", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with  abc  or digit", "source": "line that starts with `` abc '' or digit", "target": "(call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_1170", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line begins with either a capital letter in with a digit", "source": "line that starts with capital letter or digit", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_1191", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that begin with a capital letter or digit", "source": "line that starts with capital letter or digit", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_1290", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with lowercase letter or digit", "source": "line that starts with lowercase letter or digit", "target": "(call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_1364", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line beginning with the number 123 or a digit", "source": "line that starts with `` 123 '' or digit", "target": "(call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_1373", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that begin with either a capital letter or digit", "source": "line that starts with capital letter or digit", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_1378", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that begins with a character or a digit", "source": "line that starts with character or digit", "target": "(call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_1456", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line starts with abc and has abc repeated at the very end", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_534", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with the word  abc ", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1245", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines beginning and ending with abc", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2097", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends with the word abc and also begins with the word abc", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2428", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with the word  abc ", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2976", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends and starts with abc", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_1248", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a capital letter as well as the word abc", "source": "line that contains capital letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_46", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing 123 and abc", "source": "line that contains `` 123 '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_763", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that contains the word  abc ", "source": "line that contains letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_840", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with both 123 and abc in it somewhere", "source": "line that contains `` 123 '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_847", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains the word abc", "source": "line that contains `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1039", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a letter and  abc ", "source": "line that contains letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1354", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a letter and the smaller word abc", "source": "line that contains letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1416", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains abc", "source": "line that contains character and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1577", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that contains the word  abc ", "source": "line that contains lowercase letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1745", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that contains the word  abc ", "source": "line that contains vowel and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1841", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses characters and abc", "source": "line that contains character and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2061", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing both a lowercase letter and the word abc", "source": "line that contains lowercase letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2215", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that contains the word  abc ", "source": "line that contains capital letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2270", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have abc", "source": "line that contains `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2460", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and abc", "source": "line that contains lowercase letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2481", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with any lowercase letter and the word abc", "source": "line that contains lowercase letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2983", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains both a letter and the word abc", "source": "line that contains letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3086", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines contains vowels and   abc ", "source": "line that contains vowel and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3457", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains  123  and contains  abc ", "source": "line that contains `` 123 '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3634", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that contains the word  abc ", "source": "line that contains character and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3688", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that contains the word  abc ", "source": "line that contains vowel and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3955", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that contains the word  abc ", "source": "line that contains lowercase letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4092", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have capital letters as well as the word abc", "source": "line that contains capital letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4230", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have more than one occasions of abc", "source": "line that contains `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4812", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that contains the word  abc ", "source": "line that contains `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5296", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that contains the word  abc ", "source": "line that contains `` 123 '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5345", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and that includes the word abc", "source": "line that contains `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5373", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have in them a capital letter and the word abc", "source": "line that contains capital letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5467", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and abc", "source": "line that contains vowel and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5647", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc", "source": "line that contains `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_6000", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing a character and containing word abc", "source": "line that contains character and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_6065", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that contains the word  abc ", "source": "line that contains `` 123 '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_6083", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters and abc", "source": "line that contains letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_6128", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a lowercase letter and the smaller word abc", "source": "line that contains lowercase letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_6135", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains a capita letter with the word abc", "source": "line that contains capital letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_6295", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain both a lowercase letter and the word abc", "source": "line that contains lowercase letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_344", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line which contains vowel as well as the word abc", "source": "line that contains vowel and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_551", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has the word abc and contains a character", "source": "line that contains character and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_645", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a character as well as the smaller word abc", "source": "line that contains character and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_652", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a digit before a vowel at the end", "source": "line that ends with vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_7", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that concludes with a capital letter after a digit", "source": "line that ends with capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_train_82", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what line ends with a capital letter and comes before a number", "source": "line that ends with capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_106", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with  123  after digit", "source": "line that ends with `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))))", "qid": "regex_train_346", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that end with abc before a number", "source": "line that ends with `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_390", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that has abc at its end before a number", "source": "line that ends with `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_516", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with a digital followed by a letter", "source": "line that ends with letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))))", "qid": "regex_train_535", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with capital letter after digit", "source": "line that ends with capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_train_572", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with character after digit", "source": "line that ends with character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))))", "qid": "regex_train_736", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what line ends with a letter before a digit", "source": "line that ends with letter before digit", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_819", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that contains a digit and ends with a vowel", "source": "line that ends with vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_train_850", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with vowel after digit", "source": "line that ends with vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_train_882", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line ending with a digit followed by a lowercase letter", "source": "line that ends with lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_914", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with a digit and then a character", "source": "line that ends with character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))))", "qid": "regex_train_941", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that concludes with a letter after any digit", "source": "line that ends with letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))))", "qid": "regex_train_1044", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that end with vowels before digits", "source": "line that ends with vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_1199", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with a lowercase letter and then a digit", "source": "line that ends with lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_1214", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what line stops with some digit then abc", "source": "line that ends with `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))))", "qid": "regex_train_1233", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "which lines terminate with a abc and then a number", "source": "line that ends with `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_1274", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line with a digit followed by 123", "source": "line that ends with `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))))", "qid": "regex_train_1371", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that end with capital letters then digits", "source": "line that ends with capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_1490", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with lowercase letter after digit", "source": "line that ends with lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_1917", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that conclude with a character directly after the digit", "source": "line that ends with character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))))", "qid": "regex_train_1955", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines where lowercase letters appear after a number", "source": "line that ends with lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_2059", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that concludes with 123 after a digit", "source": "line that ends with `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))))", "qid": "regex_train_2090", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends letter digit in sequence", "source": "line that ends with letter before digit", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_2182", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that end with a capital letter followed by a digit", "source": "line that ends with capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_2222", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that ends with any character after a digit", "source": "line that ends with character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))))", "qid": "regex_train_2319", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that finishes with a lowercase letter after a digit", "source": "line that ends with lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_2493", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line that a digit followed by a lowercase letter", "source": "line that ends with lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_2620", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with  123  before digit", "source": "line that ends with `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_2705", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that end with a digit followed by a lowercase letter", "source": "line that ends with lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_2791", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with a digit and then 123", "source": "line that ends with `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))))", "qid": "regex_train_2824", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with a digit followed by a letter", "source": "line that ends with letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))))", "qid": "regex_train_3004", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with  123  before a digit", "source": "line that ends with `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_3037", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that has 123 at the end before a number", "source": "line that ends with `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_3106", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with lowercase letter before digit", "source": "line that ends with lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_3125", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that finishes with a letter before a digit", "source": "line that ends with letter before digit", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_3204", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with  abc  before digit", "source": "line that ends with `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_3371", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what is a line that ends with abc coming after the digit", "source": "line that ends with `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))))", "qid": "regex_train_3601", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line that has 123 at the end and following the digit", "source": "line that ends with `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))))", "qid": "regex_train_3791", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that concludes with a character after a digit", "source": "line that ends with character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))))", "qid": "regex_train_3826", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line ending with a digit followed by a vowel", "source": "line that ends with vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_train_3939", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with digit followed by abc", "source": "line that ends with `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))))", "qid": "regex_train_3960", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that conclude with the letter sequence abc after any digit", "source": "line that ends with `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))))", "qid": "regex_train_4043", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that end with a character before a digit", "source": "line that ends with character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_4091", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with a number followed by a capital letter", "source": "line that ends with capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_train_4107", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what is a line that ends with a capital letter that comes before a digit", "source": "line that ends with capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_4192", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with capital letter before digit", "source": "line that ends with capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_4203", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that comes to an end with a number after a character", "source": "line that ends with character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_4326", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with  abc  after digit", "source": "line that ends with `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))))", "qid": "regex_train_4409", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line that terminates with a vowel then a digit", "source": "line that ends with vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_4421", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line that finishes with abc prior to a digit", "source": "line that ends with `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_4676", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that stops with a vowel after any digits", "source": "line that ends with vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_train_4769", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what line ends in 123 that comes after a digit", "source": "line that ends with `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))))", "qid": "regex_train_5149", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with capital letter before digit", "source": "line that ends with capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_5330", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line that ends with a lowercase number that comes before a digit", "source": "line that ends with lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_5412", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that has a capital letter and digit at the end", "source": "line that ends with capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_5418", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what line ends with a capital letter that comes after a digit", "source": "line that ends with capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_train_5542", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with a letter preceding a digit", "source": "line that ends with letter before digit", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_5675", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with lowercase letter after digit", "source": "line that ends with lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_5934", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with 123 before a digit", "source": "line that ends with `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_5978", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that has a lowercase letter and digit at the end", "source": "line that ends with lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_6044", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line ending with a digit preceded by a character", "source": "line that ends with character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_6045", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line finishing off with a digit followed by a letter", "source": "line that ends with letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))))", "qid": "regex_train_6094", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that begins with a capital letter that is after a digit", "source": "line that ends with capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_train_6180", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with a lowercase letter followed by a digit", "source": "line that ends with lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_6338", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what shows a digit before ending with a vowel", "source": "line that ends with vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_test_71", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a digit before a vowel on a line", "source": "line that ends with vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_test_113", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that includes a number after a small letter", "source": "line that ends with lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_187", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "which line ends with 123 before the digit", "source": "line that ends with `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_208", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ended by 123 and a digit", "source": "line that ends with `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_245", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line ending with any digit predicated by a vowel", "source": "line that ends with vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_275", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with capital letter after digit", "source": "line that ends with capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_test_417", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with vowel before digit", "source": "line that ends with vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_603", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that finishes with a character before a digit", "source": "line that ends with character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_706", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that terminate with abc directly before a digit", "source": "line that ends with `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_729", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with a digit followed by a character", "source": "line that ends with character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))))", "qid": "regex_test_892", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line concludes wcharacter then digit", "source": "line that ends with character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_1084", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with vowel before digit", "source": "line that ends with vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_1294", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that concludes with a vowel before a digit", "source": "line that ends with vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_1296", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that end with a capital letter after a number", "source": "line that ends with capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_test_1404", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that contains lowercase letter and that ends with the word  abc ", "source": "line that contains lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_67", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a lowercase letter and end with abc", "source": "line that contains lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_218", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that has a capital letter and finishes with the word abc", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_672", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that is ended by abc in lowercase", "source": "line that contains lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_745", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with the word  abc ", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_826", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with the word  abc ", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_854", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a character and has the word abc at the end", "source": "line that contains character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1058", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line with 123 in it that ends with abc", "source": "line that contains `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1761", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines with capital letters and end with abc", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1846", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line using a character and ending with abc", "source": "line that contains character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1925", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has 123 in it and also ends in the word abc", "source": "line that contains `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1938", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that utilize a character and end with the word abc", "source": "line that contains character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2233", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with the word  abc ", "source": "line that contains lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2236", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line with a capital letter ending with the smaller word abc", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2383", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what word has both a vowe and ends with the smaller word abc", "source": "line that contains vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2475", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that includes 123 and that concludes with the word abc", "source": "line that contains `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3121", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with abc and uses vowels in it", "source": "line that contains vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3351", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with the word  abc ", "source": "line that contains vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3387", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with the word  abc ", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3514", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with the word  abc ", "source": "line that contains `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3592", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines ending with abc that also include letters", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3790", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a letter and ends with the smaller word abc", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3796", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with the word  abc ", "source": "line that contains vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3842", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that ends with the word  abc ", "source": "line that contains `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3897", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a letter that finishes with the word abc", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4291", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a vowel and that concludes with the word abc", "source": "line that contains vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4768", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line with a vowel and ending with word abc", "source": "line that contains vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4909", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line containing the number 123 and ending with the word abc", "source": "line that contains `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5018", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line includes abc and also finishes with the word abc", "source": "line that contains `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5134", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line with abc in the ending plus the start or middle", "source": "line that contains `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5285", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with the word  abc ", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5898", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line has a character and also ends in the word abc", "source": "line that contains character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_19", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a capital letter and terminates with the word abc", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_82", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line contains abc and ends with the word abc", "source": "line that contains `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_147", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "which line has abc in it and also ends with the word abc", "source": "line that contains `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_416", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line has a letter in it and also ends in the word abc", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_684", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain a capital letter but also ends in abc", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_958", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and stops after the word abc", "source": "line that contains lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1028", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a lowercase letter and that concludes with the word abc", "source": "line that contains lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1120", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters and stops after abc", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1150", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels but ends with the letters abc", "source": "line that contains vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1504", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a character and ending with the word segment abc", "source": "line that contains character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1557", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that have 123 and end with abc", "source": "line that contains `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1572", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "the word  abc  before the number  123 ", "source": "the word `` abc '' before the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_687", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the word  abc  after the number  123 ", "source": "the word `` abc '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1073", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the word  abc  after the number  123 ", "source": "the word `` abc '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1116", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the word abc preceding the number 123", "source": "the word `` abc '' before the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1947", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the digit 123 before the word abc", "source": "the word `` abc '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_2492", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "lines where 123 appears after abc", "source": "the word `` abc '' before the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_2692", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the word abc followed by the number 123", "source": "the word `` abc '' before the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_3185", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "what is a line where the word abc comes after the number 123", "source": "the word `` abc '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_4505", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "line using 123 followed by abc", "source": "the word `` abc '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_192", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "lines that have a lowercase letter before a digit", "source": "line that contains lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_245", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that include a lowercase letter directly after a digit", "source": "line that contains lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_348", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains  123  before digit", "source": "line that contains `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_470", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line using 123 followed by a digit", "source": "line that contains `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_577", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has a number after a character", "source": "line that contains character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_601", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that contain 123", "source": "line that contains `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_752", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that have a vowel come before a digit", "source": "line that contains vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_813", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has 123 before a digit", "source": "line that contains `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_833", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line including digit followed by a lowercase letter", "source": "line that contains lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_953", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what is a line that has a lowercase letter after a digit", "source": "line that contains lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_1034", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains capital letter after digit", "source": "line that contains capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_1072", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains letter after digit", "source": "line that contains letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_1105", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what line has 123 before a digit", "source": "line that contains `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_1158", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains capital letter before digit", "source": "line that contains capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_1325", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that has vowels before numbers", "source": "line that contains vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_1450", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that includes a capital letter followed by a digit", "source": "line that contains capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_1785", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that includes a digit followed by the sequence 123", "source": "line that contains `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_1834", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that contains a vowel before a digit", "source": "line that contains vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2122", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has  abc  before digit", "source": "line that contains `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2227", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that have in them a vowel before a digit", "source": "line that contains vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2372", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what line has a capital letter that comes after a digit", "source": "line that contains capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_2408", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line where a number follows after a character", "source": "line that contains character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_2449", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that use capital letters after numbers", "source": "line that contains capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_2470", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains character after digit", "source": "line that contains character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_2553", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains lowercase letter before digit", "source": "line that contains lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2712", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has a number  before a vowel", "source": "line that contains vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_2911", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines where a letter appears before a number", "source": "line that contains letter before digit", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3431", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that includes 123 after a digit", "source": "line that contains `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_3484", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has a character after digit", "source": "line that contains character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_3630", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that include a character directly before the digit", "source": "line that contains character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3644", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that incldes 123 after a digit", "source": "line that contains `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_3764", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses vowels before digits", "source": "line that contains vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3782", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains a capital letter before any digits", "source": "line that contains capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4026", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line with a digit followed by a letter", "source": "line that contains letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_4123", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line using a lowercase letter followed by a digit", "source": "line that contains lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4141", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line containing a digit followed by a letter", "source": "line that contains letter before digit", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4208", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "which line has a character that comes before a digit", "source": "line that contains character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4209", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains  123  after digit", "source": "line that contains `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_4399", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that include a vowel right after a digit", "source": "line that contains vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_4462", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses capital letters before digits", "source": "line that contains capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4503", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  before digit", "source": "line that contains `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4529", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses letters before digits", "source": "line that contains letter before digit", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4604", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line where abc appears before digits", "source": "line that contains `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4908", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that includes a lowercase letter before a digit", "source": "line that contains lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4963", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has a digit followed by a vowel", "source": "line that contains vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_4985", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line using a digit followed by a character", "source": "line that contains character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_5030", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains vowel after digit", "source": "line that contains vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_5140", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses abc before digits", "source": "line that contains `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5253", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "which line has a vowel that comes after a digit", "source": "line that contains vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_5295", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that has 123 then a digit", "source": "line that contains `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5335", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that includes a character followed by a digit", "source": "line that contains character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_5391", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that include the sequence abc right before a digit", "source": "line that contains `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5427", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that have 123 after a digit", "source": "line that contains `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_5468", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains capital letter after digit", "source": "line that contains capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_5611", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains  123  after digit", "source": "line that contains `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_5650", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that have a letter after a digit", "source": "line that contains letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_5673", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that contains  abc  after a digit", "source": "line that contains `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_5693", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains lowercase letter after digit", "source": "line that contains lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_5701", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains vowel before digit", "source": "line that contains vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5714", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  after digit", "source": "line that contains `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_5726", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines where a letter appears after a number", "source": "line that contains character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_5755", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains character before digit", "source": "line that contains character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5847", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that contains abc followed by a digit", "source": "line that contains `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5925", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that includes abc after a digit", "source": "line that contains `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_5946", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line containing a the characters 123 after a digit", "source": "line that contains `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_6118", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  before digit", "source": "line that contains `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_6146", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has a lowercase letter after a digit", "source": "line that contains lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_6287", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that contain a number followed by a capital letter", "source": "line that contains capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_test_146", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line has a letter before a number", "source": "line that contains letter before digit", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_321", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses lowercase letters before digits", "source": "line that contains lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_322", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line containing a capital letter preceding a digit", "source": "line that contains capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_334", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that includes a letter after any digit", "source": "line that contains letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_test_462", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line where lowercase letters appear after digits", "source": "line that contains lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_test_536", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains capital letter before digit", "source": "line that contains capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_619", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line using a character and then a digit", "source": "line that contains character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_624", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains letter before digit", "source": "line that contains letter before digit", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_659", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line containing a digit followed by a capital letter", "source": "line that contains capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_test_701", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses letters after digits", "source": "line that contains letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_test_718", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line where abc appears before a digit", "source": "line that contains `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_888", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line using a digit followed by a vowel", "source": "line that contains vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_test_935", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line containing a letter before a digit", "source": "line that contains letter before digit", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_1031", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what line has a digit preceding a capital letter", "source": "line that contains capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_test_1139", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with a number and then abc", "source": "line that contains `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_test_1323", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line where abc follows a digit", "source": "line that contains `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_test_1358", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains letter after digit", "source": "line that contains letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_test_1395", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that have any character followed by any digit", "source": "line that contains character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_1526", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains lowercase letter before the digit", "source": "line that contains lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_1550", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains lowercase letter before digit", "source": "line that contains lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_1578", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains vowel before digit", "source": "line that contains vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_1585", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what lines do not end with a character", "source": "line that not ends with character", "target": "(call + (string \"~(\") (call + (string .*) (string .)) (string \")\"))", "qid": "regex_train_2", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not ends with  abc ", "source": "line that not ends with `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (string abc)) (string \")\"))", "qid": "regex_train_54", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "which line does not start with 123", "source": "line that not starts with `` 123 ''", "target": "(call + (string \"~(\") (call + (string 123) (string .*)) (string \")\"))", "qid": "regex_train_184", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not begin with character", "source": "line that not starts with character", "target": "(call + (string \"~(\") (call + (string .) (string .*)) (string \")\"))", "qid": "regex_train_227", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that begins with anything other than a capitalized letter", "source": "line that not starts with capital letter", "target": "(call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_train_286", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not begin with a lowercase letter", "source": "line that not starts with lowercase letter", "target": "(call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_295", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not ends with vowel", "source": "line that not ends with vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\"))", "qid": "regex_train_341", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not start with a lowercase letter", "source": "line that not starts with lowercase letter", "target": "(call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_377", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not begin with a vowel", "source": "line that not starts with vowel", "target": "(call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_460", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not start with abc", "source": "line that not starts with `` abc ''", "target": "(call + (string \"~(\") (call + (string abc) (string .*)) (string \")\"))", "qid": "regex_train_490", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not begin with a letter", "source": "line that not starts with letter", "target": "(call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_549", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not start with a letter", "source": "line that not starts with letter", "target": "(call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_591", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "the line must end with a capital letter", "source": "line that not ends with lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\"))", "qid": "regex_train_637", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not end with a vowel", "source": "line that not ends with vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\"))", "qid": "regex_train_655", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "no letter at the begining in line", "source": "line that not starts with letter", "target": "(call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_786", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line ending without a capital letter", "source": "line that not ends with capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\"))", "qid": "regex_train_824", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not have abc in the beginning", "source": "line that not starts with `` abc ''", "target": "(call + (string \"~(\") (call + (string abc) (string .*)) (string \")\"))", "qid": "regex_train_838", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not end with 123", "source": "line that not ends with `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123)) (string \")\"))", "qid": "regex_train_919", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not begin with 123", "source": "line that not starts with `` 123 ''", "target": "(call + (string \"~(\") (call + (string 123) (string .*)) (string \")\"))", "qid": "regex_train_999", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not end with 123", "source": "line that not ends with `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123)) (string \")\"))", "qid": "regex_train_1117", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "what is a line that does not begin in abc", "source": "line that not starts with `` abc ''", "target": "(call + (string \"~(\") (call + (string abc) (string .*)) (string \")\"))", "qid": "regex_train_1407", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not start with a vowel", "source": "line that not starts with vowel", "target": "(call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_1477", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that doesnt have a vowel at the end", "source": "line that not ends with vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\"))", "qid": "regex_train_1495", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not ends with  123 ", "source": "line that not ends with `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123)) (string \")\"))", "qid": "regex_train_1637", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not stop with letters", "source": "line that not ends with letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\"))", "qid": "regex_train_1652", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "which line does not end in the word abc", "source": "line that not ends with `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (string abc)) (string \")\"))", "qid": "regex_train_1662", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not starts with  123 ", "source": "line that not starts with `` 123 ''", "target": "(call + (string \"~(\") (call + (string 123) (string .*)) (string \")\"))", "qid": "regex_train_1694", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line where the beginning isnt 123", "source": "line that not starts with `` 123 ''", "target": "(call + (string \"~(\") (call + (string 123) (string .*)) (string \")\"))", "qid": "regex_train_1735", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not starts with character", "source": "line that not starts with character", "target": "(call + (string \"~(\") (call + (string .) (string .*)) (string \")\"))", "qid": "regex_train_1737", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that isnt ended with abc", "source": "line that not ends with `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (string abc)) (string \")\"))", "qid": "regex_train_1739", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not starts with lowercase letter", "source": "line that not starts with lowercase letter", "target": "(call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_1827", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not end with a letter", "source": "line that not ends with letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\"))", "qid": "regex_train_1853", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not starts with  abc ", "source": "line that not starts with `` abc ''", "target": "(call + (string \"~(\") (call + (string abc) (string .*)) (string \")\"))", "qid": "regex_train_1944", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that begin with anything other than 123", "source": "line that not starts with `` 123 ''", "target": "(call + (string \"~(\") (call + (string 123) (string .*)) (string \")\"))", "qid": "regex_train_2058", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not end with a capital letter", "source": "line that not ends with capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\"))", "qid": "regex_train_2235", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not stop after a lowercase letter", "source": "line that not ends with lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\"))", "qid": "regex_train_2249", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not end with a vowel", "source": "line that not ends with vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\"))", "qid": "regex_train_2276", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not begin with a letter", "source": "line that not starts with letter", "target": "(call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_2298", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not starts with vowel", "source": "line that not starts with vowel", "target": "(call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_2308", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line ending without a charater", "source": "line that not ends with character", "target": "(call + (string \"~(\") (call + (string .*) (string .)) (string \")\"))", "qid": "regex_train_2338", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that ends some other way that 123", "source": "line that not ends with `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123)) (string \")\"))", "qid": "regex_train_2399", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "what line does not end with a lowercase letter", "source": "line that not ends with lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\"))", "qid": "regex_train_2541", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not end with a capital letter", "source": "line that not ends with capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\"))", "qid": "regex_train_2573", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that doesnt start off with letters", "source": "line that not starts with letter", "target": "(call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_2625", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not end with a vowel", "source": "line that not ends with vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\"))", "qid": "regex_train_2745", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not ends with character", "source": "line that not ends with character", "target": "(call + (string \"~(\") (call + (string .*) (string .)) (string \")\"))", "qid": "regex_train_2781", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not start with a capital letter", "source": "line that not starts with capital letter", "target": "(call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_train_3264", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "list all lines that do not end with   123 ", "source": "line that not ends with `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123)) (string \")\"))", "qid": "regex_train_3279", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line is not begun with abc", "source": "line that not starts with `` abc ''", "target": "(call + (string \"~(\") (call + (string abc) (string .*)) (string \")\"))", "qid": "regex_train_3385", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not starts with character", "source": "line that not starts with character", "target": "(call + (string \"~(\") (call + (string .) (string .*)) (string \")\"))", "qid": "regex_train_3545", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not starts with letter", "source": "line that not starts with letter", "target": "(call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_3556", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not conclude with a character", "source": "line that not ends with character", "target": "(call + (string \"~(\") (call + (string .*) (string .)) (string \")\"))", "qid": "regex_train_3808", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "the line cannot begin with a vowel", "source": "line that not starts with vowel", "target": "(call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_3913", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not begin with a lowercase letter", "source": "line that not starts with lowercase letter", "target": "(call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_4183", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that doesnt end with a letter", "source": "line that not ends with letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\"))", "qid": "regex_train_4294", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not end with characters", "source": "line that not ends with character", "target": "(call + (string \"~(\") (call + (string .*) (string .)) (string \")\"))", "qid": "regex_train_4308", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line not ending with abc", "source": "line that not ends with `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (string abc)) (string \")\"))", "qid": "regex_train_4473", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not start with abc", "source": "line that not starts with `` abc ''", "target": "(call + (string \"~(\") (call + (string abc) (string .*)) (string \")\"))", "qid": "regex_train_4489", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that doesnt end with abc", "source": "line that not ends with `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (string abc)) (string \")\"))", "qid": "regex_train_4625", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines without characters to start with", "source": "line that not starts with character", "target": "(call + (string \"~(\") (call + (string .) (string .*)) (string \")\"))", "qid": "regex_train_4761", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that end with anything other than a vowel", "source": "line that not ends with vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\"))", "qid": "regex_train_4789", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not begin with a character", "source": "line that not starts with character", "target": "(call + (string \"~(\") (call + (string .) (string .*)) (string \")\"))", "qid": "regex_train_5062", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not start with a capital letter", "source": "line that not starts with capital letter", "target": "(call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_train_5072", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not begin with a vowel", "source": "line that not starts with vowel", "target": "(call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_5099", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not ends with letter", "source": "line that not ends with letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\"))", "qid": "regex_train_5351", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not starts with lowercase letter", "source": "line that not starts with lowercase letter", "target": "(call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_5437", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not start with a capital letter", "source": "line that not starts with capital letter", "target": "(call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_train_5514", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines thatdo not end with a lowercase letter", "source": "line that not ends with lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\"))", "qid": "regex_train_5564", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "what  line that not ends with letter", "source": "line that not ends with letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\"))", "qid": "regex_train_5751", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line without a vowel at the beginning", "source": "line that not starts with vowel", "target": "(call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_5811", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not starts with  123 ", "source": "line that not starts with `` 123 ''", "target": "(call + (string \"~(\") (call + (string 123) (string .*)) (string \")\"))", "qid": "regex_train_5848", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not begin with a capital letter", "source": "line that not starts with capital letter", "target": "(call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_train_5890", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not stop with 123", "source": "line that not ends with `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123)) (string \")\"))", "qid": "regex_train_6161", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not end with any letter", "source": "line that not ends with letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\"))", "qid": "regex_train_6211", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not start with 123", "source": "line that not starts with `` 123 ''", "target": "(call + (string \"~(\") (call + (string 123) (string .*)) (string \")\"))", "qid": "regex_test_84", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not conclude with a capital letter", "source": "line that not ends with capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\"))", "qid": "regex_test_313", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not begin with a lowercase letter", "source": "line that not starts with lowercase letter", "target": "(call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_test_324", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not end with a lowercase letter", "source": "line that not ends with lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\"))", "qid": "regex_test_631", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not end with a character", "source": "line that not ends with character", "target": "(call + (string \"~(\") (call + (string .*) (string .)) (string \")\"))", "qid": "regex_test_793", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not stop after abc", "source": "line that not ends with `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (string abc)) (string \")\"))", "qid": "regex_test_835", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not stop with a capital letter", "source": "line that not ends with capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\"))", "qid": "regex_test_1044", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line beginning with a capital letter letter or a digit", "source": "line that not starts with lowercase letter", "target": "(call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_test_1180", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not ends with vowel", "source": "line that not ends with vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\"))", "qid": "regex_test_1188", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that isnt begun with a character", "source": "line that not starts with character", "target": "(call + (string \"~(\") (call + (string .) (string .*)) (string \")\"))", "qid": "regex_test_1331", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that end with something other than a letter", "source": "line that not ends with letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\"))", "qid": "regex_test_1390", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not ends with lowercase letter", "source": "line that not ends with lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\"))", "qid": "regex_test_1458", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not ends with  abc ", "source": "line that not ends with `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (string abc)) (string \")\"))", "qid": "regex_test_1584", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "word with a vowel at the end", "source": "word that contains vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_8", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include a letter and also finish with a vowel", "source": "word that contains letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_22", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word has a vowel and then a capital letter at the end", "source": "word that contains vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_51", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that use a letter and end with abc", "source": "word that contains letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_96", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that contains 123 which also ends with a character", "source": "number that contains `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_120", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that uses lowercase letters and has an uppercase letter at the end", "source": "word that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_148", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses abc and stops after a vowel", "source": "word that contains `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_155", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with any letter and contains any letter", "source": "word that contains letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_160", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses abc and begins with a vowel", "source": "word that contains `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_164", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include a captal letter and begin with a lowercase letter", "source": "word that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_193", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starts with abc and contains a character", "source": "word that contains character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_220", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a character at the beginning that also utilizes a letter", "source": "word that contains letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_226", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word comprised of a lowercase letter and ending with a vowel", "source": "word that contains lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_262", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word where contains vovel that begins with abc", "source": "word that contains vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_302", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a character that begins with a character", "source": "word that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_353", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a letter and ending with a character", "source": "word that contains letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_358", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that ends with vowel", "source": "word that contains character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_361", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with lowercase letter", "source": "word that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_389", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc in the beginning and a capital letter somewhere in it", "source": "word that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_403", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a character and has a vowel at the end", "source": "word that contains character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_414", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with vowel", "source": "word that contains capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_444", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses characters and stop with a letter", "source": "word that contains character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_503", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that contains the word abc but also ends with abc", "source": "word that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_571", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a character and starts with a capital letter", "source": "word that contains character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_595", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with  abc ", "source": "word that contains vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_596", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a capital letter and ending with a lowercase letter", "source": "word that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_620", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with abc that also includes a letter", "source": "word that contains letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_622", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with abc in it that begins with any letter", "source": "word that contains `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_623", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a letter and finish in a lowercase letter", "source": "word that contains letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_626", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "mention a word starting with a lowercase letter and containing a character", "source": "word that contains character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_629", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains a letter and ends with a characer", "source": "word that contains letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_632", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has a vowel and ends with a lowercase letter", "source": "word that contains vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_636", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has at least a capital letter and doesnt end with a number or character", "source": "word that contains capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_660", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has both a lowercase letter in it and also begins with a vowel", "source": "word that contains lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_674", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc and begins with abc", "source": "word that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_693", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with a character at the end", "source": "number that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_699", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word includes abc and begins with a vowel", "source": "word that contains `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_728", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with lowercase letter", "source": "word that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_741", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has lowercase and begins with a capital", "source": "word that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_742", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word has a capital letter in it and also starts with abc", "source": "word that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_779", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has a capital letter that is a character at the start", "source": "word that contains character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_787", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that ends with letter", "source": "word that contains character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_814", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses letters and stops with a character", "source": "word that contains letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_845", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which numbers start with characters", "source": "number that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_902", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has abc but begins with a special character", "source": "word that contains `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_909", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses letters and begins with a capital letter", "source": "word that contains letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_911", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a capital letter and ending with a letter", "source": "word that contains capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_955", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a character and finish with a capital letter", "source": "word that contains character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_967", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that ends with lowercase letter", "source": "word that contains character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_971", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains and starts with characters", "source": "number that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_972", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a lowercase letter that finishes with a capital", "source": "word that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_982", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses and begins with letters", "source": "word that contains letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_993", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a letter and begins with a capital letter", "source": "word that contains letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1003", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains a lowercase letter and ends with abc", "source": "word that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1006", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel and using abc", "source": "word that contains `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1008", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a lowercase letter and uses a vowel within it", "source": "word that contains vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1010", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that starts with lowercase letter", "source": "word that contains character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1014", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word contains a character that stops with abc", "source": "word that contains character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1043", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words made of letters that start with a capital one", "source": "word that contains letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1083", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a character and has letters", "source": "word that contains letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1088", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that starts with  abc ", "source": "word that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1102", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word that contains letter and that starts with capital letter", "source": "word that contains letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1148", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ending in a lowercase letter has abc in it", "source": "word that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1193", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses characters and starts with a vowel", "source": "word that contains character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1209", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a vowel and finish in a lowercase letter", "source": "word that contains vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1231", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers ending in 123", "source": "number that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1236", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter and uses abc at the end", "source": "word that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1276", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character and that ends with  123 ", "source": "number that contains character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1287", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes abc and terminates with a lowercase letter", "source": "word that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1291", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a lowercase letter at the beginning", "source": "word that contains letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1297", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include a vowel and start with one", "source": "word that contains vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1300", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with any character and elsewhere contains the number 123", "source": "number that contains `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1340", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains a vowel and starts with a letter", "source": "word that contains vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1347", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a character and begin with a capital letter", "source": "word that contains character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1363", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses and begins with characters", "source": "number that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1374", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that starts with lowercase letter", "source": "word that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1399", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a character and begin with a letter", "source": "word that contains character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1419", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starting with a capital letter", "source": "word that contains capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1422", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has a character in it and also ends in a vowel", "source": "word that contains character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1442", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number with at least one character and ending with a character", "source": "number that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1446", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a letter but does have a character somewhere else", "source": "word that contains character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1449", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word contains a vowel and starts with a lowercase letter", "source": "word that contains vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1465", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that both contain and end with abc", "source": "word that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1475", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel and using a letter", "source": "word that contains letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1480", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "locate the word that finishes by using a vowel and that also has a capitalized letter inside of it", "source": "word that contains capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1494", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that starts with vowel", "source": "word that contains character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1505", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include capital letters and the phase abc", "source": "word that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1520", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains any letter and ends with any letter", "source": "word that contains letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1530", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character and that starts with character", "source": "number that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1550", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with capital letter", "source": "word that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1554", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that have a character and begin with 123", "source": "number that contains character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1556", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that starts with capital letter", "source": "word that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1559", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with letters and uses abc at the ending", "source": "word that contains letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1564", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has abc within it and also begins with the smaller word abc", "source": "word that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1569", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter that finishes with a lowercase letter", "source": "word that contains letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1571", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that ends with vowel", "source": "word that contains letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1582", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses capital letters and begins with a lowercase letter", "source": "word that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1591", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a lowercase letter and ends with a vowel", "source": "word that contains lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1615", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with abc in it and ends with an uppercase letter", "source": "word that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1640", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a character and has a small letter at the end", "source": "word that contains character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1660", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that ends with letter", "source": "word that contains character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1663", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that starts with letter", "source": "word that contains letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1670", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains  abc  and ends with a letter", "source": "word that contains `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1705", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a lowercase letter and that begins with abc", "source": "word that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1720", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that ends with vowel", "source": "word that contains `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1751", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes a vowel and terminates with a character", "source": "word that contains vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1771", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that uses and begins with a character", "source": "word that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1772", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what numbers begin with a character and contain 123", "source": "number that contains `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1780", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word starting with a containing a vowel", "source": "word that contains vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1799", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that ends with character", "source": "word that contains letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1805", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and contains lowercase letter", "source": "word that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1845", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a letter and contains a letter", "source": "word that contains vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1847", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that starts with letter", "source": "word that contains `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1851", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a lowercase letter and also a capital letter", "source": "word that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1871", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has character in it and ends in a lowercase letter", "source": "word that contains character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1883", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a lowercase letter and contains letters", "source": "word that contains letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1896", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing abc and ending with a capital letter", "source": "word that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1901", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with a character and then 123 at the end", "source": "number that contains character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1927", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that uses with any letter but ends with a lowercase letter", "source": "word that contains letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1942", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses letters and begins with a character", "source": "word that contains letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1954", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses characters and stops with 123", "source": "number that contains character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1958", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a vowel and has other another vowel later", "source": "word that contains vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1959", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes abc and that ends with a lowercase letter", "source": "word that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2012", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a vowel and uses characters", "source": "word that contains character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2027", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a vowel and had a character in the beginning", "source": "word that contains vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2077", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that ends with capital letter", "source": "word that contains letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2079", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a vowel and contains a lowercase letter", "source": "word that contains lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2118", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character and that ends with  123 ", "source": "number that contains character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2119", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a lowercase letter and ending with a character", "source": "word that contains lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2125", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has a letter in it and also begins with a vowel", "source": "word that contains letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2148", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that starts with lowercase letter", "source": "word that contains character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2153", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with lowercase letter", "source": "word that contains vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2160", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that starts with  abc ", "source": "word that contains letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2164", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that ends with  abc ", "source": "word that contains letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2165", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with capital letter", "source": "word that contains capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2175", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that had an uppercase letter in the beginning and has a small letter also", "source": "word that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2193", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that starts with vowel", "source": "word that contains letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2199", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with abc and has a vowel preceding it", "source": "word that contains vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2203", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a vowel in it that ends with any character", "source": "word that contains vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2210", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what begins with a character and contains a letter", "source": "word that contains letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2231", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word should start and contain a capital letter", "source": "word that contains capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2264", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel and finishes with abc", "source": "word that contains vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2305", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with any letter and contains the string abc", "source": "word that contains `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2310", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that starts with character", "source": "word that contains lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2317", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses vowels and begins with a capital letter", "source": "word that contains vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2323", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a vowel letter and includes a lowercase letter", "source": "word that contains lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2326", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that ends with capital letter", "source": "word that contains vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2330", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with vowel", "source": "word that contains vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2345", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and have a vowel", "source": "word that contains vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2363", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes vowels and concludes with a lowercase letter", "source": "word that contains vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2365", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have abc and begin with a capital letter", "source": "word that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2407", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word that contains character and that ends with capital letter", "source": "word that contains character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2413", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a character to start and a capital letter somewhere in it", "source": "word that contains capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2415", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a character begins with a capital letter", "source": "word that contains character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2426", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word both has a character in it and also starts with a letter", "source": "word that contains character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2478", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with a character and containing 123", "source": "number that contains `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2480", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc at the end", "source": "word that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2486", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a capital letter and starts with a vowel", "source": "word that contains capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2507", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with a vowel and having a capital somewhere in it", "source": "word that contains capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2508", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with abc and contains a letter", "source": "word that contains letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2519", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains any letter and ends with the smaller word abc", "source": "word that contains letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2520", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses capital letters and begins with a character", "source": "word that contains capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2528", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number with a character that begins with 123", "source": "number that contains character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2530", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses characters and begins with abc", "source": "word that contains character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2562", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and begins with a character", "source": "word that contains lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2571", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning in lowercase and containing a letter", "source": "word that contains letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2574", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with  abc ", "source": "word that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2645", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that starts with  abc ", "source": "word that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2649", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes capital letter and has a character at its end", "source": "word that contains capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2696", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with character", "source": "word that contains capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2703", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and stops after a lowercase letter", "source": "word that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2707", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word starting with abc", "source": "word that contains vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2737", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a letter and ending on a vowel", "source": "word that contains letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2758", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a letter and contains a vowel", "source": "word that contains vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2780", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word includes character and concludes wletter", "source": "word that contains character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2830", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words where a vowel appears and that end with a letter", "source": "word that contains vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2841", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has a letter somewhere in it and ends with a character", "source": "word that contains letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2845", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include lowercase letters and begin with a character", "source": "word that contains lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2855", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that starts with  abc ", "source": "word that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2866", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter that begins with a character", "source": "word that contains letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2898", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a lowercase letter and begins with abc", "source": "word that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2919", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that both contains and ends with 123", "source": "number that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2935", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that starts with vowel", "source": "word that contains `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2937", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a character and end with a lowercase letter", "source": "word that contains character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2947", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that includes an uppercase letter and ends with the same", "source": "word that contains capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2949", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which  word that contains lowercase letter and that starts with character", "source": "word that contains lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2974", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with the letter a b or c and also contain a vowel", "source": "word that contains vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2975", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that ends with lowercase letter", "source": "word that contains vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2988", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starting with a lowercase letter", "source": "word that contains character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3005", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains the smaller word abc and ends on a letter", "source": "word that contains `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3008", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with  abc ", "source": "word that contains vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3012", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains a lowercase letter and ends with a lowercase letter", "source": "word that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3047", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a capital letter and has a vowel in it", "source": "word that contains vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3063", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with a vowel as final character", "source": "word that contains vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3079", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses and stops with a capital letter", "source": "word that contains capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3082", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with letter", "source": "word that contains capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3094", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that ends with letter", "source": "word that contains vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3103", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word including uppercase letter concludes wvowel", "source": "word that contains capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3133", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and begins with a letter", "source": "word that contains lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3144", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a lowercase letter and contains at least one lowercase letter", "source": "word that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3168", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses letters but starts with abc", "source": "word that contains letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3189", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with abc", "source": "word that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3206", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with capital letter", "source": "word that contains vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3234", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a lowercase letter and any characters", "source": "word that contains character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3238", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc in the beginning and includes a letter", "source": "word that contains letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3298", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with letter also concludes wletter", "source": "word that contains letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3301", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that starts with capital letter", "source": "word that contains capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3319", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a character starting a word that contains a capital letter", "source": "word that contains capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3324", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a capital letter and ended by a lowercase letter", "source": "word that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3327", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a character and has abc in the beginning", "source": "word that contains character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3329", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starting with abc and containing capital letter", "source": "word that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3337", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ending with a vowel uses a lowercase letter within it", "source": "word that contains lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3339", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses characters and stops with a capital letter", "source": "word that contains character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3348", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses vowels and begins with a character", "source": "word that contains vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3397", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a small letter which has a small letter at the end", "source": "word that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3404", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words beginning with a lowercase letter that include abc", "source": "word that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3405", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses any capital letters but ends with the word abc", "source": "word that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3425", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses the word abc but also starts with a lowercase letter", "source": "word that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3456", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with character", "source": "word that contains lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3479", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that starts with vowel", "source": "word that contains lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3527", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that starts with  abc ", "source": "word that contains character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3549", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that starts with character", "source": "word that contains capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3555", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with any character and contains any other character", "source": "word that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3577", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that starts with letter", "source": "word that contains lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3581", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel and ends with any letter", "source": "word that contains vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3587", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starts with abs and formed with vowel", "source": "word that contains vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3590", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with  abc ", "source": "word that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3610", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that starts with letter", "source": "word that contains capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3613", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word that contains character and that starts with vowel", "source": "word that contains character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3631", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a vowel and ending with a vowel", "source": "word that contains vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3636", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that ends with letter", "source": "word that contains letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3642", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word includes character and finishes wuppercase letter", "source": "word that contains character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3651", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with capital letters and contains   abc ", "source": "word that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3657", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses capital letters and begins with a letter", "source": "word that contains capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3709", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that ends with capital letter", "source": "word that contains letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3742", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that has 123 and finishes with a character", "source": "number that contains `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3749", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a lowercase letter that also has a character at the end", "source": "word that contains lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3757", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses 123 and begins with 123", "source": "number that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3773", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a letter and begin with a letter", "source": "word that contains letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3776", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes a capital letter and terminates with a lowercase letter", "source": "word that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3783", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that contain the character and end with the letter", "source": "word that contains character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3801", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a vowel and ending with a vowel", "source": "word that contains vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3815", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word where a character appears and ends with abc", "source": "word that contains character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3823", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses abc and begins with a character", "source": "word that contains `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3843", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc and begins with a vowel", "source": "word that contains `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3846", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a capital letter and ending with abc", "source": "word that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3876", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with letter", "source": "word that contains vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3890", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with 123", "source": "number that contains character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3908", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with lowercase letter and using a capital letter", "source": "word that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3940", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has 123 and begins with 123", "source": "number that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3997", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains at least one capital letter and starts with a vowel", "source": "word that contains capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4008", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "locate the word that uses a character to start besides making use of a capitalized letter", "source": "word that contains capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4025", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a vowel and finish with a character", "source": "word that contains vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4041", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with character", "source": "word that contains vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4045", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a vowel and ending with a capital letter", "source": "word that contains vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4048", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a capital letter and ending with a character", "source": "word that contains capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4057", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains abc and ends with a lower case letter", "source": "word that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4059", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing characters and ending with a vowel", "source": "word that contains character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4072", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with  abc ", "source": "word that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4083", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses vowels and stops after abc", "source": "word that contains vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4108", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that ends with character", "source": "word that contains vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4111", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a letter and ending with a letter", "source": "word that contains letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4114", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that ends with letter", "source": "word that contains letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4115", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has a character in the beginning and includes a character", "source": "number that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4150", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word including a letter and terminating with a lowercase letter", "source": "word that contains letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4162", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words ending with the characters abc and containing at least one lowercase letter", "source": "word that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4180", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that ends with  abc ", "source": "word that contains character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4205", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word consisting of characters with the last being a vowel", "source": "word that contains character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4216", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has the letters abc appear and finishes with a character", "source": "word that contains `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4224", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains and ends with  abc ", "source": "word that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4231", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that both begins with and contains a character", "source": "number that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4236", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel", "source": "word that contains vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4237", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that starts with  abc ", "source": "word that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4240", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a special character and also has a vowel", "source": "word that contains vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4242", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing the smaller word abc and ending with a vowel", "source": "word that contains `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4243", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses abc and stops after a letter", "source": "word that contains `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4246", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has a lowercase letter in it and also ends in a letter", "source": "word that contains lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4247", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and begins with abc", "source": "word that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4263", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starting with a vowel that also has lowercase in it", "source": "word that contains lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4274", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what cord contains a capital and begins with a lowercase letter", "source": "word that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4275", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a character and has a character at the end", "source": "word that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4282", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word has abc in it and also begins with a letter", "source": "word that contains `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4313", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses abc and begins with a capital letter", "source": "word that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4367", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character and that starts with character", "source": "number that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4369", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with a vowel to start then a character later", "source": "word that contains character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4400", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains any character and also ends with the number 123", "source": "number that contains character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4410", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a small letter and has a letter at the end", "source": "word that contains lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4437", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a character and contains lowercase letters", "source": "word that contains lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4463", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word using a character and ending with any letter", "source": "word that contains character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4470", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words ending with a vowel and also including abc", "source": "word that contains `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4477", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  123  and that starts with  123 ", "source": "number that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4502", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with 123", "source": "number that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4522", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a vowel and end with a capital letter", "source": "word that contains vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4543", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a capital letter and ending with a vowel", "source": "word that contains capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4573", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that starts with capital letter", "source": "word that contains character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4706", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with character", "source": "word that contains vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4726", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number has 123 in it and also begins with a character", "source": "number that contains `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4730", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that ends with lowercase letter", "source": "word that contains vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4749", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include a character and begin with a letter", "source": "word that contains character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4750", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a lowercase letter and beginning with a capital letter", "source": "word that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4765", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and stops after a vowel", "source": "word that contains lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4771", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words where abc appears and end with a vowel", "source": "word that contains `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4778", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that starts with a letter and has capital letter", "source": "word that contains capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4823", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have an abc and end with a character", "source": "word that contains `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4829", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that starts with vowel", "source": "word that contains `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4847", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line beginning with a capital letter and using a character", "source": "word that contains character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4855", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a lowercase letter and contains abc", "source": "word that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4894", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that both contains and ends with a character", "source": "word that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4928", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses 123 and begins with a character", "source": "number that contains `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4934", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a capital letter and has a letter in the beginning", "source": "word that contains capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4940", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a vowel and ending with abc", "source": "word that contains vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4942", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starts with lowercase letters", "source": "word that contains lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4943", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a vowel and ends with a capital letter", "source": "word that contains vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4980", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel and containing a capital letter", "source": "word that contains capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5014", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with lowercase letter", "source": "word that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5044", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with capital letter", "source": "word that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5055", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with a capital letter ended by any letter", "source": "word that contains capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5066", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with letter", "source": "word that contains vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5077", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number beginning with 123 and using a character", "source": "number that contains character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5083", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words ending in a lowercase letter but also containing a capital letter", "source": "word that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5106", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that include a character and begin with 123", "source": "number that contains character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5119", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has abc in it and also ends in a capital letter", "source": "word that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5171", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a vowel and has a character at the end", "source": "word that contains vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5176", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes a lowercase letter and that commences with a character", "source": "word that contains lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5184", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with and also contains a lowercase letter", "source": "word that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5189", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that have 123 and end with a character", "source": "number that contains `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5195", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes abc and also begins with abc", "source": "word that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5196", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and ends with a capital letter", "source": "word that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5210", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel and begins with a lowercase letter", "source": "word that contains vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5212", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a vowel and has a small letter at the end", "source": "word that contains vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5214", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what contains lowercase letters ending in a capital letter", "source": "word that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5221", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses vowels and stops after a character", "source": "word that contains vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5225", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that ends with capital letter", "source": "word that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5238", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with at least one letter in lowercase", "source": "word that contains lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5257", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a lowercase letter and begin with a lowercase letter", "source": "word that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5258", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that starts with capital letter", "source": "word that contains letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5284", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include the phase abc and start with a character", "source": "word that contains `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5317", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any words containing lowercase and ends with a capital", "source": "word that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5324", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have abc and end with a vowel", "source": "word that contains `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5326", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that starts with  abc ", "source": "word that contains character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5327", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that includes 123 in it and comes to an end with a character", "source": "number that contains `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5328", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has abc within it and terminates with a character", "source": "word that contains `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5338", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number includes 123 and concludes wcharacter", "source": "number that contains `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5339", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that ends with vowel", "source": "word that contains character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5359", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that uses capital letters and stops with a vowel", "source": "word that contains capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5367", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "where a word includes a letter that finishes with big letter", "source": "word that contains letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5416", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel in the beginning and includes a capital letter", "source": "word that contains capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5445", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses capital letters and begins with abc", "source": "word that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5451", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter and a character at the end", "source": "word that contains capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5507", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that starts with character", "source": "word that contains capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5524", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses and starts with a vowels", "source": "word that contains vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5535", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that both starts with and utilizes 123", "source": "number that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5538", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a lowercase letter and finishes with a vowel", "source": "word that contains lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5568", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words beginning with a character and including a vowel", "source": "word that contains vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5570", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has a lowercase letter somewhere and specifically ends with one", "source": "word that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5594", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a lowercase letter and also ends with the same letter", "source": "word that contains lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5622", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a letter and ending with abc", "source": "word that contains letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5637", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a lowercase letter and contains lowercase letters", "source": "word that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5680", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that starts with letter", "source": "word that contains capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5713", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses and starts with a capital letter", "source": "word that contains capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5730", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  123  and that starts with character", "source": "number that contains `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5738", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing and ending with a character", "source": "word that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5747", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a lowercase letter that begins with any character", "source": "word that contains lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5764", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that ends with character", "source": "word that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5765", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit  that includes a character and ends with it", "source": "number that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5782", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with lowercase letter and using a vowel", "source": "word that contains vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5789", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that ends with capital letter", "source": "word that contains character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5807", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a capital letter and also a character at the end", "source": "word that contains capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5823", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and stops after abc", "source": "word that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5871", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that had a small letter in the beginning and includes a letter", "source": "word that contains letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5904", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has a letter in it and also ends in a letter", "source": "word that contains letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5913", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a vowel and is more than one letter long", "source": "word that contains letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5938", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and begins with a vowel", "source": "word that contains lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5968", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with vowel", "source": "word that contains lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5974", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that starts with character", "source": "word that contains `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5988", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that starts with lowercase letter", "source": "word that contains letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6049", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a character and beginning with a vowel", "source": "word that contains character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6064", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word starting with abc that contains abc", "source": "word that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6070", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with multiple letters ending with a vowel", "source": "word that contains letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6076", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with a capital letter and has a vowel", "source": "word that contains vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6084", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that starts with vowel", "source": "word that contains letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6086", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that ends with  abc ", "source": "word that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6112", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel at the beginning that utilizes a capital letter", "source": "word that contains capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6132", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has 123 and begins with 123", "source": "number that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6148", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with and containing a capital letter", "source": "word that contains capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6164", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that ends with character", "source": "word that contains letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6173", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words contain a lowercase letter and end with a character", "source": "word that contains lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6203", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with any uppercase letter", "source": "word that contains capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6205", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with lowercase letter", "source": "word that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6225", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that starts with character", "source": "word that contains letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6233", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with  abc ", "source": "word that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6264", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that include characters and conclude with the number line 123", "source": "number that contains character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6299", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc at the end and uses characters", "source": "word that contains character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6337", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc and finishes with a letter", "source": "word that contains `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6341", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes abc and begins with a letter", "source": "word that contains `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6369", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has both a lowercase letter and a letter at the beginning", "source": "word that contains lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_8", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that ends with vowel", "source": "word that contains vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_21", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with letters and have vowels as well", "source": "word that contains vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_37", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number containing 123 and also ending with 123", "source": "number that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_51", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a vowel and ends with  abc ", "source": "word that contains vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_70", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that starts with letter", "source": "word that contains lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_142", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a capital letter and contains abc", "source": "word that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_149", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have abc and start with lowercase letters", "source": "word that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_150", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that starts with capital letter", "source": "word that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_196", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word contains a capital letter that also starts with a lowercase letter", "source": "word that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_213", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a vowel and that starts with a vowel", "source": "word that contains vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_222", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  123  and that ends with  123 ", "source": "number that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_261", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a letter and using a character", "source": "word that contains character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_271", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a character and has a capital letter", "source": "word that contains capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_279", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with and including the sequence 123", "source": "number that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_280", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and have a letter", "source": "word that contains letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_285", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word that contains vowel and that ends with letter", "source": "word that contains vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_299", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a capital letter and contains at least one letter", "source": "word that contains letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_307", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number begins with 123 and contains a character", "source": "number that contains character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_387", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing abc and ending with a character", "source": "word that contains `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_399", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with abc at the beginning and a character in it", "source": "word that contains character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_441", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a lowercase letter and ending with a character", "source": "word that contains lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_472", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses vowels but ends with a letter", "source": "word that contains vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_492", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that ends with vowel", "source": "word that contains `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_499", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has the smaller word abc in the beginning that also utilizes a character", "source": "word that contains character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_532", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a capital letter and contains vowels", "source": "word that contains vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_538", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number containing a character and ending with a character", "source": "number that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_548", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word has a lowercase letter in it and also begins with a lowercase letter", "source": "word that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_559", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that starts with capital letter", "source": "word that contains capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_566", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has a capital letter in it and also begins in a letter", "source": "word that contains capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_571", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with vowels that end with lowercase letters", "source": "word that contains vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_576", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a letter and containing lowercase letters", "source": "word that contains lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_587", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that starts with lowercase letter", "source": "word that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_593", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a letter and that concludes with abc", "source": "word that contains letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_661", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a character and ending with abc", "source": "word that contains character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_668", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has a vowel in it and also begins with a capital letter", "source": "word that contains vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_683", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains lowercase letters and ends with   abc ", "source": "word that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_723", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word both includes and concludes with small letter", "source": "word that contains lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_725", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with letter", "source": "word that contains capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_749", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a capital letter also has a lowercase letter", "source": "word that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_751", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that ends with character", "source": "word that contains vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_761", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a capital and ending with abc", "source": "word that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_771", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that utilize a character and begin with a vowel", "source": "word that contains character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_846", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with and includes a character", "source": "word that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_854", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that ends with  abc ", "source": "word that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_858", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words beginning with a capital and containing the set abc", "source": "word that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_871", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has a character in it and also begins with a lowercase letter", "source": "word that contains character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_882", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital and starts with a letter", "source": "word that contains capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_886", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that utilize a lowercase letter within them and end with abc", "source": "word that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_899", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a letter and starts with a capital letter", "source": "word that contains letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_902", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a vowel and contains letters", "source": "word that contains letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_930", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses capital letters but stops with a letter", "source": "word that contains capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_952", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has a capital letter in it and also ends with a capital letter", "source": "word that contains capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_990", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character and that ends with character", "source": "number that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1010", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that contain vowels and end with vowels", "source": "word that contains vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1023", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes an uppercase letter and has abc at the end", "source": "word that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1039", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with vowel", "source": "word that contains capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1046", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses characters and stops with a lowercase letter", "source": "word that contains character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1085", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include letters and end with a capital one", "source": "word that contains letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1086", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that starts with letter", "source": "word that contains letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1103", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that utilize any characters and ends with a vowel", "source": "word that contains character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1133", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word has a lower case letter and ends with any letter", "source": "word that contains lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1140", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with letter", "source": "word that contains lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1196", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains a letter that begins with a lowercase letter", "source": "word that contains letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1209", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that starts with lowercase letter", "source": "word that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1220", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes a character and terminates with a capital letter", "source": "word that contains character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1236", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with vowels that begins with a lowercase letter", "source": "word that contains vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1247", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a cahracter and begins with one", "source": "word that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1275", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes a capital letter and that terminates with a character", "source": "word that contains capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1308", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses capital letters and stops with a lowercase letter", "source": "word that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1330", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word has both a lowercase letter and starts with the letter ", "source": "word that contains lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1336", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with both a character and a lowercase letter somewhere in them", "source": "word that contains character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1359", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words have a vowel and a letter at the end", "source": "word that contains vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1387", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses letters and begins with a vowel", "source": "word that contains letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1394", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with capital letter", "source": "word that contains vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1401", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word contains a character that ends with another character", "source": "word that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1405", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains  abc  and starts with a capital letter", "source": "word that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1419", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a digit that contains a character and also ends with one", "source": "number that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1443", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with the same letter also found before the end", "source": "word that contains letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1444", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a character in the beginning and includes abc in it", "source": "word that contains `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1455", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with lowercase letters", "source": "word that contains letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1467", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes abc and begins with a lowercase letter", "source": "word that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1498", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing the smaller word abc and ending with a lowercase letter", "source": "word that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1547", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number using 123 and ending with 123", "source": "number that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1553", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a vowel and ending with a letter", "source": "word that contains vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1591", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin and end with the same letter", "source": "word that contains capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1592", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has abc in it and ends with a character", "source": "word that contains `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1595", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number does not end with abc", "source": "number that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_12", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that does not end in a lowercase letter", "source": "number that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_57", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that dont end in a lowercase letter", "source": "number that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_63", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number concludes wo small letter", "source": "number that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_76", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not begin with a capital letter", "source": "number that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_83", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not begin with a capital letter", "source": "word that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_117", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not begin with 123", "source": "number that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_153", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that doesnt start out with a capital", "source": "number that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_330", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not start with a letter", "source": "number that not starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_347", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not begin with abc", "source": "number that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_479", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number doesnt stop with a vowel", "source": "number that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_532", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with something other than 123", "source": "word that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_720", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that doesnt end with a lowercase letter", "source": "word that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_829", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that doesnt end with abc", "source": "number that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_871", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number excluding the digits 123", "source": "number that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1069", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that does not being with abc", "source": "word that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1145", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that does not end in a capital letter", "source": "word that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1153", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not end with a capital letter", "source": "word that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1159", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not start with  abc ", "source": "word that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1161", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with vowel", "source": "number that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1201", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that does not begin with a lowercase letter", "source": "word that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1220", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not end with the number 123", "source": "word that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1296", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not ends with  123 ", "source": "number that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1298", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which numbers dont end with capital letters", "source": "number that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1341", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number not ending with a capital letter", "source": "number that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1360", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "is there a numeral that does not begin with a small letter", "source": "number that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1384", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with vowel", "source": "word that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1463", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that does not end in a vowel", "source": "word that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1472", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that does not have 123 at the end of it", "source": "number that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1648", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not ends with lowercase letter", "source": "number that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1823", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers whose final character is not a vowel", "source": "number that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1832", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not begin with a capital letter", "source": "word that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1835", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not start with a capital letter", "source": "number that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1837", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that does not stop after a vowel", "source": "word that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2218", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not start with a letter", "source": "number that not starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2230", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not end with a capital letter", "source": "word that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2238", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not start with a vowel", "source": "number that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2268", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number does not start with   abc  ", "source": "number that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2378", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not start with a vowel", "source": "word that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2423", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not starts with vowel", "source": "word that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2431", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number not ending with a vowel", "source": "number that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2463", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with lowercase letter", "source": "word that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2497", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word not ending with a capital letter", "source": "word that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2565", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number ends with something other than abc", "source": "number that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2604", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with lowercase letter", "source": "number that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2608", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any number that does not end with a lowercase letter", "source": "number that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2642", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not ends with capital letter", "source": "number that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2702", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that is finished with a capital letter", "source": "word that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2734", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words do not begins with   123 ", "source": "word that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2881", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that does not start with a capital letter", "source": "number that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2886", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not begin with a vowel", "source": "word that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2914", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number starting with a consonant", "source": "number that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2966", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not end with a vowel", "source": "number that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3026", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with anything but 123", "source": "word that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3040", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that doesnt have 123 at the end", "source": "number that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3066", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not end with 123", "source": "word that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3099", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not have a vowel for the last character", "source": "word that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3100", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any number that doesnt begin with 123", "source": "number that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3127", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word does not ends with a capital letter", "source": "word that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3223", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that does not end in 123", "source": "number that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3340", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not starts with  123 ", "source": "word that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3393", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not begin with a vowel", "source": "number that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3432", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number does not end with a letter", "source": "number that not ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3463", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words whose first character is not a vowel", "source": "word that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3660", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not begin with a capital letter", "source": "word that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3704", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with  abc ", "source": "word that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3834", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not begin with 123", "source": "number that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3956", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that does not end with 123", "source": "word that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4188", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not end with a letter", "source": "number that not ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4225", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not start with a vowel", "source": "number that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4295", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not end with 123", "source": "word that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4337", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not start with 123", "source": "number that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4346", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not end with a capital letter", "source": "number that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4417", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with vowel", "source": "word that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4425", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with letter", "source": "number that not starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4471", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that does not begin with a vowel", "source": "word that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4600", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not begin with abc", "source": "word that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4629", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not begin with abc", "source": "number that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4757", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not starts with  abc ", "source": "word that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4781", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number begins wo small letter", "source": "number that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4839", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not end with a lowercase letter", "source": "number that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4843", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not begin with a lowercase letter", "source": "number that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4999", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not starts with lowercase letter", "source": "word that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5013", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a consenant", "source": "word that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5132", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that isnt ended with a capital letter", "source": "number that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5137", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not starts with capital letter", "source": "word that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5163", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that does not stop with abc", "source": "word that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5336", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number tthat does not end with abc", "source": "number that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5363", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not ends with lowercase letter", "source": "number that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5399", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which words dont start off abc", "source": "word that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5413", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number not using a lowercase letter", "source": "number that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5454", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with capital letter", "source": "word that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5809", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not end with a 123", "source": "number that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5855", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with  123 ", "source": "number that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5861", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that doesnt end with abc", "source": "word that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5862", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not start with abc", "source": "number that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5877", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with  123 ", "source": "word that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5897", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not start with a lowercase letter", "source": "word that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5921", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with  abc ", "source": "word that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6004", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number doesnt start with letter", "source": "number that not starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6041", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which words do not begin with 123", "source": "word that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6120", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word does not start with a lowercase letter", "source": "word that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6207", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is the word that does not start with a capital letter", "source": "word that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6247", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word does not end with a vowel", "source": "word that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6255", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not begin with 123", "source": "word that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6349", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not begin with a letter", "source": "number that not starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6371", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "nubmer that does not end with a letter", "source": "number that not ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6374", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not start with a capital letter", "source": "word that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_45", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending without a vowel", "source": "word that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_129", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which words does not have   abc  at its end", "source": "word that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_193", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that doesnt start with any letter", "source": "number that not starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_212", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not stop after a lowercase letter", "source": "word that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_363", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not end with abc", "source": "word that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_366", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with capital letter", "source": "number that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_397", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that dont stop with any letters", "source": "number that not ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_473", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with lowercase letter", "source": "number that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_482", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word does not end with abc", "source": "word that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_637", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with capital letter", "source": "number that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_644", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number does not end with a letter", "source": "number that not ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_662", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that does not stop after 123", "source": "word that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_754", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that doesnt start with some lowercase letter", "source": "number that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_985", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not have  a small letter at the beginning", "source": "word that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1064", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not conclude in the number sequence 123", "source": "number that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1283", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any word that doesnt start with abc", "source": "word that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1327", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number does not end with a capital letter", "source": "number that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1348", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not begin with a lowercase letter", "source": "word that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1353", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a capital letter number or character", "source": "word that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1388", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word not ending with lowercase letter", "source": "word that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1446", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that contains a character or digit", "source": "number that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_28", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word including either a character or a digit", "source": "word that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_274", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains lowercase letter or digit", "source": "number that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_281", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a character or a digit", "source": "word that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_308", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that includes lowercase letter or digit", "source": "number that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_488", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character or digit", "source": "number that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_748", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a letter or a digit", "source": "word that contains letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_905", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a letter or a digit", "source": "word that contains letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1001", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that uses at least one vowel or digit", "source": "number that contains vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1328", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses capital letters or digits", "source": "number that contains capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1336", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains lowercase letters or digits", "source": "word that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1409", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that must contain a vowel or any digit", "source": "word that contains vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1646", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that includes letter or digit", "source": "number that contains letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1697", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes at least one capitalized letter or digit", "source": "word that contains capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1730", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  abc  or a digit", "source": "number that contains `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1887", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that uses either a lowercase letter or a digit", "source": "number that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1929", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number includes digit or vowel", "source": "number that contains vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1943", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has abc or a digit", "source": "number that contains `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1951", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that have either a vowel or a digit", "source": "number that contains vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2034", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters or digits", "source": "word that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2141", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains a vowel or a digit", "source": "word that contains vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2252", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has either a number or a character", "source": "word that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2282", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number conatins a digit or a letter", "source": "number that contains letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2850", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that contain either a character or a digit", "source": "number that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2854", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses characters or digits", "source": "number that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2903", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  123  or digit", "source": "number that contains `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3136", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with either a lowercase letter or a digit", "source": "number that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3140", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number containing either a capital letter or a digit", "source": "number that contains capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3260", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers with 123 andor other digits", "source": "number that contains `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3288", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has both digits and abc within", "source": "word that contains `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3754", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter or digit", "source": "word that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3950", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a letter or a number", "source": "word that contains letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4018", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number contains characters or digits", "source": "number that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4104", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  123  or digit", "source": "number that contains `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4175", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers which include letters or digits", "source": "number that contains letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4259", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a lowercase letter or digit", "source": "word that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4374", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has either lowercase letters or digits", "source": "word that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4582", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes a vowel or a digit", "source": "word that contains vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4654", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with either a capital letter or some digit", "source": "number that contains capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4764", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  or digit", "source": "word that contains `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4772", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has a vowel or a digit", "source": "number that contains vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4902", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using abc or a digit", "source": "word that contains `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4929", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains capital letter or digit", "source": "number that contains capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5024", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that have vowels or digits", "source": "number that contains vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5129", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number has a digit or a letter", "source": "number that contains letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5403", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses character or digits", "source": "word that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5422", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter or digit", "source": "word that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5761", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that utilizes the digits 123 or any other digits", "source": "number that contains `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5817", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with abc or a digit in them", "source": "word that contains `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5901", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter that is capital or a digit", "source": "word that contains capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6006", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has a capital letter or a digit in it", "source": "word that contains capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6177", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing abc or a number", "source": "word that contains `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6273", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word containing any letter or digit", "source": "word that contains letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6356", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character or digit", "source": "number that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_62", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number using a letter or a digit", "source": "number that contains letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_140", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character or digit", "source": "word that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_233", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "this number has to utilize any digit or lowercase letter", "source": "number that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_234", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has a digit or capital letter", "source": "number that contains capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_390", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that have a lowercase letter or a digit", "source": "number that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_443", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel or digit", "source": "word that contains vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_522", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has capitals or digits", "source": "word that contains capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_758", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a vowel or a digit", "source": "word that contains vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_884", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with abc or any digit", "source": "number that contains `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_897", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses vowels or digits", "source": "word that contains vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1004", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number contains either abc or a digit", "source": "number that contains `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1089", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter or a digit", "source": "word that contains capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1138", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that utilize either 123 or a digit", "source": "number that contains `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1152", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a digit or letter", "source": "word that contains letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1288", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any word containing lowercase letters or digits", "source": "word that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1291", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  or digit", "source": "word that contains `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1317", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number has 123 or any general digit", "source": "number that contains `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1334", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number contains capital letters or digits", "source": "number that contains capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1420", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that uses abc or digits in it", "source": "word that contains `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1452", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character or digit", "source": "word that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1468", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  abc  or digit", "source": "number that contains `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1525", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that includes the word abc or the number 123", "source": "line that contains the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_450", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that have either 123 or abc anywhere in them", "source": "line that contains the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4027", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  or the number  123 ", "source": "line that contains the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5563", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line contains the word abc or the number 123", "source": "line that contains the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_6325", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that have abc or 123", "source": "line that contains the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_945", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line has numbers 123 followed by a letter", "source": "line that contains letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_215", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that include a lowercase letter after the number sequence 123", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_324", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line with a capital letter following the series 123", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_354", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains character after the number  123 ", "source": "line that contains character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_431", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line includes numerals 123 and vowel", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_530", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line with 123 followed by 123", "source": "line that contains `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_551", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what is the line containing a capital letter after the number 123", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_739", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what line has lowercase letters appearing after   123 ", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_774", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line containing the number 123 followed by a lowercase letter", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_984", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  after the number  123 ", "source": "line that contains `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_1509", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "which line has 123 in it after the number 123", "source": "line that contains `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_1531", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line with abc coming after 123", "source": "line that contains `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_1824", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains letter after the number  123 ", "source": "line that contains letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_1878", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that uses abc and then a digit", "source": "line that contains the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2385", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line containing the numbers 123 followed by a capital letter", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_2442", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains vowel after the number  123 ", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_2786", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses any characters after the number 123", "source": "line that contains character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_2932", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that includes 123 preceded by the number 123", "source": "line that contains `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_3122", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains the word abc before any digit", "source": "line that contains the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3552", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains letter after the number  123 ", "source": "line that contains letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_3605", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line includes 123 following number 123", "source": "line that contains `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_3676", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that includes the digit 123 before the vowel", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_3693", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line utilizing the sequence 123 followed by any letter", "source": "line that contains letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_3948", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "locate the line that incorporates abc following the number sequence 123", "source": "line that contains `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_4060", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses letters after the number 123", "source": "line that contains letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_4102", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains capital letter after the number  123 ", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_4186", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that contains  abc  before a digit", "source": "line that contains the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4187", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line where 123 is followed by a letter", "source": "line that contains letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_4253", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains lowercase letter after the number  123 ", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_4309", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "the line needs the character to appear after the number 123", "source": "line that contains character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_4397", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that has a special character after the number 123", "source": "line that contains character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_4586", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses lowercase letters after the number 123", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_4713", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what is a line that has a capital letter coming after the number 123", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_5252", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses abc before numbers", "source": "line that contains the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5276", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line containing the word abc followed by a number", "source": "line that contains the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5323", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses abc after 123", "source": "line that contains `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_5348", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line with the number 123 followed by a character", "source": "line that contains character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_5368", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  after the number  123 ", "source": "line that contains `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_5382", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains lowercase letter after the number  123 ", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_5414", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line with 123 followed by any character", "source": "line that contains character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_5478", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains  123  after the number  123 ", "source": "line that contains `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_5540", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  before digit", "source": "line that contains the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5670", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that contain a letter that follows the number 123", "source": "line that contains letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_5865", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  before digit", "source": "line that contains the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5917", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has 123 followed by a capital letter", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_5982", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that have a vowel directly after the number sequence 123", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_6088", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains the number 123 twice", "source": "line that contains `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_6216", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains vowel after the number  123 ", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_test_431", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that have a vowel after 123", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_test_1069", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that have lowercase letters after 123", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_test_1232", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains capital letter after the number  123 ", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_test_1472", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line including abc is preceded by 123 number", "source": "line that contains `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_test_1482", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses a vowel after 123", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_test_1579", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "word has two vowels in it", "source": "word that contains two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_16", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that contains two digit", "source": "number that contains two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_42", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses at most 2 digits", "source": "number that contains at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_64", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with at least two characters", "source": "number that contains at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_103", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses at most 2 letter", "source": "word that contains at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_126", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing two or more letters", "source": "word that contains at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_370", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has at least two letters in it", "source": "word that contains at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_627", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains at least two lowercase letter", "source": "word that contains at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_717", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that include no more than two characters", "source": "number that contains at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_738", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include two or more characters", "source": "word that contains at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_970", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains two letter", "source": "word that contains two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_995", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains at least two capital letters", "source": "word that contains at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1036", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "list all words containing two characters", "source": "word that contains two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1051", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using two capital letters or less", "source": "word that contains at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1079", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word has two characters in it", "source": "word that contains two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1096", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with at least two characters in it", "source": "word that contains at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1355", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "list all numbers containing at or less than two characters", "source": "number that contains at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1418", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words contain at least two lowercase letters", "source": "word that contains at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1428", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing two lowercase letters", "source": "word that contains two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1506", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses at most 2 capital letters", "source": "word that contains at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1583", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has two lowercase letters", "source": "word that contains two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1618", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains no more than two vowels", "source": "word that contains at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1707", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that uses two or more digits", "source": "number that contains at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1753", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is the alphanumeric that has two digits", "source": "number that contains two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1760", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains at least two lowercase letters", "source": "word that contains at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1790", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains at most two digit", "source": "number that contains at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2063", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains at least two character", "source": "word that contains at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2104", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains two character", "source": "word that contains two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2214", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains more than two vowels", "source": "word that contains at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2325", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses 2 vowels", "source": "word that contains two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2368", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number using one or two characters", "source": "number that contains at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2392", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that cas at most to characters", "source": "word that contains at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2546", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word with no more than two capital letters", "source": "word that contains at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2586", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes two lowercase letters", "source": "word that contains two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2607", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "you must use two or more capital letters for this word", "source": "word that contains at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2713", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a maximum of two capital letters", "source": "word that contains at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2722", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a maximum of two small letters", "source": "word that contains at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2778", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains at least two letter", "source": "word that contains at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2918", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "do not use more than two characters in this word", "source": "word that contains at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2942", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains at most two lowercase letter", "source": "word that contains at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2960", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has only two letters", "source": "word that contains two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2962", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains at most two character", "source": "number that contains at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3050", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word has two characters maximum", "source": "word that contains at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3116", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains at least two character", "source": "word that contains at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3173", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses at least two letters", "source": "word that contains at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3197", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has two characters", "source": "number that contains two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3211", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number containing two digits", "source": "number that contains two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3229", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "list all numbers contain at least two characters", "source": "number that contains at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3253", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include two capital letters", "source": "word that contains two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3266", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing mo more than two vowels", "source": "word that contains at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3277", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that includes two characters", "source": "number that contains two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3372", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has at least two vowels within it", "source": "word that contains at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3417", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains at most two letter", "source": "word that contains at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3501", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with at least two lowercase letters in it", "source": "word that contains at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3537", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include no more than two letters", "source": "word that contains at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3609", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses at least 2 characters", "source": "word that contains at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3662", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with two lowercase letters in it", "source": "word that contains two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3735", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains two character", "source": "number that contains two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3740", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words are two characters or longer", "source": "word that contains at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3766", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that is 2 letters long", "source": "word that contains at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3880", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes no fewer than two vowels", "source": "word that contains at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4000", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any word that contains two capital letters", "source": "word that contains two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4062", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has at most two letters in it", "source": "word that contains at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4350", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains two vowel", "source": "word that contains two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4391", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains two vowel", "source": "word that contains two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4435", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains two vowels at the most", "source": "word that contains at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4565", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using two characters", "source": "word that contains two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4644", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a minimum of two letters", "source": "word that contains at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4658", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have two or more vowels", "source": "word that contains at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4981", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains no more than two characters", "source": "word that contains at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5114", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that uses two vowels or less", "source": "word that contains at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5209", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing two or more characters", "source": "word that contains at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5254", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using two capital letters", "source": "word that contains two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5290", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains two digit", "source": "number that contains two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5309", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have exactly two capital letters", "source": "word that contains two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5381", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word includes minimum of two small letters", "source": "word that contains at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5388", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that contain no more than two characters", "source": "word that contains at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5419", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains two character", "source": "word that contains two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5510", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number that contains at most two digit", "source": "number that contains at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5541", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have two letters", "source": "word that contains two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5561", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words have two or less vowels", "source": "word that contains at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5663", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains two lowercase letter", "source": "word that contains two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5699", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number containing at least 2 digits", "source": "number that contains at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5740", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has two lowercase letters at most", "source": "word that contains at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5818", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has at leas two capital letters", "source": "word that contains at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5822", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that is two digits or more", "source": "number that contains at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5834", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that includes no fewer than two characters", "source": "number that contains at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5907", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses at least 2 character", "source": "number that contains at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5924", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes at least two vowels", "source": "word that contains at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5941", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing two letters at the maximum", "source": "word that contains at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5962", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word with two capital letters", "source": "word that contains two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6014", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word has two characters", "source": "word that contains two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6108", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number using two digits or less", "source": "number that contains at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6141", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number has at least two characters in it", "source": "number that contains at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6158", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that are at least two letters", "source": "word that contains two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6176", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains at least two capital letter", "source": "word that contains at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6221", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing two letters", "source": "word that contains two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6230", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains at most two vowel", "source": "word that contains at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6274", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that use at least two capital ltters", "source": "word that contains at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6323", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses 2 digits", "source": "number that contains two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_40", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains at most two capital letter", "source": "word that contains at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_110", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word has two uppercase letters", "source": "word that contains at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_test_135", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with two character", "source": "number that contains two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_144", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains at least two letter", "source": "word that contains at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_test_168", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with absolutely no more than two lowercase letters in them", "source": "word that contains at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_178", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with any two digits", "source": "number that contains two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_264", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that contains at least two digits", "source": "number that contains at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_test_359", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains at least two digit", "source": "number that contains at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_test_407", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses at most 2 character", "source": "number that contains at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_446", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses two lowercase letters", "source": "word that contains two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_447", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains at most two letter", "source": "word that contains at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_487", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "list all words containing two vowels", "source": "word that contains two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_592", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains at most two character", "source": "word that contains at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_639", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains at least two character", "source": "number that contains at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_test_663", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the number include famous twe charector", "source": "number that contains at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_699", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a digit that is 2 digits long", "source": "number that contains at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_743", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using one or two lowercase letters", "source": "word that contains at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_756", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number using two characters", "source": "number that contains two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_789", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that use at least two letters", "source": "word that contains at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_test_839", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses 2 characters", "source": "number that contains two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_962", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using two or more lowercase letters", "source": "word that contains at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1149", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include two letters", "source": "word that contains two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1173", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number using two digits or more", "source": "number that contains at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1184", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number no more than two digits", "source": "number that contains at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1262", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes two characters", "source": "word that contains two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1313", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that contains at most two digits", "source": "number that contains at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1320", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains two digit", "source": "number that contains two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1465", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word with no more than two upper case letters", "source": "word that contains at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1520", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with no more than two lowercase letters", "source": "word that contains at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1555", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any word that contains two vowels", "source": "word that contains two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1568", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that has a character in the beginning and includes the word abc", "source": "line that contains the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_69", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with abc in it that ends with any character", "source": "line that contains the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_88", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that starts with  123 ", "source": "line that contains the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_124", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that  has abc as its beginning and also includes the word abc", "source": "line that contains the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_158", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that ends with lowercase letter", "source": "line that contains the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_171", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line has 123 at the start then abc somewhere else", "source": "line that contains the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_201", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that starts with capital letter", "source": "line that contains the word `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_374", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line includes abc word and concludes wcharacter", "source": "line that contains the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_397", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes the word abc and terminates with a capital letter", "source": "line that contains the word `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_466", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has the word abc and begins with abc", "source": "line that contains the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_471", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has the abc and begins with a lowercase letter", "source": "line that contains the word `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_492", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc at the end", "source": "line that contains the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_906", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the smaller word abc and begin with abc", "source": "line that contains the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_958", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has the word abc in it and also ends with a vowel", "source": "line that contains the word `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_987", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses the word abc and stops after a letter", "source": "line that contains the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1164", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel in the beginning and includes the word abc", "source": "line that contains the word `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1165", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses the word abc but stops after a lowercase letter", "source": "line that contains the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1186", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what  line that contains the word  abc  and that starts with vowel", "source": "line that contains the word `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1309", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that ends with letter", "source": "line that contains the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1483", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines start with abc that also have abc elsewhere", "source": "line that contains the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1493", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a capital letter and contains the word abc", "source": "line that contains the word `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1500", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins with a lowercase letter and has the sequence abc in it", "source": "line that contains the word `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1585", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a character and contains the word abc", "source": "line that contains the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1612", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains  abc  and starts with  abc ", "source": "line that contains the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1784", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word abc and ends with any character", "source": "line that contains the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_1836", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "list all lines ending or containing   abc ", "source": "line that contains the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1931", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc but begins with 123", "source": "line that contains the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1985", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines where the word abc appears and ends with 123", "source": "line that contains the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2109", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a letter and using abc", "source": "line that contains the word `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2195", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that ends with  123 ", "source": "line that contains the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2207", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts off with a letter and has abc somewhere in it", "source": "line that contains the word `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2250", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have abc and end with a character", "source": "line that contains the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2328", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc contained in it and also ends with some letter", "source": "line that contains the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2577", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with the word abc and a lowercase letter to begin with", "source": "line that contains the word `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2757", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have in them the smaller word abc and conclude in a vowel", "source": "line that contains the word `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2852", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc at least twice once at the end", "source": "line that contains the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2888", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes the word abc and that concludes with a character", "source": "line that contains the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2907", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that starts with vowel", "source": "line that contains the word `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2934", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines beginning with a letter and also including the word abc", "source": "line that contains the word `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3042", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line ending with a lowercase letter has the short word abc in it", "source": "line that contains the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3156", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that ends with character", "source": "line that contains the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_3307", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes the word abc and terminates with abc", "source": "line that contains the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_3335", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing the smaller word abc and ending on a lowercase letter", "source": "line that contains the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3466", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using the word abc and ending with 123", "source": "line that contains the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_3719", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have abc and end with a vowel", "source": "line that contains the word `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3760", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc in it and ends with an uppercase letter", "source": "line that contains the word `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3886", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that ends with capital letter", "source": "line that contains the word `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4137", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that starts with lowercase letter", "source": "line that contains the word `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4140", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that starts with lowercase letter", "source": "line that contains the word `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4245", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with the numbers 123 and contains the word abc", "source": "line that contains the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4296", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains the word abc and begins with a letter", "source": "line that contains the word `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4442", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and utilize the word abc", "source": "line that contains the word `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4759", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the smaller word abc annd that is terminated with a capital letter", "source": "line that contains the word `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4822", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have the smaller word abc and start with a vowel", "source": "line that contains the word `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4875", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc that begins with a character", "source": "line that contains the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4958", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes the word abc and begins with a vowel", "source": "line that contains the word `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5169", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has the word abc in it and also ends in a letter", "source": "line that contains the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5204", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes the word abc and that concludes with a lowercase letter", "source": "line that contains the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_5892", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that ends with  abc ", "source": "line that contains the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5930", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that ends with capital letter", "source": "line that contains the word `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5972", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have abc and end with abc", "source": "line that contains the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5997", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line commences wvowel and includes word abc", "source": "line that contains the word `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6125", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that ends with letter", "source": "line that contains the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_6278", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has the word sbc and ends with a letter", "source": "line that contains the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_36", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes the word abc and has an uppercase letter at the end", "source": "line that contains the word `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_63", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line includes abc word and concludes wvowel", "source": "line that contains the word `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_179", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes the word abc and that ends with a vowel", "source": "line that contains the word `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_228", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that ends with vowel", "source": "line that contains the word `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_243", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line contains the word abc that begins with a character", "source": "line that contains the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_252", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that starts with character", "source": "line that contains the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_255", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a word that includes abc and begins with a capital letter", "source": "line that contains the word `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_300", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing the smaller word abc and ending with the number 123", "source": "line that contains the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_306", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses the word abc and stops after a capital letter", "source": "line that contains the word `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_365", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "start a line with a letter and contains the word abc", "source": "line that contains the word `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_708", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains  abc  and starts with  123 ", "source": "line that contains the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_775", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a character and containing the smaller word abc", "source": "line that contains the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_951", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc also starts wuppercase letter", "source": "line that contains the word `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_974", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what in has the word abc in it and also begins with a capital letter", "source": "line that contains the word `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1168", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with abc and end with 123", "source": "line that contains the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_1241", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the smaller word abc and finish with a lowercase letter", "source": "line that contains the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1341", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with an uppercase letter that also has abc in it", "source": "line that contains the word `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1403", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has the word abc and begins with 123", "source": "line that contains the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1534", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "something with vowels before digits", "source": "vowel before digit", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_48", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what word has 123 coming after a digit", "source": "`` 123 '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string 123)))", "qid": "regex_train_407", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "letter after digit", "source": "letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z])))", "qid": "regex_train_619", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what  abc  before digit", "source": "`` abc '' before digit", "target": "(call .concat (string abc) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_718", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a character after a digit", "source": "character after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string .)))", "qid": "regex_train_1005", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "number after uppercase letter", "source": "capital letter before digit", "target": "(call .concat (string [A-Z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_1150", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "capital letter before digit", "source": "capital letter before digit", "target": "(call .concat (string [A-Z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_1157", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": " abc  before digit", "source": "`` abc '' before digit", "target": "(call .concat (string abc) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_1247", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "vowel after digit", "source": "vowel after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou])))", "qid": "regex_train_1250", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "vowel before digit", "source": "vowel before digit", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_1258", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "character after digit", "source": "character after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string .)))", "qid": "regex_train_1367", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a letter precedes a digit", "source": "letter before digit", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_1598", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": " 123  before digit", "source": "`` 123 '' before digit", "target": "(call .concat (string 123) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_1876", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "character precedes digit", "source": "character before digit", "target": "(call .concat (string .) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_2086", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "capital letter before digit", "source": "capital letter before digit", "target": "(call .concat (string [A-Z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_2103", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "the number 123 followed by a digit", "source": "`` 123 '' before digit", "target": "(call .concat (string 123) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_2205", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a vowel before a digit", "source": "vowel before digit", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_2358", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "capital letter after digit", "source": "capital letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [A-Z])))", "qid": "regex_train_2456", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "find the line that incorporates a vowel following a numeral", "source": "vowel after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou])))", "qid": "regex_train_2872", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a vowel preceding a digit", "source": "vowel before digit", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_2995", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "contains a vowel following a digit", "source": "vowel after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou])))", "qid": "regex_train_3210", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "lowercase letters come after a digit", "source": "lowercase letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [a-z])))", "qid": "regex_train_3289", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a lowercase letter after a number", "source": "lowercase letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [a-z])))", "qid": "regex_train_3377", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "something with characters after digits", "source": "character after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string .)))", "qid": "regex_train_3447", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "character before digit", "source": "character before digit", "target": "(call .concat (string .) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_3506", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "capital letter before a digit", "source": "capital letter before digit", "target": "(call .concat (string [A-Z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_3604", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a lowercase letter after a digit", "source": "lowercase letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [a-z])))", "qid": "regex_train_3659", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "character after digit", "source": "character after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string .)))", "qid": "regex_train_3894", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a digit followed by a character", "source": "character before digit", "target": "(call .concat (string .) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_3966", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "there is an abc following a digit", "source": "`` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string abc)))", "qid": "regex_train_4028", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": " 123  after digit", "source": "`` 123 '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string 123)))", "qid": "regex_train_4029", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "letters comes before a digit", "source": "letter before digit", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_4056", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "digit after lowercase letter", "source": "lowercase letter before digit", "target": "(call .concat (string [a-z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_4182", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a digit preceded by any lowercase letter", "source": "lowercase letter before digit", "target": "(call .concat (string [a-z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_4184", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a digit followed by abc", "source": "`` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string abc)))", "qid": "regex_train_4360", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "has 123 come in front of a digit", "source": "`` 123 '' before digit", "target": "(call .concat (string 123) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_4413", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a digit preceded by a capital", "source": "capital letter before digit", "target": "(call .concat (string [A-Z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_4420", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "lowercase letter before digit", "source": "lowercase letter before digit", "target": "(call .concat (string [a-z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_4422", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "character before digit", "source": "character before digit", "target": "(call .concat (string .) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_4566", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a letter following a number", "source": "letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z])))", "qid": "regex_train_4646", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "digit followed by 123", "source": "`` 123 '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string 123)))", "qid": "regex_train_4702", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "list all lowercase letters appearing before a digit", "source": "lowercase letter before digit", "target": "(call .concat (string [a-z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_4800", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a capital letter that follows a digit", "source": "capital letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [A-Z])))", "qid": "regex_train_4835", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "number after character", "source": "character before digit", "target": "(call .concat (string .) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_4917", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "number or vowel", "source": "vowel after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou])))", "qid": "regex_train_5046", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "something with a capital letter after digits", "source": "capital letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [A-Z])))", "qid": "regex_train_5264", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "lowercase letter comes before a digit", "source": "lowercase letter before digit", "target": "(call .concat (string [a-z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_5322", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "number that follows 123", "source": "`` 123 '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string 123)))", "qid": "regex_train_5469", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "letter and then a number", "source": "letter before digit", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_5614", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a character after a digit", "source": "character after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string .)))", "qid": "regex_train_5706", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "lowercase letter after digit", "source": "lowercase letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [a-z])))", "qid": "regex_train_5723", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "capital letter following a digit", "source": "capital letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [A-Z])))", "qid": "regex_train_5769", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "number ahead of a letter", "source": "letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z])))", "qid": "regex_train_5829", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "vowel before digit", "source": "vowel before digit", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_5843", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "characters that come after a digit", "source": "character after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string .)))", "qid": "regex_train_5866", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "letter that comes in front of a digit", "source": "letter before digit", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_5881", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "letter before digit", "source": "letter before digit", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_6007", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "lowercase letter after digit", "source": "lowercase letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [a-z])))", "qid": "regex_train_6016", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "letter after digit", "source": "letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z])))", "qid": "regex_train_6101", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "abc  after digit", "source": "`` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string abc)))", "qid": "regex_test_9", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "letter before digit", "source": "letter before digit", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_test_115", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a vowel preceding a number", "source": "vowel before digit", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9])))", "qid": "regex_test_225", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "digits after characters", "source": "character before digit", "target": "(call .concat (string .) (call .concat (string .*) (string [0-9])))", "qid": "regex_test_429", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "vowel after digit", "source": "vowel after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou])))", "qid": "regex_test_520", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "abc comes after a digit", "source": "`` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string abc)))", "qid": "regex_test_628", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "list all characters showing after a digit", "source": "character after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string .)))", "qid": "regex_test_778", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "any digit with abc preceding it", "source": "`` abc '' before digit", "target": "(call .concat (string abc) (call .concat (string .*) (string [0-9])))", "qid": "regex_test_916", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "lines that include 123 before a number", "source": "`` 123 '' before digit", "target": "(call .concat (string 123) (call .concat (string .*) (string [0-9])))", "qid": "regex_test_926", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "line using a digit followed by 123", "source": "`` 123 '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string 123)))", "qid": "regex_test_1068", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "name a word containing abc after a digit", "source": "`` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string abc)))", "qid": "regex_test_1081", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "digit preceded by abc", "source": "`` abc '' before digit", "target": "(call .concat (string abc) (call .concat (string .*) (string [0-9])))", "qid": "regex_test_1157", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what are times when a digit follows abc", "source": "`` abc '' before digit", "target": "(call .concat (string abc) (call .concat (string .*) (string [0-9])))", "qid": "regex_test_1214", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "digit followed by a letter", "source": "letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z])))", "qid": "regex_test_1255", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "lowercase letter followed by a digit", "source": "lowercase letter before digit", "target": "(call .concat (string [a-z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_test_1366", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a number with 123 before another digit", "source": "`` 123 '' before digit", "target": "(call .concat (string 123) (call .concat (string .*) (string [0-9])))", "qid": "regex_test_1462", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a digit preceded by the word abc", "source": "`` abc '' before digit", "target": "(call .concat (string abc) (call .concat (string .*) (string [0-9])))", "qid": "regex_test_1506", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
