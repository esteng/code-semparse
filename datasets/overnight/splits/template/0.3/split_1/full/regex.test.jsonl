{"paraphrased": "numbers that begins with a capital letter or digit", "source": "number that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1303", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter or digit", "source": "word that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1252", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with either a lowercase letter or a digit", "source": "number that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4402", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with 123 or a digit", "source": "number that starts with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1624", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with one or more digits", "source": "number that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1230", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has abc or digit at beginning", "source": "number that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6322", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character or digit", "source": "word that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2162", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with 123 or a digit", "source": "number that starts with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_356", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a capital letter or digit", "source": "word that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1680", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a character or digit", "source": "word that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_834", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that does not finish with the word abc", "source": "line that not ends with the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\"))", "qid": "regex_test_583", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not end with the word abc", "source": "line that not ends with the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\"))", "qid": "regex_test_560", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\"))"}
{"paraphrased": "line that does not end with the word abc", "source": "line that not ends with the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\"))", "qid": "regex_test_1436", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not end in the smaller word abc", "source": "line that not ends with the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\"))", "qid": "regex_train_5519", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not terminate with the word abc", "source": "line that not ends with the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\"))", "qid": "regex_train_981", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\"))"}
{"paraphrased": "a line that begins with the number 123 followed by a letter", "source": "line that starts with letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_3291", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that start with 123 then follow with a vowel", "source": "line that starts with vowel after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_test_1243", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has a vowel in the beginning after the digit 123", "source": "line that starts with vowel after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_5802", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with a character after the number 123", "source": "line that starts with character after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_test_504", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that begins with 123 followed by a capital letter", "source": "line that starts with capital letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_4", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with vowel after the number  123 ", "source": "line that starts with vowel after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_3895", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with 123 followed by a lowercase letter", "source": "line that starts with lowercase letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_5261", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what line begins with the number 123 followed by 123", "source": "line that starts with `` 123 '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_1356", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with a capital after 123", "source": "line that starts with capital letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_5337", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with  abc  after the number  123 ", "source": "line that starts with `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_test_1396", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a lowercase letter after a digit", "source": "lowercase letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [a-z])))", "qid": "regex_train_3659", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "characters that come after a digit", "source": "character after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string .)))", "qid": "regex_train_5866", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": " abc  before digit", "source": "`` abc '' before digit", "target": "(call .concat (string abc) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_1247", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a vowel preceding a number", "source": "vowel before digit", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9])))", "qid": "regex_test_225", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "lowercase letter comes before a digit", "source": "lowercase letter before digit", "target": "(call .concat (string [a-z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_5322", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "digit preceded by abc", "source": "`` abc '' before digit", "target": "(call .concat (string abc) (call .concat (string .*) (string [0-9])))", "qid": "regex_test_1157", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "capital letter before a digit", "source": "capital letter before digit", "target": "(call .concat (string [A-Z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_3604", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "abc comes after a digit", "source": "`` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string abc)))", "qid": "regex_test_628", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "number ahead of a letter", "source": "letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z])))", "qid": "regex_train_5829", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "digits after characters", "source": "character before digit", "target": "(call .concat (string .) (call .concat (string .*) (string [0-9])))", "qid": "regex_test_429", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "number with abc or any digit at the end", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3714", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with either abc or digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4014", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with the word  abc  or digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1351", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that terminate with the smaller word abc or a digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_842", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends with the word abc or any digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3111", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that concludes with the word abc or a digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1006", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a line that does not begin with the word abc", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_5333", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not begin with abc", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_154", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that isnt begun with abc", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_1026", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not starts with the word  abc ", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_1779", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not have abc as its beginning", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_test_1485", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not start with the phase abc", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_3724", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line starting with and containing the word abc", "source": "line that contains `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1750", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel and begins with abc", "source": "line that contains vowel and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_408", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the word abc and where 123 appears", "source": "line that contains `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3733", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with the word  abc ", "source": "line that contains character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1167", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line starting with abc", "source": "line that contains `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1722", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have in them a lowercase letter and begin with the phase abc", "source": "line that contains lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_1402", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has the word abc in the beginning that also utilizes any letter", "source": "line that contains letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_559", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and has the word abc in the beginning", "source": "line that contains capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5364", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with abc has a capital letter in it", "source": "line that contains capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_519", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the number sequence 123 and begin with the letter sequence abc", "source": "line that contains `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3875", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has either letters or the numeric sequence 123", "source": "line that contains letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4415", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that utilizes either a vowel or the number 123", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4807", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line using either a character of 123", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1946", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  or the number  123 ", "source": "line that contains `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_3482", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that includes a capital letter or the number 123", "source": "line that contains capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5143", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a vowel or the number 123 on a single line", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4810", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that includes 123 or the number 123", "source": "line that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1492", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains  123  or the number  123 ", "source": "line that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1563", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that contains  abc  or  123 ", "source": "line that contains `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_830", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains vowel or the number  123 ", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_2224", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that begin with either a vowel or digit", "source": "line that starts with vowel or digit", "target": "(call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_982", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what is a line which begins with either a vowel or with a digit", "source": "line that starts with vowel or digit", "target": "(call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1587", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with character or digit", "source": "line that starts with character or digit", "target": "(call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_2682", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line beginning with a character or a digit", "source": "line that starts with character or digit", "target": "(call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3349", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that begins with a lowercase letter or a digit", "source": "line that starts with lowercase letter or digit", "target": "(call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_6248", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that begin with either 123 or a digit", "source": "line that starts with `` 123 '' or digit", "target": "(call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3867", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that begins with either a capital letter or a digit", "source": "line that starts with capital letter or digit", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_822", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line begins with a capital letter or a digit", "source": "line that starts with capital letter or digit", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_22", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that begins with a letter or digit", "source": "line that starts with letter or digit", "target": "(call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1253", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line commencing with a vowel or a digit", "source": "line that starts with vowel or digit", "target": "(call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_764", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that ends with lowercase letter before the number  123 ", "source": "line that ends with lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_3323", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "a line that ends with  abc  before  123 ", "source": "line that ends with `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_4088", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that stops after abc if abc is written before 123", "source": "line that ends with `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_3756", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "which line ends with a capital letter that comes before the number 123", "source": "line that ends with capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_4226", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that end with  abc after a digit", "source": "line that ends with the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_2482", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line ending in a character before 123", "source": "line that ends with character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_3119", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that conclude with the phase abc after a digit", "source": "line that ends with the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_1649", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "which line ends in 123 coming before the number 123", "source": "line that ends with `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_test_456", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line concludes wcharacter then numerals 123", "source": "line that ends with character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5288", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line ending in abc before 123", "source": "line that ends with `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_2549", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that contains lowercase letter after the number  123 ", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_5414", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line where 123 is followed by a letter", "source": "line that contains letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_4253", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that include a lowercase letter after the number sequence 123", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_324", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line containing the numbers 123 followed by a capital letter", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_2442", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains capital letter after the number  123 ", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_test_1472", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains capital letter after the number  123 ", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_4186", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  after the number  123 ", "source": "line that contains `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_1509", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line with a capital letter following the series 123", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_354", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "which line has 123 in it after the number 123", "source": "line that contains `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_1531", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains lowercase letter after the number  123 ", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_4309", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "words that ends with a vowel and begins with a letter", "source": "word that ends with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_289", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to amend", "source": "word that ends with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4922", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with capital letter", "source": "word that starts with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_90", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with letter", "source": "word that ends with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4087", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a letter that is a vowel", "source": "word that ends with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5275", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a character and ends with   abc ", "source": "word that ends with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1503", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and end with a letter", "source": "word that starts with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2151", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins and stops with a vowel", "source": "word that starts with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6081", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a character and terminates with a vowel", "source": "word that starts with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1122", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number staring and ending with 123", "source": "number that ends with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_214", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a line that ends with the word abc and also has the word abc in it", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5694", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with the word abc and has the word abc", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4827", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line stops with abc after having abc earlier in the word", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3805", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains the word  abc ", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4552", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with abc and uses abc", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3502", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that terminate with the letter sequence abc and include abc", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_1109", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with two letters", "source": "line that contains two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_1201", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has at least two words", "source": "line that contains at least two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_4427", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most two character", "source": "line that contains at most two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_5905", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two number", "source": "line that contains at least two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_907", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that contain two or more capital letters", "source": "line that contains at least two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_4201", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes a max of two characters", "source": "line that contains at most two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1452", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two character", "source": "line that contains at least two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_2782", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that contains at least two lowercase letters", "source": "line that contains at least two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_755", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with no more than two lower case letters", "source": "line that contains at most two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4272", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a two character or longer line", "source": "line that contains at least two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1074", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lind ending with lowercase letter or number 123", "source": "line that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_1593", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "lines that stops with 123", "source": "line that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_4068", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with  123  or the number  123 ", "source": "line that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_1246", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "a line with the sequence 123 or a character at its end", "source": "line that ends with character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_2521", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line ending with either a vowel or 123", "source": "line that ends with vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_4792", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with lowercase letter or the number  123 ", "source": "line that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_790", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with the number 123 or a character", "source": "line that ends with character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_3639", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "a line that ends with either a capital letter or the number 123", "source": "line that ends with capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_1988", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that finishes with 123 or 123", "source": "line that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_65", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "what  line that ends with character or the number  123 ", "source": "line that ends with character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_1329", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with the word  abc  and that starts with the word  abc ", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2976", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with the word  abc ", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1245", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends with the word abc and also begins with the word abc", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2428", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with abc and has abc repeated at the very end", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_534", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines beginning and ending with abc", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2097", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends and starts with abc", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_1248", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that ends with the word  abc ", "source": "line that starts with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4580", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin and end with the word abc", "source": "line that starts with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5482", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts and ends with abc", "source": "line that starts with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5750", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line starting off with abc and finishing with 123", "source": "line that starts with the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_3433", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc ending with any letter", "source": "line that starts with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_1264", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with   abc  and ends with a letter", "source": "line that starts with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5361", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start and end with abc", "source": "line that starts with the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_1321", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with the smaller word abc and ending with a lowercase letter", "source": "line that starts with the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2736", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that starts with character", "source": "line that starts with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6353", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts and ends with the word  abc ", "source": "line that starts with the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_903", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with the word abc and ending with a vowel", "source": "line that starts with the word `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4777", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that starts with character", "source": "line that starts with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4161", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc and a character in the beginning", "source": "line that starts with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1189", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "word beginning with abc", "source": "word that starts with character and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_228", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a vowel and that includes a capital letter", "source": "word that starts with vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2880", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that contains character", "source": "word that starts with letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5306", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that contains character", "source": "word that starts with vowel and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1119", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends with a capital letter and also has a lowercase letter in it", "source": "word that ends with capital letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3569", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that contains  abc ", "source": "word that starts with capital letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1263", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with a lowercase letter and contain a character", "source": "word that starts with lowercase letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2533", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that contains lowercase letter", "source": "word that ends with lowercase letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_255", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a capital letter a has a capital letter", "source": "word that starts with capital letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1351", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "use characters in the word and begin the word with a lowercase letter", "source": "word that starts with lowercase letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1797", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that contains the word  abc  or the number  123 ", "source": "line that contains the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5563", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that have either 123 or abc anywhere in them", "source": "line that contains the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4027", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line contains the word abc or the number 123", "source": "line that contains the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_6325", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that have abc or 123", "source": "line that contains the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_945", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that includes the word abc or the number 123", "source": "line that contains the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_450", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "number that contains character after digit", "source": "number that contains character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3861", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has a character followed by a digit", "source": "number that contains character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1153", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "whats a number that has a character before a digit", "source": "number that contains character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1264", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses characters after digits", "source": "number that contains character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4811", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with digits followed by characters", "source": "number that contains character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_450", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that uses 123 after any digits", "source": "number that contains `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4627", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses 123 before digits", "source": "number that contains `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5942", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is the number containing 123 before a digit", "source": "number that contains `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3426", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the number must use the characters 123 after a digit", "source": "number that contains `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_129", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that have a character behind a digit", "source": "number that contains character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_526", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that has a capital letter and finishes with the word abc", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_672", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with the word  abc ", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_854", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines with capital letters and end with abc", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1846", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has 123 in it and also ends in the word abc", "source": "line that contains `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1938", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters and stops after abc", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1150", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "which line has abc in it and also ends with the word abc", "source": "line that contains `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_416", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line with a capital letter ending with the smaller word abc", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2383", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with the word  abc ", "source": "line that contains vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3387", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a letter and ends with the smaller word abc", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3796", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a capital letter and terminates with the word abc", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_82", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "the number 123 or the word abc", "source": "the word `` abc '' or the number `` 123 ''", "target": "(call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_6037", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "either the word abc or th number 123", "source": "the word `` abc '' or the number `` 123 ''", "target": "(call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_805", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "a line that terminates with a lowercase letter as well as the word abc", "source": "line that ends with lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2832", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line begin with any letter but ends with sequence abc", "source": "line that starts with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1242", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with vowels and stops with abc", "source": "line that starts with vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_767", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with any character and ends with the word abc", "source": "line that starts with character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2364", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a letter and the word abc", "source": "line that ends with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1991", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that ends with the word  abc ", "source": "line that starts with capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5115", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that ends with the word  abc ", "source": "line that starts with vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_466", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what lines start with a vowel and end with the word abc", "source": "line that starts with vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_6222", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter and finish with the word abc", "source": "line that starts with capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4287", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that ends with the word  abc ", "source": "line that starts with vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1174", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "either a capital letter or a digit", "source": "capital letter or digit", "target": "(call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_test_410", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "lowercase letter or digit", "source": "lowercase letter or digit", "target": "(call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_test_241", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "letter or number", "source": "letter or digit", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_2060", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "either a character or a digit", "source": "character or digit", "target": "(call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_3921", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "a letter or perhaps a digit", "source": "letter or digit", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_1060", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "either 123 or a digit", "source": "`` 123 '' or digit", "target": "(call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_5151", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "selection of digit or vowel", "source": "vowel or digit", "target": "(call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_1584", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "what word contains either 123 or digit", "source": "`` 123 '' or digit", "target": "(call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_2567", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "123 or any other number", "source": "`` 123 '' or digit", "target": "(call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_6142", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "uppercase letter or number", "source": "capital letter or digit", "target": "(call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_4578", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "word using either abc or digit", "source": "the word `` abc '' or digit", "target": "(call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_3507", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
