{"paraphrased": "state with a capital city", "source": "state that city that is a capital is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city))))", "qid": "geo880_train_2923", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states have major rivers going through them", "source": "state that river that is major traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river))))", "qid": "geo880_test_3", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which states contain capital cities", "source": "state that city that is a capital is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city))))", "qid": "geo880_train_1633", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state contains a large lake", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_train_2109", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state contains a major lake", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_test_574", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states have a major city", "source": "state that city that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_train_1726", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which states contain major rivers", "source": "state that river that is major traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river))))", "qid": "geo880_train_2178", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which states contain major lakes", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_test_194", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state has a major lake", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_train_875", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state contains a major lake", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_train_172", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states share a border with california and have a place called sacramento", "source": "state that borders california and that sacramento is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2087", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have a capital of sacramento and the colorado river going through them", "source": "state whose capital is sacramento and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_2418", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains the capital sacramento and the colorado river", "source": "state whose capital is sacramento and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_2258", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have a capital of sacramento and mount whitney", "source": "state whose capital is sacramento and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_train_2521", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has a border with california and is passed by colorado river", "source": "state that borders california and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_1093", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which bordering state of california has lake tahoe in it", "source": "state that borders california and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_1753", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states capital is sacramento and contains lake tahoe", "source": "state whose capital is sacramento and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_580", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states capital is sacramento and contains mtwhitney", "source": "state whose capital is sacramento and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_train_1722", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is the capital of california", "source": "city that is contained by california and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_1493", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california and has mount whitney", "source": "state that borders california and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_train_2715", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a major city is the capital of california", "source": "city that is major and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_test_590", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what major city is the capital of california", "source": "city that is major and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_1345", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which major city is the capital of california", "source": "city that is major and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_1411", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is the capital city of california", "source": "city that is a capital and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_2919", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which major city is the capital of california", "source": "city that is major and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_2628", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is the capital of california", "source": "city that is a capital and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_1486", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what major city is the capital of california", "source": "city that is major and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_1420", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is the capital of two or more states", "source": "city that is capital of at least two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1032", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "states that have at least two places", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_112", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has no more than two cities", "source": "state that at most two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_test_427", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have at least two state borders", "source": "state that at least two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2941", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "name a state that borders at least two other states", "source": "state that at least two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_637", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has only one lake", "source": "state that less than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1357", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains at least two places", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_501", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state borders at most two other states", "source": "state that at most two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_127", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have two or more rivers flowing through them", "source": "state that at least two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1378", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have fewer than two states bordering them", "source": "state that less than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_524", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the capital of the state containing lake tahoe", "source": "city that is capital of state that lake tahoe is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe)))", "qid": "geo880_test_150", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what are the capital cities of states that have lake tahoe within them", "source": "city that is capital of state that lake tahoe is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe)))", "qid": "geo880_train_176", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which city is a capital city where lake tahoe is found", "source": "city that is capital of state that lake tahoe is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe)))", "qid": "geo880_train_2051", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what is the capital of the state where mount whitney is found", "source": "city that is capital of state that mount whitney is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney)))", "qid": "geo880_test_245", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "the capital city of a state that borders california", "source": "city that is capital of state that california borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california)))", "qid": "geo880_train_2880", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what city is the capital of the state where lake tahoe is found", "source": "city that is capital of state that lake tahoe is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe)))", "qid": "geo880_train_1543", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state is next to mount whitneys state", "source": "state that state that mount whitney is contained by borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney)))", "qid": "geo880_test_216", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state is next to a state that the colorado river goes through", "source": "state that state that colorado river traverses borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado)))", "qid": "geo880_test_99", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what is the capital city of the state containing death valley", "source": "city that is capital of state that death valley is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley)))", "qid": "geo880_train_2216", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which city is the capital of state that borders california", "source": "city that is capital of state that california borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california)))", "qid": "geo880_train_276", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what other rivers are in the state where the colorado river flows", "source": "river that traverses state that colorado river traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado)))", "qid": "geo880_train_1630", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which riverse traverse the stae that contains sacramento", "source": "river that traverses state that sacramento is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_665", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what locations are found in states that have a place called sacramento", "source": "place that is contained by state that sacramento is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_1145", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what mountain is in a california bordering state", "source": "mountain that is contained by state that california borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california)))", "qid": "geo880_train_257", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what city is in the same state as death valley", "source": "city that is contained by state that death valley is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley)))", "qid": "geo880_train_1664", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which river traverses the state contains mt whitney", "source": "river that traverses state that mount whitney is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney)))", "qid": "geo880_train_377", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what states border the state containing death valley", "source": "state that borders state that death valley is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley)))", "qid": "geo880_train_391", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which mountains are located in the state that contains sacramento", "source": "mountain that is contained by state that sacramento is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_1682", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what lake is in the states near california", "source": "lake that is contained by state that california borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california)))", "qid": "geo880_train_885", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which cities are located in the state that contains death valley", "source": "city that is contained by state that death valley is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley)))", "qid": "geo880_train_2205", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "state with most capitals", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_test_719", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "state with fewest capitals", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_2321", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the fewest capitals", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_1142", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which state has the lowest number of capitals", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_92", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the greatest number of capitals", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_test_644", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the most capital", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_train_2693", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which state has the most capitals", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_train_632", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the least number of capitals", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_2939", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the least number of capital", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_1920", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the most capitals", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_train_2530", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state borders california and contains the capital sacramento", "source": "state that california borders and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_test_521", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state is bordered by california and contains sacramento", "source": "state that sacramento is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_2764", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento for its capital and the death valley within it", "source": "state that death valley is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_202", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state contains the colorado river and has a capital of sacramento", "source": "state that colorado river traverses and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1962", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states include sacramento and border california", "source": "state that sacramento is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1171", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state is traversed by the colorado river and whose capital is sacramento", "source": "state that colorado river traverses and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1822", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains lake tahoe and has sacramento as capital", "source": "state that lake tahoe is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_513", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state with the capital sacramento contains lake tahoe", "source": "state that lake tahoe is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1202", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states share borders with california and have a capital of sacramento", "source": "state that california borders and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_test_214", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento as its capital and contains lake tahoe", "source": "state that lake tahoe is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2417", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what lakes are found in california and other states", "source": "state that lake that is contained by california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2677", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what cities are capitals of states that border california", "source": "city that is capital of state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1340", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state has a location that is located in california", "source": "state that place that is contained by california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2474", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what is the river that traverses california", "source": "state that river that traverses california traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california)))", "qid": "geo880_train_695", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what geographic places are contained within california", "source": "state that place that is contained by california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) fb:en.state.california)))", "qid": "geo880_test_53", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state has a river that crosses through california in it", "source": "state that river that traverses california traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2105", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state has a mountain that is in california in it", "source": "state that mountain that is contained by california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1757", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state is next to a california bordering state", "source": "state that state that borders california borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2514", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what states shares rivers with california", "source": "state that river that traverses california traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california)))", "qid": "geo880_test_620", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state has a mountain that is also in california", "source": "state that mountain that is contained by california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california)))", "qid": "geo880_train_76", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "name a capital city", "source": "city that is a capital and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string capital_city)))", "qid": "geo880_train_1344", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what city is a major city and a capital", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_train_2557", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which cities are capitals of their states", "source": "city that is a capital and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string capital_city)))", "qid": "geo880_test_640", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what is a major city that is also a capital", "source": "city that is major and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string capital_city)))", "qid": "geo880_train_1658", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what are all the major cities that are capitals", "source": "city that is major and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string capital_city)))", "qid": "geo880_train_1275", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what river is a major river", "source": "river that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)) (string major_river)))", "qid": "geo880_train_121", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what city is both a major city and a capital", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_train_987", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which is a major lake", "source": "lake that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)) (string major_lake)))", "qid": "geo880_train_1152", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what capital city is also a major city", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_test_678", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what major city is also the state capital", "source": "city that is major and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string capital_city)))", "qid": "geo880_train_2400", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
