{"paraphrased": "people born in or before 2004", "source": "person whose birthdate is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_422", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "person born before 2004", "source": "person whose birthdate is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_2789", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "people born before 2004", "source": "person whose birthdate is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_361", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "persons born before 2004", "source": "person whose birthdate is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_378", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "people who birthdates are after 2004", "source": "person whose birthdate is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_414", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "people who were born after 2004", "source": "person whose birthdate is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_295", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "what person has a birthdate earlier than 2004", "source": "person whose birthdate is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_3151", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "who was born after 2004", "source": "person whose birthdate is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_729", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "people born in or after 2004", "source": "person whose birthdate is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_558", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "who was born in 2004", "source": "person whose birthdate is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_138", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "what is alices height", "source": "height of alice", "target": "(call listValue (call getProperty en.person.alice (string height)))", "qid": "socialnetwork_test_584", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is alices gender", "source": "gender of alice", "target": "(call listValue (call getProperty en.person.alice (string gender)))", "qid": "socialnetwork_train_547", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "alices birthplace", "source": "birthplace of alice", "target": "(call listValue (call getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_train_2365", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is alices date of birth", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_train_3361", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "where was alice born", "source": "birthplace of alice", "target": "(call listValue (call getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_test_179", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is alices birthplace", "source": "birthplace of alice", "target": "(call listValue (call getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_train_1148", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the status of alices relationship", "source": "relationship status of alice", "target": "(call listValue (call getProperty en.person.alice (string relationship_status)))", "qid": "socialnetwork_train_2936", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the birth date of alice", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_test_50", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "place where alice was born", "source": "birthplace of alice", "target": "(call listValue (call getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_train_2675", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "when was alice born", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_train_1925", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "find me all people who are 180 cm tall and currently online", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_2019", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find people who are 180 cm tall and logged in", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1899", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what person is 180 cm tall and is currently online", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_799", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what online person is 180 cm tall", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_test_559", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "who is online that is 180 cm tall", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1530", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "who is online and is 180 cm tall", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1258", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "who has a height of 180 and is logged in", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_test_40", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what people are logged in with a height of 180 cm", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1721", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "people who is taller then 180 cm logged in", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1719", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find birthplaces of employees who started before 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2537", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find birth cities for students who have a start date no later than 2004", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1961", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of people that stopped working before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_430", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of employees sho started before 2004", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2938", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of people that started working in or after 2004", "source": "relationship status that is relationship status of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_131", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employee has the same relationship status as the employee who started earlier than 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_816", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of all students who started after 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2461", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what city is the birthplace of the employee who ended working before 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2612", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of people that started school after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_960", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find cities that are the birthplaces of employees with an end date no later than 2004", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_758", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employee has an employer that is either mckinsey or google", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2106", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is studying computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1074", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students whose fields are computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_788", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students major in computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_393", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees are either software engineers or program managers", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2685", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is software engineer or program manager", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_442", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who works as a software engineer or manager", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_448", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student studied computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_519", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students are software engineers or program managers", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_847", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that work for mckinsey or google", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1158", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who has maximum 2 job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2103", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students with one field of study", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2223", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees for two employers maximum", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_653", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students who have no more than two fields of study", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_368", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee has less than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2864", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students are part of two universities", "source": "student that has at most two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_252", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students with one or two fields of study", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_436", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who studied in two or less fields", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1117", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that studied at at most two universities", "source": "student that has at most two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3038", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee with not more than two job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1462", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me all the online singles", "source": "person whose relationship status is single and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_train_2475", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "people born in new york and currently online", "source": "person whose birthplace is new york and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "qid": "socialnetwork_train_525", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "friends of alice that are currently online", "source": "person that is friends with alice and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_2871", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what person that is online is friends with alice", "source": "person that is friends with alice and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1864", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "any friend of alice that is logged in", "source": "person that is friends with alice and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1796", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "any male who is logged in", "source": "person whose gender is male and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "qid": "socialnetwork_train_371", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "people that are currently online that are single", "source": "person whose relationship status is single and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_train_2624", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "alices online friends", "source": "person that is friends with alice and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_test_157", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "males that are currently online", "source": "person whose gender is male and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "qid": "socialnetwork_test_502", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "males who are online", "source": "person whose gender is male and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "qid": "socialnetwork_train_1324", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "people taller than alice", "source": "person whose height is larger than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_1322", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find people who are not bigger than alice in height", "source": "person whose height is at most height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2396", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "person born after alice", "source": "person whose birthdate is larger than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_3115", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "people born after alice", "source": "person whose birthdate is larger than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_945", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find people who are greater in height than alice", "source": "person whose height is larger than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_450", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "people who are shorter than alice", "source": "person whose height is smaller than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_305", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all people who are older than alice", "source": "person whose birthdate is larger than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_3467", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "who was born before alice", "source": "person whose birthdate is smaller than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_test_662", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "who is taller than alice", "source": "person whose height is larger than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_195", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "people who are at least as tall as alice", "source": "person whose height is at least height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_1974", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "friends of all the people born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2224", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what is the gender of person who is born in 2004", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1559", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find birthplace cities of persons born in 2004", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_295", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find the birthplaces of people born in 2004", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_849", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what is the gender of the person whose birthdate is in 2004", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3381", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what gender does the person born in 2004 have", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1049", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "relationship status that is the same as a person born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_843", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "who is friends with someone born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3341", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "name a persons friend who was born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_886", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what relationship statuses are claimed by people born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1426", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what students have a start date that is either 2004 or 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_879", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose end date is before 2004 or 2010", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_807", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me a list of employees whose start date was in 2004 or 2010", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_588", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employee whose last day was before 2010", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1813", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the most end date of student 2004 or 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1140", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "an employee ending in 2004 or 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2523", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped work after 2004 or after 2010", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_92", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees starting after 2004", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1028", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees started no sooner than 2004 or 2010", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2457", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name an employee who started in 2004 but before 2011", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1101", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person who is 180 or 200cm tall", "source": "person whose height is 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call concat (number 180 en.cm) (number 200 en.cm))))", "qid": "socialnetwork_test_252", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "people that are 180 cm or 200 cm tall", "source": "person whose height is 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call concat (number 180 en.cm) (number 200 en.cm))))", "qid": "socialnetwork_train_3396", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "what person has a height of 180 to 200 cm", "source": "person whose height is 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call concat (number 180 en.cm) (number 200 en.cm))))", "qid": "socialnetwork_train_3238", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "find employees starting the same day as student alice", "source": "employee whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_836", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students go to the same university as student alice", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2248", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is the boss of alice", "source": "employee whose employer is employer of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_566", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee with same start date as that of employee alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_595", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students who have a start date equal to student alices end date", "source": "student whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2117", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students with a start date the same as employee alices end date", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_460", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student has same end date as that of alice", "source": "student whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_302", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who works for the same employer as ailce", "source": "employee whose employer is employer of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3236", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "one student who started on the same day as employee alice", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2018", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who started in alices end date", "source": "employee whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3292", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are friends with either alice or bob", "source": "person that is friends with alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_176", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find everyone who is either single or married", "source": "person whose relationship status is single or married", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call concat en.relationship_status.single en.relationship_status.married)))", "qid": "socialnetwork_train_2099", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "people who are male or female", "source": "person whose gender is male or female", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call concat en.gender.male en.gender.female)))", "qid": "socialnetwork_train_1261", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "who is born in new york or beijing", "source": "person whose birthplace is new york or beijing", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_1967", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "people born in new york or beijing", "source": "person whose birthplace is new york or beijing", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_2469", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find someone of any gender", "source": "person whose gender is male or female", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call concat en.gender.male en.gender.female)))", "qid": "socialnetwork_train_688", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "who is friend of either alice or bob", "source": "person that is friends with alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2790", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "people born in new york or beijing", "source": "person whose birthplace is new york or beijing", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_480", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find a friend of alice or bob", "source": "person that is friends with alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_300", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "people that are male or female", "source": "person whose gender is male or female", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call concat en.gender.male en.gender.female)))", "qid": "socialnetwork_train_1321", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find people 180 cm tall", "source": "person whose height is 180 cm and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_624", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people whose height is 180 cm", "source": "person whose height is 180 cm and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3529", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people who ate 180 cm tall", "source": "person whose height is 180 cm and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2900", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which people are 180 cm tall", "source": "person whose height is 180 cm and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_333", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what city were alice or bob born in", "source": "city that is birthplace of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1565", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what is the relationship status of alice or bob", "source": "relationship status that is relationship status of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1124", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "who is friends with bob or alice", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_888", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find people with the same gender as alice or bob", "source": "gender that is gender of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2387", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what city was alice or bob born in", "source": "city that is birthplace of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2563", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what is the relationship status of alice or bob", "source": "relationship status that is relationship status of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_235", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "a friend of alice or bob", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_809", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find people who are friends with either alice or bob", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_426", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "which genders are alice and bob", "source": "gender that is gender of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2665", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "who is friends with either alice or bob", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_64", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "people who are 180 cm tall and are currently online", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3164", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "current users who are 180 cm tall", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3366", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find people logged in who are 180 cm tall", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2956", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "180 cm tall person who is logged in", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_823", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find people who are logged in with a height of 180 cm", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1495", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name the person with a height of 180 cm who is logged in", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1929", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name a person who is online who is 180 cm tall", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1043", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who is friends with someone whos birthdate is 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2136", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "friend of someone born in 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_936", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "people that have a friend born in 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1832", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "people who have friends that were born in 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_233", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find all people who is friend with people born in 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1924", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "people that are friends with someone born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_678", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "person who has male friends", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_3312", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "a friend of alices friend", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_2397", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who are friends with males", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_3261", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what person is friends with the person who was born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_535", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who have friends that were born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2363", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "anyone friend of a male", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2426", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people that are friends with someone that is single", "source": "person that is friends with person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2383", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what people are friends with those who are friends with alice", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_549", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all people who has a friend born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_639", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people born in 2004 and who are 180 cm tall", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2684", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find people with a height of 180 cm who also have a birthdate of 2004", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_166", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "which people are 180 cm tall and started school in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3303", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find people 180 cm tall born in 2004", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_780", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find people with a height of 180 cm and a state date of 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_647", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what people have an end date of 2004 and height of 180 cm", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_56", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people who started in 2004 and are 180 cm tall", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_850", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find me all people whose height is 180 cm and born in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_740", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "all 180 cm tall people born in 2004", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3200", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what person who ended in 2004 is 180 cm tall", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_789", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people that are shorter than 180 cm", "source": "person whose height is smaller than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_3255", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "persons whose height is 180 cm or higher", "source": "person whose height is at least 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_test_639", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "what person is 200 cm or shorter", "source": "person whose height is at most 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_2116", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "people who are taller than 180 cm or 200 cm", "source": "person whose height is larger than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_test_517", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "people shorter than 200 cm", "source": "person whose height is at most 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_1887", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "person who is shorter than 180 cm or 200 cm", "source": "person whose height is smaller than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_3500", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a person who is taller than 180 cm", "source": "person whose height is larger than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_2545", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "what persons height is shorter than 180 to 200 cm", "source": "person whose height is smaller than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_897", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all people are are taller than 180 cm", "source": "person whose height is larger than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_726", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "whose hight is at least 180cm", "source": "person whose height is at least 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_3294", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "who was born in 2004 and is 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_909", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who was born in 2004 and is 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2969", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people who were born in 2004 and are 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2286", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what people have a birthdate that is 2004 and whose height is 180 cm", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2330", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which people born in 2004 are 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_782", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find people born in 2004 who are 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_840", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which people are 180 cm tall and have a birthdate of 2004", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1875", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who was born in 2004 and is 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1591", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name a person born in 2004 who is 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2704", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find people  born in 2004 whose height is 180 cm", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1592", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what person has the same height as alice", "source": "person whose height is height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call getProperty en.person.alice (string height))))", "qid": "socialnetwork_test_823", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "people who were born in the same place as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_1347", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what person has the same birthdate as alice", "source": "person whose birthdate is birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_train_992", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "people born in the same place as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_test_482", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find people who have the same birthplace as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_223", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "people with the same relationship status as alice", "source": "person whose relationship status is relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call getProperty en.person.alice (string relationship_status))))", "qid": "socialnetwork_train_2229", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "who has same height as alice", "source": "person whose height is height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call getProperty en.person.alice (string height))))", "qid": "socialnetwork_test_184", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find people with same birthplace as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_1607", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find someone with the same gender as alice", "source": "person whose gender is gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call getProperty en.person.alice (string gender))))", "qid": "socialnetwork_test_620", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "people who have the same birthday as alice", "source": "person whose birthdate is birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_train_602", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "whome is alice friends with who also have a birthdate of 2004", "source": "person that alice is friends with and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3322", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "friend of alice with birthdate in 2004", "source": "person that alice is friends with and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_864", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "name a person born in 2004 who is friends with alice", "source": "person that alice is friends with and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_73", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "which employee started after 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_124", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees left prior to 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1118", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose start date is after 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_459", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all the students that started in 2004 and after", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2515", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees who quit the job after 2004 ", "source": "employee whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_862", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose start date is not after 2004", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_103", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who quit their job in or after 2004", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1231", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who quit their job after 2003", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_445", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students left after 2004", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3388", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who completed the study after 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_991", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are at least 180 cm tall", "source": "person whose height is at least 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_600", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find someone taller than 180 cm", "source": "person whose height is larger than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_661", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "people shorter than 180 cm", "source": "person whose height is smaller than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2340", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "people that are at most 180 cm tall", "source": "person whose height is at most 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_736", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "people who are 180 cm or less in height", "source": "person whose height is at most 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2800", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "people who are 180 cm or taller", "source": "person whose height is at least 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_1300", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "people that are taller than 180 cm", "source": "person whose height is larger than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_239", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what person is shorter than 180 cm", "source": "person whose height is smaller than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_1689", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what person has a height of at least 180 cm", "source": "person whose height is at least 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_1051", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "people who are shorter than 181 cm", "source": "person whose height is at most 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_3430", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "presently logged in persons whose relationship status is single", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1941", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what online person is single", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_423", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "single people that are currently online", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1083", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what person is logged in and was born in new york", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2576", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "anyone single who is logged in", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3046", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all males that are currently online", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_915", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who are male and currently online", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3263", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which of alices friends are currently online", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_126", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "any male who has logged in", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2513", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people born in new york that are currently online", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_583", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
