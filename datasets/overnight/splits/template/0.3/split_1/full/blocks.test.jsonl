{"paraphrased": "what block that is not block 1 is below", "source": "block that block 1 not is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string !=) en.block.block1))", "qid": "blocks_test_360", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "left of block 1", "source": "block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_185", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block above block 1", "source": "block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1201", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select a block that is not below block 1", "source": "block that block 1 not is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string !=) en.block.block1))", "qid": "blocks_test_161", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block left of block 1", "source": "block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1502", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is left of", "source": "block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_860", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks above block 1", "source": "block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_367", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that block 1 is not to the left of", "source": "block that block 1 not is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string !=) en.block.block1))", "qid": "blocks_train_1454", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is to the left of block 1", "source": "block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_853", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block not below block 1", "source": "block that block 1 not is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string !=) en.block.block1))", "qid": "blocks_train_1462", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that is to the left and above block 1", "source": "block that is left of block 1 and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_569", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find blocks above block 1 and below block 1 ", "source": "block that is above block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1440", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block in the shape of a pyramid above block 1", "source": "block that is above block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1565", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose block with pyramid shape under block 1", "source": "block whose shape is a pyramid and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string below) (string =) en.block.block1))", "qid": "blocks_train_207", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all pyramid blocks that is left of block 1", "source": "block whose shape is a pyramid and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string left) (string =) en.block.block1))", "qid": "blocks_train_845", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is in the shape of a pyramid and is above block 1", "source": "block whose shape is a pyramid and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string above) (string =) en.block.block1))", "qid": "blocks_train_369", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid above block 1", "source": "block whose shape is a pyramid and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string above) (string =) en.block.block1))", "qid": "blocks_test_143", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the pyramidshape blocks above block 1", "source": "block whose shape is a pyramid and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string above) (string =) en.block.block1))", "qid": "blocks_train_1339", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks left and below block 1", "source": "block that is left of block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_290", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks that are above and below block 1", "source": "block that is below block 1 and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_1052", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks above pyramid blocks", "source": "block that block whose shape is a pyramid is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_280", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below block one", "source": "block that block that is below block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_1312", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks above a pyramid block", "source": "block that block whose shape is a pyramid is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1045", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block to the right and below block 1", "source": "block that block that is right of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_16", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "2 blocks below block 1", "source": "block that block that is below block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_483", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block left of pyramid", "source": "block that block whose shape is a pyramid is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1158", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block above and right from block 1", "source": "block that block that is left of block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_1389", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block that is right of the block that block 1 is to the left of", "source": "block that block that is right of block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_test_289", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the pyramidshaped blocks", "source": "block that block whose shape is a pyramid is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1345", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "left of block below block 1", "source": "block that block that is below block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_287", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "pyramid block below block 1", "source": "block that block 1 is above and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_868", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block right and below block 1", "source": "block that block 1 is left of and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1347", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which block is above block 1", "source": "block that block 1 is above and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_1437", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid block above block 1", "source": "block that block 1 is below and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_614", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block above the left one", "source": "block that block 1 is above and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_1198", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that has block 1 above and below", "source": "block that block 1 is above and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_707", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 at right and left", "source": "block that block 1 is left of and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_446", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 above and left", "source": "block that block 1 is left of and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1129", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what pyramid shaped block is at right of block 1", "source": "block that block 1 is left of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_140", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that block 1 is to ther right of and that has a shape of a pyramid", "source": "block that block 1 is right of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_537", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose the brick shaped like a pyramid or a cube", "source": "block whose shape is a pyramid or a cube", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call concat en.shape.pyramid en.shape.cube)))", "qid": "blocks_train_745", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find the block that is shaped like a pyramid or a cube", "source": "block whose shape is a pyramid or a cube", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call concat en.shape.pyramid en.shape.cube)))", "qid": "blocks_train_652", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "select all bricks right of block 1 or 2", "source": "block that is right of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_379", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find a block below either block 1 or block 2", "source": "block that is below block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_test_100", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me all the blocks above block 1 or 2", "source": "block that is above block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1463", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me all the bricks below block 1 or 2", "source": "block that is below block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_988", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me a pyramid or cube shaped block", "source": "block whose shape is a pyramid or a cube", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call concat en.shape.pyramid en.shape.cube)))", "qid": "blocks_train_1148", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "block that is left of block 1 or block 2", "source": "block that is left of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1572", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "which brick is below brick 1 or 2", "source": "block that is below block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1467", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me a block to the right of either block 1 or block 2", "source": "block that is right of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_76", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find the block located to the right of at least two other blocks", "source": "block that at least two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_345", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block with two blocks to the left of it", "source": "block that at least two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_593", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what brick has more than 2 bricks to its right", "source": "block that more than two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_37", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that at least two block is below", "source": "block that at least two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_184", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that more than two block is above", "source": "block that more than two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_137", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which block has two blocks above it", "source": "block that two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1373", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with less than 2 blocks to the left", "source": "block that less than two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_576", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that at most two block is left of", "source": "block that at most two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_698", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block that is to the left of block 2", "source": "block that less than two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1508", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block to the right of block 2", "source": "block that less than two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_506", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a special block to the left of block 1", "source": "block that is special and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string left) (string =) en.block.block1))", "qid": "blocks_train_1065", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks above block 1", "source": "block that is special and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1374", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks below block 1", "source": "block that is special and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string below) (string =) en.block.block1))", "qid": "blocks_test_314", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which special block is to the left of brick 1", "source": "block that is special and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string left) (string =) en.block.block1))", "qid": "blocks_train_467", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the special blocks right of block 1", "source": "block that is special and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string right) (string =) en.block.block1))", "qid": "blocks_train_1313", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks above block 1", "source": "block that is special and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string above) (string =) en.block.block1))", "qid": "blocks_train_764", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a special block that is below block 1", "source": "block that is special and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string below) (string =) en.block.block1))", "qid": "blocks_train_969", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all special blocks below block 1", "source": "block that is special and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string below) (string =) en.block.block1))", "qid": "blocks_train_757", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what special blocks are left of block 1", "source": "block that is special and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string left) (string =) en.block.block1))", "qid": "blocks_train_1587", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special pyramid blocks", "source": "block that is special and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_921", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me a 3inch wide block to the right of block 1", "source": "block that is right of block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1594", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which block of 3 width is to the right of block 1", "source": "block that is right of block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_583", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block right of 3 inches long block 1", "source": "block that is right of block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_216", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "a 3 inch brick that is shaped like a pyramid", "source": "block whose shape is a pyramid and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1432", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which block is below block 1 that is at least 3 inches high", "source": "block that is below block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_120", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which 3 inch brick is below brick 1", "source": "block that is below block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_329", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch wide blocks left of block 1", "source": "block that is left of block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_243", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a 3 inch wide pyramidshaped block", "source": "block whose shape is a pyramid and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1351", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block 3 inched high to the right of block 1", "source": "block that is right of block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_991", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select me the block that is above block 1 and has a height of 3 inches", "source": "block that is above block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_751", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "locate a block with a width that is more than either 3 or 6 inches", "source": "block whose width is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_789", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "choose a block that is taller than 3 or 6 inches", "source": "block whose height is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1567", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which brick has a length smaller than 3 or 6 inches", "source": "block whose length is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_414", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "what blocks length is greater than 3 to 6 inches", "source": "block whose length is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_test_230", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all blocks whose width is smaller than 6 inches", "source": "block whose width is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_475", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find blocks that are at least 3 inches wide or 6 inches wide", "source": "block whose width is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_240", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which block has a width of less than 3 inches", "source": "block whose width is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_151", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all the blocks taller than 3 inches", "source": "block whose height is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1143", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block that is at least 3 to 6 inches", "source": "block whose length is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1242", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which brick is no higher than 3 or 6 inches", "source": "block whose height is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_234", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "what block is above the block that block 1 is to the right of", "source": "block that is above block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_test_44", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below block right of block 1", "source": "block that is below block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1291", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is below the block that is below block 1", "source": "block that is below block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1059", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "2 blocks below block 1", "source": "block that is below block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_test_335", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block two up from block 1", "source": "block that is above block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1442", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block left and below block 1", "source": "block that is left of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_397", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks over that block 1 is left of", "source": "block that is above block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1320", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the right of the block that block 1 is above", "source": "block that is right of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_602", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks left of that block 1 is below", "source": "block that is left of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1096", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is above the block that is below block 1", "source": "block that is above block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1177", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "above block at least 3 inches long", "source": "block that block whose length is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_295", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks right of 3 inch tall blocks", "source": "block that block whose height is 3 inches is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_154", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find the block below the block that is 3 inches in width", "source": "block that block whose width is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_test_267", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block above 3 inch block", "source": "block that block whose height is 3 inches is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_1193", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "select the block that is left of a block that is 3 inches", "source": "block that block whose height is 3 inches is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_1013", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "select the blocks that are 3 inches long", "source": "block that block whose length is 3 inches is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_871", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find the block of 3 inches height and placed in left ", "source": "block that block whose height is 3 inches is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_1128", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "select the block that is on the left side of the block that is 3 inches in length", "source": "block that block whose length is 3 inches is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_742", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is above a block that is three inches in height", "source": "block that block whose height is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_73", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "select the block that has a length of two inches above another block", "source": "block that block whose length is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_558", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find the block whose width is 3 inches and is on the right side of block 1", "source": "block whose width is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_320", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the 3 inches in length block that is on the left side  of block 1", "source": "block whose length is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_262", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block 3 inches long and below block one", "source": "block whose length is 3 inches and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1029", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch block left of block 1", "source": "block whose length is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_442", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "look right of block 1 and find 3 inch block", "source": "block whose length is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_591", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block whose height is 3 inches", "source": "block whose height is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_946", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch block above block 1", "source": "block whose height is 3 inches and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1292", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is left of block 1 and 3 inches in length", "source": "block whose length is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1106", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch tall blocks that block 1 is right of", "source": "block whose height is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1443", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which block of 3 inches height is above the block 1 ", "source": "block whose height is 3 inches and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_test_242", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks with less than 2 colors", "source": "block that has less than two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string <) (number 2)))", "qid": "blocks_train_669", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select a block with less than two colors", "source": "block that has less than two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string <) (number 2)))", "qid": "blocks_train_269", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block with more than two shapes", "source": "block that has more than two shape", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string shape) (string >) (number 2)))", "qid": "blocks_train_278", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block with a maximum of two colors on it", "source": "block that has at most two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string <=) (number 2)))", "qid": "blocks_test_88", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all blocks with at most 2 colors", "source": "block that has at most two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string <=) (number 2)))", "qid": "blocks_train_80", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which brick has less than two shapes", "source": "block that has less than two shape", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string shape) (string <) (number 2)))", "qid": "blocks_train_715", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block with two or more shapes", "source": "block that has at least two shape", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string shape) (string >=) (number 2)))", "qid": "blocks_test_288", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all blocks with at least 2 shapes", "source": "block that has more than two shape", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string shape) (string >) (number 2)))", "qid": "blocks_train_1420", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all blocks with 2 shapes", "source": "block that has two shape", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (number 2)))", "qid": "blocks_train_1480", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select blocks that are two colors", "source": "block that has two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (number 2)))", "qid": "blocks_train_1036", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which is the block to the right of special block", "source": "block that block that is special is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_415", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all special blocks that is below", "source": "block that block that is special is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_1227", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "block below special block", "source": "block that block that is special is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_393", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "block above special block", "source": "block that block that is special is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_50", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all special blocks that are above", "source": "block that block that is special is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_1215", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks that are special", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_164", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find the block on the left side of the special block", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_136", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the block above special block", "source": "block that block that is special is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_672", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me a block that has a special block to its right", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_336", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all special blocks left of something", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_650", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
